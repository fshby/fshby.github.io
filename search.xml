<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo常用格式</title>
      <link href="/posts/73a3105b.html"/>
      <url>/posts/73a3105b.html</url>
      
        <content type="html"><![CDATA[<h2 id="post文章头部设定格式"><a href="#post文章头部设定格式" class="headerlink" title="post文章头部设定格式"></a>post文章头部设定格式</h2><p>1、 一般格式<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">swiper_index:</span> <span class="number">2</span>  <span class="comment">#文章置顶优先级</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="attr">description:</span> </span><br><span class="line"><span class="attr">cover:</span> <span class="string">&#x27;https://npm.elemecdn.com/akilar-candyassets/image/20201115152231.png&#x27;</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">&#x27;url(https://fshby.top/bg/bg06.jpg)&#x27;</span></span><br></pre></td></tr></table></figure><br>2、其他格式<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">updated:</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">top_img:</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line"><span class="attr">katex:</span></span><br><span class="line"><span class="attr">aside:</span></span><br><span class="line"><span class="attr">aplayer:</span></span><br><span class="line"><span class="attr">highlight_shrink:</span></span><br><span class="line"><span class="attr">post_copyright:</span></span><br></pre></td></tr></table></figure><br>3、设置为隐私格式<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">password:</span> <span class="number">156</span></span><br><span class="line"><span class="attr">abstract:</span> <span class="string">&#x27;有东西被加密了, 请输入密码查看.&#x27;</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">&#x27;您好, 这里需要密码.&#x27;</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">xray</span></span><br><span class="line"><span class="attr">wrong_pass_message:</span> <span class="string">&#x27;抱歉, 这个密码看着不太对, 请再试试.&#x27;</span></span><br><span class="line"><span class="attr">wrong_hash_message:</span> <span class="string">&#x27;抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.&#x27;</span></span><br></pre></td></tr></table></figure><br>4、常用图库链接<br><details class="folding-tag" green><summary> 查看链接 </summary>              <div class='content'>              <ul><li><a href="https://fshby.top/bg/草原日落.jpg">https://fshby.top/bg/草原日落.jpg</a></li><li><a href="https://fshby.top/bg/城市日落.jpg">https://fshby.top/bg/城市日落.jpg</a></li><li><a href="https://fshby.top/bg/机器女警.jpg">https://fshby.top/bg/机器女警.jpg</a></li><li><a href="https://fshby.top/bg/天空之境.jpg">https://fshby.top/bg/天空之境.jpg</a></li><li><a href="https://fshby.top/bg/小镇天空.jpg">https://fshby.top/bg/小镇天空.jpg</a></li><li><a href="https://fshby.top/bg/晚雪.jpg">https://fshby.top/bg/晚雪.jpg</a></li><li><a href="https://fshby.top/bg/小镇天空.jpg">https://fshby.top/bg/小镇天空.jpg</a></li><li><a href="https://fshby.top/bg/木桥秋.jpg">https://fshby.top/bg/木桥秋.jpg</a></li><li><a href="https://fshby.top/bg/房屋隧道.jpg">https://fshby.top/bg/房屋隧道.jpg</a></li><li><a href="https://fshby.top/bg/bg01.jpg">https://fshby.top/bg/bg01.jpg</a></li><li><a href="https://fshby.top/bg/bg02.jpg">https://fshby.top/bg/bg02.jpg</a></li><li><a href="https://fshby.top/bg/bg03.jpg">https://fshby.top/bg/bg03.jpg</a></li><li><a href="https://fshby.top/bg/bg04.jpg">https://fshby.top/bg/bg04.jpg</a></li><li><a href="https://fshby.top/bg/bg05.jpg">https://fshby.top/bg/bg05.jpg</a></li><li><a href="https://fshby.top/bg/bg06.jpg">https://fshby.top/bg/bg06.jpg</a></li><li><a href="https://fshby.top/bg/bg07.jpg">https://fshby.top/bg/bg07.jpg</a></li><li><a href="https://fshby.top/bg/bg08.jpg">https://fshby.top/bg/bg08.jpg</a></li></ul>              </div>            </details></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> post </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见Error处理与处理办法</title>
      <link href="/posts/64207f9c.html"/>
      <url>/posts/64207f9c.html</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-deply问题"><a href="#hexo-deply问题" class="headerlink" title="hexo deply问题"></a>hexo deply问题</h2><p>针对此方面问题首先确定是否是因为github或者Vercel被墙了,使用电脑cmd命令ping一下网站，如果没有问题继续下面步骤：</p><p>终端提示：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (E:\hexo-zkf2.0\Hexo-zkf-2.0\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (node:events:527:28)</span><br><span class="line">      at ChildProcess.cp.emit (E:\hexo-zkf2.0\Hexo-zkf-2.0\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/trouble</span><br><span class="line">shooting.html</span><br></pre></td></tr></table></figure><br>解决办法:<br>出现这种错误，可能是.deploy_git文件出现变动或者误删改造成的，可以采用如下解决办法：<br><a href="https://blog.csdn.net/qq_28919533/article/details/124338891">参考文献</a></p><ol><li>进入hexo根目</li><li>直接暴力删除 .deploy_git和public文件</li><li>暴力三连 hexo c  hexo g  hexo d</li></ol><div class="tip warning"><p>提示:部分地区可能由于使用5G网络原因造成错误，建议更滑网络重新三连</p></div>]]></content>
      
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows技巧</title>
      <link href="/posts/761adea4.html"/>
      <url>/posts/761adea4.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用注册表添Windows桌面右键菜单快捷键"><a href="#使用注册表添Windows桌面右键菜单快捷键" class="headerlink" title="使用注册表添Windows桌面右键菜单快捷键"></a>使用注册表添Windows桌面右键菜单快捷键</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <p>说明：当使用方法1时,可以右键点击桌面菜单打开；使用方法2，可以右键点击文件夹打开菜单<br>方法1：<br><a href="https://jingyan.baidu.com/article/7e440953dc0f6e2fc0e2ef00.html">参考链接</a>  </p><ol><li>使用快捷键<kbd>windows</kbd>+<kbd>R</kbd>运行<code>regedit</code>打开注册表</li><li>找到<code>HKEY_CLASSES_ROOT/Directory/Background/shell</code> 右键新建<code>项</code> 更改默认右键菜单名</li><li>打开新建的项，新建conmmand文件夹中更改默认源程序路径<br>  <span class='p red'>例：E:\小程序\Microsoft VS Code\Code.exe</span>  </li></ol><p>方法2：</p><ol><li>使用快捷键<kbd>windows</kbd>+<kbd>R</kbd>运行<code>regedit</code>打开注册表</li><li>找到<code>HKEY_CLASSES_ROOT/Directory/shell</code> 右键新建<code>项</code> 更改默认右键菜单名</li><li>打开新建的项，新建conmmand文件夹中更改默认源程序完整路径<br>  <span class='p red'>例：E:\小程序\Microsoft VS Code\Code.exe</span>  </li></ol><p>为右键菜单选项添加ioc图标:</p><ol><li>使用快捷键<kbd>windows</kbd>+<kbd>R</kbd>运行<code>regedit</code>打开注册表</li><li>找到<code>HKEY_CLASSES_ROOT/Directory/shell</code> 右键新建<code>项</code> 更改默认右键菜单名</li><li>打开新建的项，新建<span class='nota' data-nota='REG_SZ'>字符串值</span>文件,并重命名为<code>Icon</code> </li><li>添加ico文件路径即可   </li></ol>              </div>            </details><h2 id="关闭笔记本电脑原装键盘"><a href="#关闭笔记本电脑原装键盘" class="headerlink" title="关闭笔记本电脑原装键盘"></a>关闭笔记本电脑原装键盘</h2><p>在使用外接假盘是，将笔记本原装键盘关闭会更加边界，以免误操作。<br><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <p><a href="https://www.xuezuzhuang.com/yjzs/20270.html">参考链接</a> </p><ol><li>使用快捷键<kbd>windows</kbd>+<kbd>R</kbd>    <code>以管理员身份运行</code></li><li>关闭原装键盘：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc config i8042prt start= disabled</span><br></pre></td></tr></table></figure></li><li>打开原装键盘：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc config i8042prt start= auto</span><br></pre></td></tr></table></figure></li><li>重启电脑生效</li></ol>              </div>            </details></p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记(二)</title>
      <link href="/posts/5a8a6c8d.html"/>
      <url>/posts/5a8a6c8d.html</url>
      
        <content type="html"><![CDATA[<a href="/posts/ad4f1e09.html" title="🍉C++学习笔记(一)">🍉C++学习笔记(一)</a><a href="/posts/5a8a6c8d.html" title="🍊C++学习笔记(二)">🍊C++学习笔记(二)</a><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="运算符重载的概念"><a href="#运算符重载的概念" class="headerlink" title="运算符重载的概念"></a>运算符重载的概念</h3><blockquote><p>概念</p><blockquote><p>运算符重载：给已有的运算符赋予多重含义，使同一个运算符作用于不同类型的数据时产生不同行为。</p></blockquote><p>目的</p><blockquote><p>使得C++中的运算符也能够来操作<code>对象</code></p><blockquote><p>绝大多数运算符可以重载,除下表的7种：</p></blockquote></blockquote></blockquote><div class="table-container"><table><thead><tr><th>名称</th><th>符号</th></tr></thead><tbody><tr><td>成员访问运算符</td><td>.</td></tr><tr><td>成员指针访问运算符</td><td>.<em> , -&gt;</em></td></tr><tr><td>域运算符</td><td>::</td></tr><tr><td>长度运算符</td><td>sizeof</td></tr><tr><td>条件运算符</td><td>？:</td></tr><tr><td>预处理运算符</td><td>#</td></tr></tbody></table></div><blockquote><p>实质</p><blockquote><p>编写以运算符为名称的函数，使用运算符的表达式就被解释为对重载函数的调用</p></blockquote><p>规则</p><blockquote><p>1) 重载运算符应符合原有用法习惯。<br>2) 运算符重载，不能改变运算符原有的语义，包括运算符的优先级和结和性<br>3) 不能改变运算操作数的个数及语法结构，及超出c++语言允许重载范围。<br>4) 重载运算符“()” “ [] ”  “ -&gt; ”或者赋值运算符“ = ”时，只能将他们重载为成员函数，<code>不能重载为全局函数</code>。<br>5) 运算符重载不能改变运算符用于基本数据类型对象的含义。可以用于自定义类型对象与基本数据类型对象之间的混合运算。</p></blockquote><p>运算符函数的格式</p><blockquote><p>返回值类型  <span class='nota' data-nota='函数名'>operator</span>运算符（形参表）{函数体···}</p></blockquote></blockquote><p>例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myComplex <span class="keyword">operator</span>-(<span class="type">const</span> myComplex &amp;c );<span class="comment">//声明成员函数</span></span><br><span class="line"><span class="keyword">friend</span> myComplex <span class="keyword">operator</span>+(<span class="type">const</span> myComplex &amp;c1,<span class="type">const</span> myComplex &amp;c2 );<span class="comment">//声明友元函数 </span></span><br></pre></td></tr></table></figure></p><blockquote><p>注意</p><blockquote><p>运算符可以被重载为<code>全局函数</code>（通常为类的<code>友元函数</code>，因为<emp>全局函数不能访问类的私有成员</emp>），对于二元运算符需要传递两个参数。<br>运算符可以被重载为<code>成员函数</code>，对于二元运算符，只需要传递一个参数。</p></blockquote></blockquote><details class="folding-tag" green><summary> 重载运算符示例 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myComplex</span>&#123;<span class="comment">//复数类 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">double</span> real,imag;<span class="comment">//复数的实部，虚部</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">myComplex</span>();<span class="comment">//声明构造函数 </span></span><br><span class="line"><span class="built_in">myComplex</span>(<span class="type">double</span> r,<span class="type">double</span> i);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">outCom</span><span class="params">()</span> </span>;<span class="comment">//成员函数 </span></span><br><span class="line">myComplex <span class="keyword">operator</span>-(<span class="type">const</span> myComplex &amp;c );<span class="comment">//声明成员函数</span></span><br><span class="line"><span class="keyword">friend</span> myComplex <span class="keyword">operator</span>+(<span class="type">const</span> myComplex &amp;c1,<span class="type">const</span> myComplex &amp;c2 );<span class="comment">//声明友元函数 </span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line">myComplex::<span class="built_in">myComplex</span>()&#123;<span class="comment">//定义构造函数 </span></span><br><span class="line">real = <span class="number">0</span>; imag = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line">myComplex::<span class="built_in">myComplex</span>(<span class="type">double</span> r,<span class="type">double</span> i)&#123;<span class="comment">//定以构造函数 </span></span><br><span class="line">real = r,imag = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myComplex::outCom</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;real&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;imag&lt;&lt;<span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">myComplex myComplex::<span class="keyword">operator</span>-(<span class="type">const</span> myComplex &amp;c )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(<span class="keyword">this</span>-&gt;real-c.real,<span class="keyword">this</span>-&gt;imag-c.imag);</span><br><span class="line">&#125;<span class="comment">//重载成员函数，一个参数返回一个临时对象，this可以省略 </span></span><br><span class="line">myComplex <span class="keyword">operator</span>+(<span class="type">const</span> myComplex &amp;c1,<span class="type">const</span> myComplex &amp;c2  )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(c1.real+c2.real,c1.imag+c2.imag);</span><br><span class="line">&#125;<span class="comment">//重载友元函数，两个参数返回一个临时对象 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">myComplex <span class="title">c1</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span>,<span class="title">c2</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span>,res</span>;</span><br><span class="line"></span><br><span class="line">c1.<span class="built_in">outCom</span>() ;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;operator+&quot;</span>; </span><br><span class="line">c2.<span class="built_in">outCom</span>() ;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; = &quot;</span>;</span><br><span class="line">res = c1+c2;</span><br><span class="line">res.<span class="built_in">outCom</span>(); </span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1.<span class="built_in">outCom</span>() ;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;operator-&quot;</span>; </span><br><span class="line">c2.<span class="built_in">outCom</span>() ;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; = &quot;</span>;</span><br><span class="line">res = c1-c2;</span><br><span class="line">res.<span class="built_in">outCom</span>(); </span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>(1,2)operator+(3,4) = (4,6)<br>(1,2)operator-(3,4) = (-2,-2)</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h3 id="重载赋值运算符"><a href="#重载赋值运算符" class="headerlink" title="重载赋值运算符"></a>重载赋值运算符</h3><blockquote><p>说明</p><blockquote><p>用于类运算的运算符通常都要重载，但有两个运算符系统提供了<code>默认重载版本</code><br>1)赋值运算符 = ：系统默认重载为<code>对象成员变量复制</code><br>2)地址运算符 &amp; ：系统默认重载为返回任何类对象地址</p></blockquote></blockquote><p>&ensp;&ensp;例：c1与c2都是复数类的对象<br>&ensp;&ensp;&ensp;&ensp;&ensp;c1 = c2 //合法，<code>系统默认的重载赋值运算符</code><br>&ensp;&ensp;&ensp;&ensp;&ensp;c1 = 7  //错误，<code>数据类型不同需要编写相应重载赋值运算符的函数</code></p><blockquote><p>注意</p><blockquote><p>1）赋值运算符必须重载为<code>成员函数</code>，不能重载为<code>友元函数</code>。<br>2）为了保持与通常意义下的复制运算符的功能一致，应该让重载赋值运算符仍然能连续使用，及<code>res =c1  =c2;</code>应成立，所以operator = 函数通常要返回<code>引用</code>，返回类型是myComplex &amp;如下面示例:<br><details class="folding-tag" green><summary> 复数类重载赋值运算符 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myComplex</span>&#123;<span class="comment">//复数类 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">double</span> real,imag;<span class="comment">//复数的实部，虚部</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">myComplex</span>();<span class="comment">//声明构造函数 </span></span><br><span class="line"><span class="built_in">myComplex</span>(<span class="type">double</span> r,<span class="type">double</span> i);</span><br><span class="line">~<span class="built_in">myComplex</span>() &#123;&#125;;<span class="comment">//析构函数 </span></span><br><span class="line"><span class="function">myComplex <span class="title">addCom</span><span class="params">(myComplex c1)</span></span>;<span class="comment">//成员函数，调用对象与参与对象c1 相加 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">outCom</span><span class="params">()</span></span>; <span class="comment">//成员函数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">outCom</span><span class="params">(string s)</span></span>;<span class="comment">//成员函数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">changeReak</span><span class="params">(<span class="type">double</span> r)</span></span>;<span class="comment">//声明成员函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span>  myComplex <span class="keyword">operator</span>+(<span class="type">const</span> myComplex &amp;c1,<span class="type">const</span> myComplex &amp;c2);<span class="comment">// 声明友元函数 ,实现c1+c2</span></span><br><span class="line"><span class="keyword">friend</span>  myComplex <span class="keyword">operator</span>+(<span class="type">const</span> myComplex &amp;c1,<span class="type">double</span> r  );<span class="comment">//c1+r</span></span><br><span class="line"><span class="keyword">friend</span>  myComplex <span class="keyword">operator</span>+(<span class="type">double</span> r ,<span class="type">const</span> myComplex &amp;c1);<span class="comment">//r+c1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span>  myComplex <span class="keyword">operator</span>-(<span class="type">const</span> myComplex &amp;c1,<span class="type">const</span> myComplex &amp;c2);<span class="comment">// 声明友元函数 ,实现c1+c2</span></span><br><span class="line"><span class="keyword">friend</span>  myComplex <span class="keyword">operator</span>-(<span class="type">const</span> myComplex &amp;c1,<span class="type">double</span> r  );<span class="comment">//c1+r</span></span><br><span class="line"><span class="keyword">friend</span>  myComplex <span class="keyword">operator</span>-(<span class="type">double</span> r ,<span class="type">const</span> myComplex &amp;c1);<span class="comment">//r+c1</span></span><br><span class="line"></span><br><span class="line">myComplex &amp;<span class="keyword">operator</span> = (<span class="type">const</span> myComplex &amp;c);<span class="comment">//声明成员函数 </span></span><br><span class="line">myComplex &amp;<span class="keyword">operator</span> = (<span class="type">double</span>);<span class="comment">//声明成员函数 </span></span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line">myComplex::<span class="built_in">myComplex</span>()&#123;<span class="comment">//定义构造函数 </span></span><br><span class="line">real = <span class="number">0</span>; imag = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line">myComplex::<span class="built_in">myComplex</span>(<span class="type">double</span> r,<span class="type">double</span> i)&#123;<span class="comment">//定以构造函数 </span></span><br><span class="line">real = r,imag = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">myComplex <span class="title">myComplex::addCom</span><span class="params">(myComplex c1)</span></span>&#123;<span class="comment">//定以成员函数，调用对象，一个参数 </span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(<span class="keyword">this</span>-&gt;real+c1.real,<span class="keyword">this</span>-&gt;imag+c1.imag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myComplex::outCom</span><span class="params">()</span></span>&#123; <span class="comment">//定义成员函数，输出复数 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;real&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;imag&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myComplex::outCom</span><span class="params">(string s)</span></span>&#123; <span class="comment">//定义成员函数</span></span><br><span class="line">cout&lt;&lt;s&lt;&lt;<span class="string">&quot;=(&quot;</span>&lt;&lt;real&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;imag&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myComplex::changeReak</span><span class="params">(<span class="type">double</span> r)</span></span>&#123; <span class="comment">//定义成员函数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;real = r;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">myComplex <span class="keyword">operator</span>+(<span class="type">const</span> myComplex &amp;c1,<span class="type">const</span> myComplex &amp;c2  )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(c1.real+c2.real,c1.imag+c2.imag); <span class="comment">//c1+c2</span></span><br><span class="line">&#125; </span><br><span class="line">myComplex <span class="keyword">operator</span>+(<span class="type">const</span> myComplex &amp;c1,<span class="type">double</span> r )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(c1.real+r,c1.imag); <span class="comment">//c1+r</span></span><br><span class="line">&#125; </span><br><span class="line">myComplex <span class="keyword">operator</span>+(<span class="type">double</span> r ,<span class="type">const</span> myComplex &amp;c1  )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(r+c1.real,c1.imag); <span class="comment">//r+c2</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myComplex <span class="keyword">operator</span>-(<span class="type">const</span> myComplex &amp;c1,<span class="type">const</span> myComplex &amp;c2  )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(c1.real-c2.real,c1.imag-c2.imag); <span class="comment">//c1-c2</span></span><br><span class="line">&#125; </span><br><span class="line">myComplex <span class="keyword">operator</span>-(<span class="type">const</span> myComplex &amp;c1,<span class="type">double</span> r )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(c1.real-r,c1.imag); <span class="comment">//c1-c2</span></span><br><span class="line">&#125; </span><br><span class="line">myComplex <span class="keyword">operator</span>-(<span class="type">double</span> r ,<span class="type">const</span> myComplex &amp;c1  )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(r-c1.real,c1.imag); <span class="comment">//c1-c2</span></span><br><span class="line">&#125;<span class="comment">//重载友元函数，两个参数返回一个临时对象 </span></span><br><span class="line"></span><br><span class="line">myComplex &amp;myComplex::<span class="keyword">operator</span> = (<span class="type">const</span> myComplex &amp; c1)&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;real=c1.real,<span class="keyword">this</span>-&gt;imag=c1.imag;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;<span class="comment">//赋值运算符重载成员函数 </span></span><br><span class="line"></span><br><span class="line">myComplex &amp;myComplex::<span class="keyword">operator</span> = (<span class="type">double</span> r)&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;real=r,<span class="keyword">this</span>-&gt;imag= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;<span class="comment">//赋值运算符重载成员函数 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">myComplex <span class="title">c1</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span>,<span class="title">c2</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span>,res</span>;</span><br><span class="line"></span><br><span class="line">c1.<span class="built_in">outCom</span>(<span class="string">&quot;\t\t\tc1&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">c2.<span class="built_in">outCom</span>(<span class="string">&quot;\t\t\tc2&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">res = c1+c2; <span class="comment">//调用友元函数，计算  c1+c2</span></span><br><span class="line">res.<span class="built_in">outCom</span>(<span class="string">&quot;执行 res = c1+c2-&gt;\t\t res&quot;</span>); </span><br><span class="line"></span><br><span class="line">res = c1.<span class="built_in">addCom</span>(c2); <span class="comment">//调用友元函数，计算  c1+c2</span></span><br><span class="line">res.<span class="built_in">outCom</span>(<span class="string">&quot;执行 res = c1.addCom(c2)-&gt;\t res&quot;</span>); </span><br><span class="line"></span><br><span class="line">res = c1+<span class="number">5</span>;</span><br><span class="line">res.<span class="built_in">outCom</span>(<span class="string">&quot;执行 res = c1+5;-&gt;\t\t res&quot;</span>);</span><br><span class="line"></span><br><span class="line">res = <span class="number">5</span>+c1;  <span class="comment">//调用成员函数 operator = (const myComplex &amp; c1)</span></span><br><span class="line">res.<span class="built_in">outCom</span>(<span class="string">&quot;执行 res = 5+c1-&gt;\t\t\t res&quot;</span>);</span><br><span class="line"></span><br><span class="line">res = <span class="number">7</span>;  <span class="comment">//调用成员函数 operator = (double r)，没有该函数，出错 </span></span><br><span class="line">res.<span class="built_in">outCom</span>(<span class="string">&quot;执行 res = 7-&gt;\t\t\t res&quot;</span>);</span><br><span class="line"></span><br><span class="line">res = <span class="number">7</span>+<span class="number">8</span>;<span class="comment">//调用成员函数 operator = (double)</span></span><br><span class="line">res.<span class="built_in">outCom</span>(<span class="string">&quot;执行 res = 7+8-&gt;\t\t res&quot;</span>);</span><br><span class="line"></span><br><span class="line">res =c1  =c2;<span class="comment">//两次调用成员函数 operator = (const myComplex &amp; c1)</span></span><br><span class="line">c1.<span class="built_in">outCom</span>(<span class="string">&quot;\t\t\t\tc1&quot;</span>) ;</span><br><span class="line">c2.<span class="built_in">outCom</span>(<span class="string">&quot;\t\t\t\tc2&quot;</span>) ;</span><br><span class="line">res.<span class="built_in">outCom</span>(<span class="string">&quot;执行 res =c1  =c2-&gt;\t\tres&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><pre><code>                             c1=(1,2)                            c2=(3,4)</code></pre><p>执行 res = c1+c2-&gt;               res=(4,6)<br>执行 res = c1.addCom(c2)-&gt;       res=(4,6)<br>执行 res = c1+5;-&gt;               res=(6,2)<br>执行 res = 5+c1-&gt;                res=(6,2)<br>执行 res = 7-&gt;                   res=(7,0)<br>执行 res = 7+8-&gt;                 res=(15,0)<br>                                c1=(3,4)<br>                                c2=(3,4)<br>执行 res =c1  =c2-&gt;             res=(3,4)</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details>  </p></blockquote><p>浅拷贝</p><blockquote><p>同类对象之间可以通过复制运算符“  = ”互相赋值。如果没有重载。“  = ”的作用就是将赋值号右侧的对象一一赋值给左侧的对象。这相当于与值的拷贝，称为值拷贝。<br>如果赋值的对象中涉及<code>指针</code>或<code>引用</code>则他们之间相互关联，对象中的指针指向同一个内存地址。<br><details class="folding-tag" green><summary> 浅拷贝含义 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pointer</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//公有，main函数可以处理成员</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> *p;<span class="comment">//指向整形数的指针 </span></span><br><span class="line"><span class="built_in">pointer</span>()&#123;</span><br><span class="line">a = <span class="number">100</span>; <span class="comment">// 构造函数 </span></span><br><span class="line">p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>); <span class="comment">//创建指针地址空间 并赋初值10 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">pointer</span>(<span class="type">const</span> pointer &amp;tempp) &#123;  <span class="comment">//复制构造哈数 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> != &amp;tempp)&#123;<span class="comment">// 避免a =a这样的赋值 </span></span><br><span class="line">a = tempp.a;  </span><br><span class="line">p = tempp.p;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">pointer p1;<span class="comment">//使用构造函数 </span></span><br><span class="line"><span class="function">pointer <span class="title">p2</span><span class="params">(p1)</span></span>;<span class="comment">//使用复制构造函数 </span></span><br><span class="line">pointer p3 = p1; <span class="comment">//使用复制构造函数 </span></span><br><span class="line"><span class="comment">//*p1.p = 20;</span></span><br><span class="line">p1.a = <span class="number">300</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\n初始化后，各对象的值及内存地址&quot;</span>&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;对象名\t对象地址 a的地址  a的值    p中的值     p指向的值      p的地址&quot;</span> &lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p1:\t&quot;</span>&lt;&lt;&amp;p1&lt;&lt;<span class="string">&quot;,  &quot;</span>&lt;&lt;&amp;p1.a&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;p1.a&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;p1.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;*p1.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;&amp;p1.p&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p2:\t&quot;</span>&lt;&lt;&amp;p2&lt;&lt;<span class="string">&quot;,  &quot;</span>&lt;&lt;&amp;p2.a&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;p2.a&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;p2.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;*p2.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;&amp;p2.p&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p3:\t&quot;</span>&lt;&lt;&amp;p3&lt;&lt;<span class="string">&quot;,  &quot;</span>&lt;&lt;&amp;p3.a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p3.a&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;p3.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;*p3.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;&amp;p3.p&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">初始化后，各对象的值及内存地址</span><br><span class="line">对象名  对象地址    a的地址  a的值    p中的值     p指向的值   p的地址</span><br><span class="line">p1:     <span class="number">0x6ffdf0</span>,  <span class="number">0x6ffdf0</span>  <span class="number">300</span>,   <span class="number">0x1b1530</span>,   <span class="number">10</span>,   <span class="number">0x6ffdf8</span></span><br><span class="line">p2:     <span class="number">0x6ffde0</span>,  <span class="number">0x6ffde0</span>  <span class="number">100</span>,   <span class="number">0x1b1530</span>,   <span class="number">10</span>,   <span class="number">0x6ffde8</span></span><br><span class="line">p3:     <span class="number">0x6ffdd0</span>,  <span class="number">0x6ffdd0</span>  <span class="number">100</span>,   <span class="number">0x1b1530</span>,   <span class="number">10</span>,   <span class="number">0x6ffdd8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details>  </p></blockquote><p>浅拷贝可能出现的问题</p><blockquote><p>1)<code>重复释放同一块空间产生错误</code><br>改变p1对象的值,就会出现浅拷贝问题</p><blockquote><p>如：当对象p1消亡时，需要释放构造函数中new()动态申请空间。而当对象p2消亡时也会释放这个空间，造成重复释放同一块空间，程序出错。</p><p>&ensp; &ensp; &ensp;<code>*p1.p = 20;</code><br>    &ensp; &ensp; &ensp; p1.a = 300;<br> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">初始化后，各对象的值及内存地址</span><br><span class="line">对象名  对象地址    a的地址   a的值    p中的值   p指向的值  p的地址</span><br><span class="line">p1:     <span class="number">0x6ffdf0</span>,   <span class="number">0x6ffdf0</span>  <span class="number">300</span>,   <span class="number">0x181530</span>,   <span class="number">20</span>,   <span class="number">0x6ffdf8</span></span><br><span class="line">p2:     <span class="number">0x6ffde0</span>,  <span class="number">0x6ffde0</span>  <span class="number">100</span>,   <span class="number">0x181530</span>,   <span class="number">20</span>,   <span class="number">0x6ffde8</span></span><br><span class="line">p3:     <span class="number">0x6ffdd0</span>,  <span class="number">0x6ffdd0</span>  <span class="number">100</span>,   <span class="number">0x181530</span>,   <span class="number">20</span>,   <span class="number">0x6ffdd8</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>2)<code>某块内存永远不会被释放而成为内存垃圾</code><br>&ensp; &ensp; &ensp;pointer p4;<br>&ensp; &ensp; &ensp;p4 = p1;<br>创建对p4时，为p4中的成员变量p分配了空间，并符初始值10，执行语句“p4 = p1；”p4中的成员变量p指向了p1中p指针指向的地址，而丢弃了原来指向的地址，这块内存成为内存垃圾。</p></blockquote></blockquote><p>深拷贝</p><blockquote><p>重载赋值运算符后，赋值语句的功能是将一个对象中指针成员变量指向的内容复制到另一个对象中指针成员变量指向的地方，这样的拷贝叫“深拷贝”<br><details class="folding-tag" green><summary> 深拷贝的实现 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pointer</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//公有，main函数可以处理成员</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> *p;<span class="comment">//指向整形数的指针 </span></span><br><span class="line"><span class="built_in">pointer</span>()&#123;</span><br><span class="line">a = <span class="number">100</span>; <span class="comment">// 构造函数 </span></span><br><span class="line">p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>); <span class="comment">//创建指针地址空间 并赋初值10 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">pointer</span>(<span class="type">const</span> pointer &amp;tempp) &#123;  <span class="comment">//复制构造函数 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> != &amp;tempp)&#123;<span class="comment">// 避免a =a这样的赋值 </span></span><br><span class="line">a = tempp.a;  </span><br><span class="line">p = <span class="keyword">new</span> <span class="built_in">int</span>();</span><br><span class="line">*p = *tempp.p;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">pointer</span>()&#123;</span><br><span class="line"><span class="keyword">if</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pointer &amp;<span class="keyword">operator</span> =(<span class="type">const</span> pointer &amp;c)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> == &amp;c)&#123; </span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;p;</span><br><span class="line"><span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="built_in">int</span>(*c.p);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">pointer p1;<span class="comment">//使用构造函数 </span></span><br><span class="line"><span class="function">pointer <span class="title">p2</span><span class="params">(p1)</span></span>;<span class="comment">//使用复制构造函数 </span></span><br><span class="line">pointer p3 ;</span><br><span class="line">p1 = p1;<span class="comment">//赋值重载函数 </span></span><br><span class="line">p3 = p1;<span class="comment">// 赋值重载函数 &amp;operator =(const pointer &amp;c)</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\n初始化后，各对象的值及内存地址&quot;</span>&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;对象名\t对象地址 a的地址  a的值    p中的值     p指向的值      p的地址&quot;</span> &lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p1:\t&quot;</span>&lt;&lt;&amp;p1&lt;&lt;<span class="string">&quot;,  &quot;</span>&lt;&lt;&amp;p1.a&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;p1.a&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;p1.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;*p1.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;&amp;p1.p&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p2:\t&quot;</span>&lt;&lt;&amp;p2&lt;&lt;<span class="string">&quot;,  &quot;</span>&lt;&lt;&amp;p2.a&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;p2.a&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;p2.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;*p2.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;&amp;p2.p&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p3:\t&quot;</span>&lt;&lt;&amp;p3&lt;&lt;<span class="string">&quot;,  &quot;</span>&lt;&lt;&amp;p3.a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p3.a&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;p3.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;*p3.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;&amp;p3.p&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">初始化后，各对象的值及内存地址</span><br><span class="line">对象名  对象地址    a的地址  a的值    p中的值     p指向的值  p的地址</span><br><span class="line">p1:      <span class="number">0x6ffdf0</span>,  <span class="number">0x6ffdf0</span>  <span class="number">100</span>,   <span class="number">0xae1530</span>,   <span class="number">10</span>,   <span class="number">0x6ffdf8</span></span><br><span class="line">p2:     <span class="number">0x6ffde0</span>,  <span class="number">0x6ffde0</span>  <span class="number">100</span>,   <span class="number">0xae1550</span>,   <span class="number">10</span>,   <span class="number">0x6ffde8</span></span><br><span class="line">p3:     <span class="number">0x6ffdd0</span>,  <span class="number">0x6ffdd0</span> <span class="number">100</span>,   <span class="number">0xae1c20</span>,   <span class="number">10</span>,   <span class="number">0x6ffdd8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details>  </p></blockquote></blockquote><h3 id="重载流插入运算符和提取流运算符"><a href="#重载流插入运算符和提取流运算符" class="headerlink" title="重载流插入运算符和提取流运算符"></a>重载流插入运算符和提取流运算符</h3><h3 id="重载自增、自减运算符"><a href="#重载自增、自减运算符" class="headerlink" title="重载自增、自减运算符"></a>重载自增、自减运算符</h3>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记(一)</title>
      <link href="/posts/ad4f1e09.html"/>
      <url>/posts/ad4f1e09.html</url>
      
        <content type="html"><![CDATA[<a href="/posts/ad4f1e09.html" title="🍉C++学习笔记(一)">🍉C++学习笔记(一)</a><a href="/posts/5a8a6c8d.html" title="🍊C++学习笔记(二)">🍊C++学习笔记(二)</a><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>c++是一种编译式的、通用的、大小写敏感的编程语言，完全支持面向对象开发模式</p><h3 id="C-对c语言的增强表现在两个方"><a href="#C-对c语言的增强表现在两个方" class="headerlink" title="C++对c语言的增强表现在两个方"></a>C++对c语言的增强表现在两个方</h3><p> （1）在原来面向过程的机制上法，增加了c语言对类型的处理<br> （2）增加了面向对象机制</p><h3 id="基本输入-输出流"><a href="#基本输入-输出流" class="headerlink" title="基本输入/输出流"></a>基本输入/输出流</h3><p>说明：<br>1）标准输入： cin&gt;&gt;变量1&gt;&gt;变量2&gt;&gt;……&gt;&gt;变量n<br>2）标准输出：cout&lt;&lt;表达式1&lt;&lt;表达式2&lt;&lt;……&lt;&lt;表达式n<br>3) 使用标准出入cin与标准输出cout前，要在程序的最前面包含<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  <span class="comment">//包含头文件：输入输出流</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">//使用命名空间</span></span><br></pre></td></tr></table></figure><br>4）换行操作：用语句cout&lt;&lt; end |;或者cout&lt;&lt;”\n”<br>5)当连续从键盘上读取数据时，以空格、制表符tab键或enter键作为分隔符。<br>6）用户自己定义的数据类型，不能直接使用输入“&gt;&gt;”或输出“&lt;&lt;”，必须对<span class='p red'>输入输出符重载</span><br><details class="folding-tag" orange><summary> 基本输入输出示例 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例 1</button></li><li class="tab"><button type="button" data-href="#示例-2">示例 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot;   &quot;</span>;</span><br><span class="line">cout&lt;&lt; <span class="string">&quot;\n&quot;</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>输出输入10个数字</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details></p><h3 id="头文件和命名空间"><a href="#头文件和命名空间" class="headerlink" title="头文件和命名空间"></a>头文件和命名空间</h3><p>1）头文件</p><div class="table-container"><table><thead><tr><th>常见头文件</th><th>表示</th></tr></thead><tbody><tr><td>标准输入输出流</td><td>iostream</td></tr><tr><td>标准文件流</td><td>fstream</td></tr><tr><td>标准字符串处理函数</td><td>string</td></tr><tr><td>标准数学函数</td><td>cmath</td></tr></tbody></table></div><p>程序员也可以编译自己的文件段，作为头文件反复调用<br>2）命名空间<br>c++中为了避免名字定义冲突，特别引入“命名空间”的作用为了消除同名引起的歧义。在程序中使用标准程序库中的标识符时，要写语句“using namespace std;”.</p><h3 id="强制类型转换符"><a href="#强制类型转换符" class="headerlink" title="强制类型转换符"></a>强制类型转换符</h3><p>当不同类型的量进行混合运算时，系统自动进行合理的类型转换，也可以强制类型转换<br>1）将一种数据类型转换成另一种数据类型<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static_cast</span>&lt;类型名&gt;（表达式）</span><br><span class="line">说明： <span class="keyword">static_cast</span>  可以省略不写</span><br><span class="line">oneint2 = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(oneDouble);</span><br><span class="line">oneint2 = <span class="built_in">int</span>(oneDouble);</span><br><span class="line">oneint2 = (<span class="type">int</span>)oneDouble; <span class="comment">//圆括号</span></span><br><span class="line">oneint2 = oneDouble;  <span class="comment">//自动类型转换</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h3><p>1）c++中，可以在声明函数时为形参制定默认值。调用函数时，从最左侧的参数开始调用<br><details class="folding-tag" orange><summary> 带默认值函数示例 </summary>              <div class='content'>              <div class="tabs" id="示例-结果"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-结果-1">示例 结果 1</button></li><li class="tab"><button type="button" data-href="#示例-结果-2">示例 结果 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-结果-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a = <span class="number">11</span>,<span class="type">int</span> b = <span class="number">22</span>, <span class="type">int</span> c = <span class="number">33</span>)</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt; <span class="string">&quot;b=&quot;</span>&lt;&lt; b &lt;&lt; <span class="string">&quot;c=&quot;</span>&lt;&lt; c &lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line"><span class="built_in">func</span>(<span class="number">55</span>);</span><br><span class="line"><span class="built_in">func</span>(<span class="number">77</span>,<span class="number">99</span>);</span><br><span class="line"><span class="built_in">func</span>(<span class="number">8</span>,<span class="number">88</span>,<span class="number">888</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-结果-2"><p>a=11b=22c=33<br>a=55b=22c=33<br>a=77b=99c=33<br>a=8b=88c=888</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><br>2）c++语言规定，定义函数时，为参数赋值，只能按照从<span class='p red'>后往前</span>的顺序赋值，且在调用是也只省缺后面的连续若干个实参。<br>例子：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfi</span><span class="params">(<span class="type">int</span> a = <span class="number">2</span>,<span class="type">double</span> b = <span class="number">3.0</span>)</span></span>; <span class="comment">//正确</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfi</span><span class="params">(<span class="type">int</span> a ,<span class="type">double</span> b = <span class="number">3.0</span>)</span></span>; <span class="comment">//正确</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfi</span><span class="params">(<span class="type">int</span> a = <span class="number">2</span>,<span class="type">double</span> b)</span></span>; <span class="comment">//错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>3）c++语言规定，在函数的调用处只能省缺后面的<span class='p red'>连续若干个实参</span>，而且所有缺省的实参都<span class='p red'>必须有默认值。</span>。<br>函数调用示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">函数声明： <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a ,<span class="type">int</span> b = <span class="number">2</span>,<span class="type">int</span> c = <span class="number">3</span>)</span></span></span><br><span class="line"><span class="function">函数调用：<span class="title">func</span><span class="params">(<span class="number">1</span>,<span class="number">22</span>，<span class="number">33</span>)</span></span>; <span class="comment">//正确</span></span><br><span class="line">函数调用：<span class="built_in">func</span>(); <span class="comment">//错误</span></span><br><span class="line">函数调用：<span class="built_in">func</span>(<span class="number">10</span>,<span class="number">20</span>); <span class="comment">//正确</span></span><br><span class="line">函数调用：<span class="built_in">func</span>(<span class="number">5</span>,,<span class="number">9</span>); <span class="comment">//错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>4）c++语言规定，在指定默认值是不仅可以使用常数，还可以用任何有定义的<span class='p red'>表达式</span>作为参数默认值<br>函数调用示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> a,b</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y = Max(a,b),<span class="type">int</span> t = a-b)</span></span>&#123;……&#125;</span><br></pre></td></tr></table></figure><br>5）<span class='p red'>函数声明</span>没有函数体，表示有这个函数存在；<span class='p red'>函数定义</span>有函数体，表示函数的具体实现；函数的默认值可以给到其中的一个，但是不能同时都给</p><h3 id="引用和函数参数的传递"><a href="#引用和函数参数的传递" class="headerlink" title="引用和函数参数的传递"></a>引用和函数参数的传递</h3><p><strong> 注意：</strong><br>1、<span class='p red'>对象在引用前必须先初始化</span>，声明中符号“&amp;”的位置无关紧要。<br>2、<span class='p red'>不能通过常引用（const）去修改其引用变量的值</span>。<br>3、<span class='p purple'>const位于符号*的左侧</span>，表示指针<emp>,所指数据</emp>为常量，数据不能通过本指针改变，但可以指向其他内存单元<br>4、<span class='p purple'>const位于符号*的右侧</span>，表示指<emp>,针本身为</emp>常量，数据可以通过本指针改变，也不可以指向其他内存单元<br>4、<span class='p purple'>const位于符号*的左右两侧</span>，表示指<emp>,针本身以及指针所指数据皆为</emp>常量，数据不可以通过本指针改变，也不可以指向其他内存单元<br><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <h4 id="普通引用与常引用"><a href="#普通引用与常引用" class="headerlink" title="普通引用与常引用"></a>普通引用与常引用</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">列：</span><br><span class="line"><span class="comment">//普通引用：</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;a = x ; <span class="comment">// a就是一个普通引用</span></span><br><span class="line"><span class="type">int</span> &amp; a = x ; <span class="comment">//正确</span></span><br><span class="line"><span class="type">int</span> a&amp; = x ;<span class="comment">//正确</span></span><br><span class="line"><span class="comment">//常引用：</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;b = x ; <span class="comment">// b就是一个常引用</span></span><br><span class="line">a = <span class="number">20</span>;  <span class="comment">//则x = 20，b = 20</span></span><br><span class="line">x = <span class="number">30</span>;  <span class="comment">//则a = 30，b = 30</span></span><br><span class="line">b = <span class="number">40</span>;  <span class="comment">//错误</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *pa2 = &amp;a2; <span class="comment">//指针pa2所指的数据是常量  </span></span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> pa2 = &amp;a2; <span class="comment">//指针pa2是常量 ，所指数据为变量 </span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> pa2 = &amp;a2; <span class="comment">//指针pa2与所指的数据都是常量 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="引用在函数中的使用"><a href="#引用在函数中的使用" class="headerlink" title="引用在函数中的使用"></a>引用在函数中的使用</h4><p>两种方式：<span class='p red'>传值与传引用</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 值传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SVal</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">tmp = a; a = b; b = tmp;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;SVal()函数中：\t\ta = &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;,b=&quot;</span>&lt;&lt;b&lt;&lt;endl; </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 引用传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SRef</span><span class="params">(<span class="type">int</span> &amp; a,<span class="type">int</span>  &amp;b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">tmp = a; a = b; b = tmp;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;SRef()函数中：\t\ta = &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;,b=&quot;</span>&lt;&lt;b&lt;&lt;endl; </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>              </div>            </details></p><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><p>对需要频繁调用，且代码量少的函数，可以将其定义为内联函数。<u>编译时，编译程序将整个函数体的代码复制到调用该函数的位置。</u><br><emp>,如果函数体中有循环语句和switch语句通常不定义为内联函数</emp></p><p>可以使用关键字<code>inline</code>将成员函数定义为内联函数。(<em>凡是出现调动该函数的地方，编译程序自动将其装换为该函数的<code>函数体</code>，不再在程序执行时调动该函数，大大提高了效率</em>)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">定义内联函数的格式如下：</span><br><span class="line"><span class="keyword">inline</span>返回值类型函数名（形参表）&#123;</span><br><span class="line">函数体</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数的重载"><a href="#函数的重载" class="headerlink" title="函数的重载"></a>函数的重载</h3><p>为同一个函数定义几个版本<wavy>（参数不同）</wavy>，从而使一个函数名具有多种功能，称为函数重载。<br><details class="folding-tag" orange><summary> 注意事项 </summary>              <div class='content'>              <h4 id="满足下面一个条件便可以重载"><a href="#满足下面一个条件便可以重载" class="headerlink" title="满足下面一个条件便可以重载"></a>满足下面一个条件便可以重载</h4><p>1.参数表中对用参数类型不一样<br>2.参数表中参数个数不同；<br>3.参数表中<span class='p red'>不同类型参数的次序不同</span></p><h4 id="不能重载的情况"><a href="#不能重载的情况" class="headerlink" title="不能重载的情况"></a>不能重载的情况</h4><p>1.两个函数<emp>的名字和参数表都是一样的，仅仅是返回值类型不同</emp>，则这两个函数不是重载<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">add</span><span class="params">(<span class="type">int</span> ,<span class="type">float</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> ,<span class="type">float</span>)</span></span>;  <span class="comment">//错误！</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>2.函数采用<emp>引用</emp>的不能区分函数，则这两个函数不能重载。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">double</span> &amp;)</span></span>; <span class="comment">//不可以重载</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>3.函数调用可能会引发<emp>二义性</emp>，不能采用函数重载。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c=<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;</span><br><span class="line">且函数调用语句为：<span class="built_in">Sum</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">//调用会产生二义性不可重载</span></span><br></pre></td></tr></table></figure><br>4.其他存在赋值兼容的情况</p>              </div>            </details></p><h3 id="指针和动态内存分配"><a href="#指针和动态内存分配" class="headerlink" title="指针和动态内存分配"></a>指针和动态内存分配</h3><p>1.<span class='p red'>指针</span>：即指针变量，该变量存储的是一个地址，是该指针所指对象的首地址。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">100</span>,*pa = &amp;a;</span><br><span class="line"><span class="type">int</span> s[<span class="number">10</span>],ps =s; <span class="comment">//指针ps指向数组s的首地址</span></span><br></pre></td></tr></table></figure><br>2.<span class='p red'>动态分配</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">动态分配内存的一般格式为：</span><br><span class="line">指针名 = <span class="keyword">new</span> 类型名； <span class="comment">//分配</span></span><br><span class="line"><span class="keyword">delete</span> 指针名;   <span class="comment">// 释放</span></span><br><span class="line"></span><br><span class="line">当不再使用这个空间时，必须使用<span class="keyword">delete</span>释放空间。</span><br><span class="line">若使用<span class="keyword">new</span>运算符动态分配一个数组，那么释放该数组时，</span><br><span class="line">语句如下：</span><br><span class="line"><span class="keyword">delete</span> [] 指针</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><details class="folding-tag" orange><summary> 示例 </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> *p;  <span class="comment">//声明double类型指针 </span></span><br><span class="line">p = <span class="keyword">new</span> <span class="type">double</span>[<span class="number">3</span>];   <span class="comment">//分配3个double类型存储空间 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>; i++)   </span><br><span class="line">cin&gt;&gt;*(p+i);    <span class="comment">//将输入数据存储在指定地址中 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;<span class="number">3</span>; j++)</span><br><span class="line">cout&lt;&lt;*(p+j)&lt;&lt;<span class="string">&quot; &quot;</span>;  <span class="comment">//将地址里的内容输出 </span></span><br><span class="line"><span class="keyword">delete</span> []p;  <span class="comment">// 释放空间 </span></span><br><span class="line"></span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>              </div>            </details></p><h3 id="用string对象处理字符串"><a href="#用string对象处理字符串" class="headerlink" title="用string对象处理字符串"></a>用string对象处理字符串</h3><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <p><span class='p red left'>1.说明：</span></p><div class="tip warning"><p>1)使用string对象，必须#include&lt; string.h &gt;头文件</p></div><p>2)string对象存储的是字符串的首地址，并非字符串本身；<del>sizeof(string)在32位的Dev C++中是4，在64位的Dev C++中是8.</del><br><span class='p red left'>2.对象的操作：</span><br>1)string对象，可以使用cin和cout进行输入、输出<br>2)string对象之间可以相互赋值，也可以用字符串常量和字符串数组的名字对string对象进行赋值。<br>3)string对象之间可以比较大小<wavy>按照字典顺序进行大小判定，而且是大小写相关的</wavy><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> b;  <span class="comment">//声明布尔型变量b</span></span><br><span class="line">string s1 = <span class="string">&quot;China&quot;</span>, s2 = <span class="string">&quot;Ok&quot;</span>; </span><br><span class="line">b =s1&gt;s2; <span class="comment">//比较两个字符串首字母大小   变量b的值为0</span></span><br></pre></td></tr></table></figure><br>4)string对象，可以使用“+”运算对字符串进行连接</p><p><span class='p red center'>3.string类中常用的成员函数：</span></p><div class="table-container"><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>const char *c_str()const;</td><td>返回一个指向字符串的指针，用于将string转换为const char*</td></tr><tr><td>int size() const;</td><td>返回当前字符串的大小</td></tr><tr><td>int length() const;</td><td>返回当前字符串的长度</td></tr><tr><td>bool empty() const ;</td><td>判定当前字符串是否为空</td></tr><tr><td>size_type find(const char *str,size_type index);</td><td>返回str在字符串中第一个出现的位置（从index开始查找）如果没有找到返回  -1</td></tr><tr><td>size_type find( char ch,size_type index);</td><td>返回ch在字符串中第一个出现的位置（从index开始查找）如果没有找到返回  -1</td></tr><tr><td>string &amp; insert(int p,const string &amp; s);</td><td>在p位置插入字符串s</td></tr><tr><td>string &amp;append(const string * s);</td><td>将字符串s 连接到当前字符串的结尾处</td></tr><tr><td>string substr(int pos = 0,int n = npos)const;</td><td>返回从pos开始n个字符组成的字符串</td></tr></tbody></table></div><details class="folding-tag" orange><summary> 示例 </summary>              <div class='content'>              <div class="tabs" id="运行"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#运行-1">运行 1</button></li><li class="tab"><button type="button" data-href="#运行-2">运行 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="运行-1"><p>源码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string str;</span><br><span class="line"><span class="keyword">if</span>(str.<span class="built_in">empty</span>())</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;str is NULL.&quot;</span>&lt;&lt;<span class="string">&quot;,length=&quot;</span>&lt;&lt;str.<span class="built_in">length</span>()&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt; <span class="string">&quot;str is not NULL.&quot;</span>&lt;&lt;endl;</span><br><span class="line">str = str.<span class="built_in">append</span>(<span class="string">&quot;abcdefg&quot;</span>);  <span class="comment">//将字符串连接到当前字符串的结尾 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;str is&quot;</span>&lt;&lt;str&lt;&lt;<span class="string">&quot;,size = &quot;</span>&lt;&lt;str.<span class="built_in">size</span>()&lt;&lt;str.<span class="built_in">length</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;length&quot;</span>&lt;&lt;str.<span class="built_in">length</span>()&lt;&lt;endl;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*p = str.<span class="built_in">c_str</span>();  <span class="comment">//p指向字符串str</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p = &quot;</span>&lt;&lt;p&lt;&lt;endl;  <span class="comment">//输出abcdefg</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;find:&quot;</span>&lt;&lt;str.<span class="built_in">find</span>(<span class="string">&quot;de&quot;</span>,<span class="number">0</span>)&lt;&lt;endl; <span class="comment">//从str的第0查找字符串“de”,成功返回3</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;find:&quot;</span>&lt;&lt;str.<span class="built_in">find</span>(<span class="string">&quot;de&quot;</span>,<span class="number">4</span>)&lt;&lt;endl; <span class="comment">//从str的第4查找字符串“de”,查找失败返回-1对应的无符号数 </span></span><br><span class="line">string str1 = str.<span class="built_in">insert</span>(<span class="number">4</span>,<span class="string">&quot;123&quot;</span>); <span class="comment">//重str的第4个位置插入“123”</span></span><br><span class="line">cout&lt;&lt;str1&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="运行-2"><p>结果：<br>str is NULL.,length=0<br>str isabcdefg,size = 77<br>length7<br>p = abcdefg<br>find:3<br>find:18446744073709551615<br>abcd123efg</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details>              </div>            </details><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="结构化程序设计"><a href="#结构化程序设计" class="headerlink" title="结构化程序设计"></a>结构化程序设计</h3><p>结构化程序设计的<span class='p red'>基本方法</span>：采用自顶向下、逐步求精模块化的思想，将复杂的大问题层层分解为许多简单的小问题。<br>结构化程序设计的<span class='p red'>三种基本结构</span>：顺序结构、选择结构、循环结构。<br>结构化程序设计的<span class='p red'>基本思想</span>：<emp>数据结构 + 算法 = 程序</emp><br>结构化程序设计的<span class='p red'>缺点</span>：难以理解，难以扩充、难以纠错</p><h3 id="面向对象的设计的概念和特点"><a href="#面向对象的设计的概念和特点" class="headerlink" title="面向对象的设计的概念和特点"></a>面向对象的设计的概念和特点</h3><p>1、概念<br>面向对象技术将问题看成<emp>对象</emp>的集合。对象具有两个特性：1）对象本身的信息，也称为<emp>属性</emp>；2）对象的操作，也称为<emp>属行为</emp><br><span class='p red'>对象 = 数据（属性） + 函数（行为）</span><br><span class='p red'>类</span>是对象的一个抽象、对象是类的实例化<br>2、特点（<u>抽象、封装、继承和多态</u>）<br>1)<span class='p red'>抽象</span>：将同一类事物的共同特征概括出来，这个过程叫做“抽象”。<br><span class='p red'>类</span>：是对现实世界中客观事物的抽象。对于一个具体的类它有许多具体的个体，这些个体叫做<span class='p red'>对象</span>。<br><span class='p red'>对象</span>：是系统中用来描述客观事物的一个实体，用<span class='p red'>对象名</span>、<span class='p red'>属性</span><span class='p red'>操作</span>三要素来描述对象。<br>2)<span class='p red'>封装</span>：就是把对象的属性和操作封装结合成一个独立的单元。<br><span class='p red'>封装的作用</span>：数据和操作数据的函数紧密联系起来；将对象的一部分属性和函数隐藏起来，对外不可见，起保护作用；另一部分函数对外可见，作为对象进行操作的接口。<br>3)<span class='p red'>继承</span>：在编写一个新类的时候以现有的类作为基础，使得到的新类从现有的类“派生”而来，从而<span class='p red'>达到代码扩充和代码复用作用</span>。<br><details class="folding-tag" orange><summary> 考点 </summary>              <div class='content'>              <div class="tabs" id="类型"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#类型-1">选择题</button></li><li class="tab"><button type="button" data-href="#类型-2">填空题：</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="类型-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="类型-2"><p>1.两种继承：<code>单一继承</code> 与 <code>多重继承</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><br>4)<span class='p red'>多态</span>：不同的对象可以调用相同名称的函数，但可导致完全不同的行为的现象称为。<span class='p red'>多态性。</span>利用多态性，程序中只需要进行一般形式的函数调用，函数的实现细节留给接收函数调用的对象，这<span class='p red'>大大提高了人们解决复杂问题的能力。</span><br><details class="folding-tag" orange><summary> 考点 </summary>              <div class='content'>              <div class="tabs" id="类型"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#类型-1">选择题</button></li><li class="tab"><button type="button" data-href="#类型-2">填空题：</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="类型-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="类型-2"><p>1.C++支持<code>编译</code>时的多态与<code>运行</code>时多态</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details></p><h3 id="类的初步认识"><a href="#类的初步认识" class="headerlink" title="类的初步认识"></a>类的初步认识</h3><ol><li>类的基本概念<br><span class='p red'>类</span>：是具有相同属性和操作的一组对象的集合，它为属于该类的 全部对象提供了统一的抽象描述，其内部包括<span class='p red'>数据变量</span>和<span class='p red'>成员函数</span>两个主要部分。<br><span class='p red'>类</span>是一种用户自己构造的数据类型，<br><span class='p red'>类</span>要先声明后使用、是具有唯一标识的实体。</li><li>C++语言中常用的数据类型有<code>整型、实型、字符型</code>（这3种类型也被称之为简单数<br>据类型）、数组类型、布尔类型、枚举类型、结构体类型、公用体类型、指针类型、引用类<a href="https://www.cnblogs.com/qinqin-me/p/9568824.html">参考链接</a></li></ol><p>型等。</p><div class="table-container"><table><thead><tr><th>访问级别</th><th>访问控制修饰符</th><th>同类</th><th>派生类</th><th>外部类</th></tr></thead><tbody><tr><td>公开</td><td>public</td><td>√</td><td>√</td><td>√</td></tr><tr><td>受保护</td><td>protected</td><td>√</td><td>√</td><td>×</td></tr><tr><td>默认</td><td>private</td><td>√</td><td>×</td><td>×</td></tr><tr><td>私有</td><td>private</td><td>√</td><td>×</td><td>×</td></tr></tbody></table></div><details class="folding-tag" orange><summary> 访问修饰符示例 </summary>              <div class='content'>              <div class="tabs" id="访问修饰符"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#访问修饰符-1">源码</button></li><li class="tab"><button type="button" data-href="#访问修饰符-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="访问修饰符-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">double</span> length;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setWidth</span><span class="params">(<span class="type">double</span> wid)</span> </span>;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getWidth</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">double</span> width;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类体外定义成员函数 </span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Box::getWidth</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Box::setWidth</span><span class="params">(<span class="type">double</span> wid)</span></span>&#123;</span><br><span class="line">width = wid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Box box;</span><br><span class="line">box.length = <span class="number">10.0</span>; <span class="comment">//访问public成员变量 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Length of box:&quot;</span>&lt;&lt;box.length&lt;&lt;endl;  <span class="comment">//输出box.length</span></span><br><span class="line"><span class="comment">//box.width;// `错误` 此处不能调用private成员变量</span></span><br><span class="line">box.<span class="built_in">setWidth</span>(<span class="number">10.3</span>);<span class="comment">//必须使用成员函数设定的宽度</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Width of box:&quot;</span>&lt;&lt;box.<span class="built_in">getWidth</span>()&lt;&lt;endl;  <span class="comment">//输出Width of box : 10</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="访问修饰符-2"><p>Length of box:10<br>Width of box:10.3<br><code>使用private的好处：</code>1)有利于程序修改2)可以避免对象的不正确操作</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><span class='p red center small'>注意： 1）不能在类的声明中对数据变量进行初始化2）类中声明任何成员变量不能使用</span><span class='nota' data-nota='存储类型'>extern、auto、register</span>关键字修饰；3）可以是空类;<span class='p red'></span><h3 id="类的示例剖析"><a href="#类的示例剖析" class="headerlink" title="类的示例剖析"></a>类的示例剖析</h3><span class='p red'>注意：</span><p>1、在c++中string关键字全小写，在java中String首字母大写<br>2、类名myClass，方法名myFunctiond都使用小驼峰表示，变流量使用全拼小写，常量使用大驼峰表示<br>3、在类中提前声明方法，在类外书写方法体，更清晰易渎，在类体外定义成员函数时使用<emp>::</emp><br><details class="folding-tag" orange><summary> 程序结构 </summary>              <div class='content'>              <div class="tabs" id="类的示例剖析"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#类的示例剖析-1">代码</button></li><li class="tab"><button type="button" data-href="#类的示例剖析-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="类的示例剖析-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myDate</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">myDate</span>();        <span class="comment">//构造函数 </span></span><br><span class="line"><span class="built_in">myDate</span>(<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>);    <span class="comment">//带参数的构造函数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setDate</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>)</span></span>;   <span class="comment">//设置 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setDate</span><span class="params">(myDate)</span></span>;  <span class="comment">//设置 </span></span><br><span class="line"><span class="function">myDate <span class="title">getDate</span><span class="params">()</span></span>;  <span class="comment">//获取 日期 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setYrar</span><span class="params">()</span></span>;   <span class="comment">//设置 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getMonth</span><span class="params">()</span></span>;     <span class="comment">//获取</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printDate</span><span class="params">()</span> <span class="type">const</span></span>;  <span class="comment">//打印日期 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> year,month,day;</span><br><span class="line">&#125;;</span><br><span class="line">myDate::<span class="built_in">myDate</span>()&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =<span class="number">1970</span>,month = <span class="number">1</span>,day = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">myDate::<span class="built_in">myDate</span>(<span class="type">int</span> y,<span class="type">int</span> m,<span class="type">int</span> d)&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =y,month =m,day = d;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">myDate::setDate</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> m ,<span class="type">int</span> d)</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =y,month =m,day = d;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myDate::setDate</span><span class="params">(myDate oneD)</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =oneD.year =oneD.month,day = oneD.day;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> <span class="function">myDate <span class="title">myDate::getDate</span><span class="params">()</span></span>&#123;    <span class="comment">// 获取日期 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">myDate::getMonth</span><span class="params">()</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line"><span class="keyword">return</span> month;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myDate::printDate</span><span class="params">()</span> <span class="type">const</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">cout&lt;&lt;year&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;month&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;day;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setStudent</span><span class="params">(string,myDate)</span></span>; <span class="comment">// 设置学生信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string)</span></span>; <span class="comment">// 设置学生姓名</span></span><br><span class="line"><span class="function">string <span class="title">getName</span><span class="params">()</span></span>; <span class="comment">// 获取学生姓名</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setBirthday</span><span class="params">(myDate)</span></span>; <span class="comment">// 设置学生生日 </span></span><br><span class="line"><span class="function">myDate <span class="title">getBirthday</span><span class="params">()</span></span>; <span class="comment">// 获取学生生日</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent</span><span class="params">()</span> <span class="type">const</span></span>; <span class="comment">// 设置学生生日 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line">myDate birthday;</span><br><span class="line"> </span><br><span class="line">&#125; ;<span class="comment">//string 系统定义好的类，myDate前面定义好的类 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setStudent</span><span class="params">(string s,myDate d)</span> </span>&#123;  <span class="comment">// 设置学生信息</span></span><br><span class="line">name = s;</span><br><span class="line">birthday.<span class="built_in">setDate</span>(d);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setName</span><span class="params">(string n )</span></span>&#123;  <span class="comment">// 设置学生姓名</span></span><br><span class="line">name = n;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Student::getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setBirthday</span><span class="params">(myDate d)</span></span>&#123;</span><br><span class="line">birthday.<span class="built_in">setDate</span>(d);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">// 设置学生生日 </span></span><br><span class="line"><span class="function">myDate <span class="title">Student::getBirthday</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> birthday;</span><br><span class="line">&#125;; <span class="comment">// 获取学生生日</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::printStudent</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;姓名&quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;生日&quot;</span>; </span><br><span class="line">birthday.<span class="built_in">printDate</span>();<span class="comment">//调用myDate的成员函数</span></span><br><span class="line">cout&lt;&lt;endl; </span><br><span class="line">&#125;; <span class="comment">// 设置学生生日 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Student ss;</span><br><span class="line"><span class="type">int</span> y,m,d;</span><br><span class="line">    string name_;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入学生的姓名生日，生日以年月日的次序输入；&quot;</span>;</span><br><span class="line">cin&gt;&gt;name_&gt;&gt;y&gt;&gt;m&gt;&gt;d;</span><br><span class="line">ss.<span class="built_in">setStudent</span>(name_,<span class="built_in">myDate</span>(y,m,d));<span class="comment">//调用成员函数</span></span><br><span class="line">ss.<span class="built_in">printStudent</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="类的示例剖析-2"><p>请输入学生的姓名生日，生日以年月日的次序输入；小明 2000 3 14<br>姓名小明生日3/1/14</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><br><details class="folding-tag" orange><summary> 使用引用方式驱动程序 </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Student ss;</span><br><span class="line"><span class="type">int</span> y,m,d;</span><br><span class="line">    string name_;</span><br><span class="line">    Student &amp;sy = ss; <span class="comment">//对象的引用 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入学生的姓名生日，生日以年月日的次序输入；&quot;</span>;</span><br><span class="line">cin&gt;&gt;name_&gt;&gt;y&gt;&gt;m&gt;&gt;d;</span><br><span class="line">sy.<span class="built_in">setStudent</span>(name_,<span class="built_in">myDate</span>(y,m,d));<span class="comment">//调用成员函数</span></span><br><span class="line">sy.<span class="built_in">printStudent</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details></p><h3 id="标识符的作用域"><a href="#标识符的作用域" class="headerlink" title="标识符的作用域"></a>标识符的作用域</h3><p>1.<span class='p red'>函数原型作用域：</span>在声明函数原型时形参的作用范围就是函数原型的作用域，也是c++中最小的作用域。<br><span class='p red center large'>例：double area(double r)</span><br><span class='p center'>r 的作用范围就在函数area形参列表的左右括号之间。</span><br>2.<span class='p red'>局部作用域：</span>只在程序块内有效。<br>3.<span class='p red'>类作用域：</span>在类X成员函数中可以直接使用成员m;在类外通过x.m、<code>X::m</code>或者ptr-&gt;m ,ptr为指向该类的指针。<br>4.<span class='p red'>命名空间的作用域：</span>用于消除各大模块之间同名引起的歧义。<u>在命名空间内部可以直接引用当前命名空间中声明的标识符，如需要引用其他空间命名的标识符使用以下格式：</u><br> <span class='p red center'>命名空间::标识符</span></p><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>1.<span class='p red'>使用构造函数创建指针</span>：myDate *pd = new myDate();使用<span class='p red'>new创建对象</span>,下面两种都是合法的：<br><span class='p center smaller'>myDate *pd = new myDate()</span><br><span class='p center smaller'>myDate *pd = new myDate</span><br>1）<span class='p red'></span>用户定义了构造函数，都会调用构造函数进行初始化。<br>2）<span class='p red'></span>用户未定义构造函数，<emp>对带括号的情况</emp>，系统在成员变量分配内存的同时，将其初始化为0; <emp>不加括时</emp>，系统只为成员变量分配内存空间，成员变量的分配空间是<wavy>随机值</wavy><br>2.<span class='p red'>复制构造函数</span>：<br>1）使用一个已存在的对象去初始化另一个正在创建的对象<br>2）复制构造函数的原型为：<br>类名::类名(类名<code>&amp;</code>)  // <code>对象的引用作为形参</code><br><span class='p center'>或类名::类名(`const`类名` &`) //为了不改变原型对象，使用`const限制`</span><br><details class="folding-tag" orange><summary> 复制构造函数示例 </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Student</span>();  <span class="comment">//在类中声明构造函数的</span></span><br><span class="line"><span class="built_in">Student</span>(<span class="type">const</span> Student &amp;s);  <span class="comment">//在类中声明复制构造函数的原型</span></span><br><span class="line"></span><br><span class="line">Student:: <span class="built_in">Student</span>(<span class="type">const</span> Student &amp;s)&#123;<span class="comment">//复制构造函数的函数体</span></span><br><span class="line">name = <span class="string">&quot;copy&quot;</span>+s.name;</span><br><span class="line">birthday = s.birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Student stud;<span class="comment">//定义对象stud,并调用构造函数</span></span><br><span class="line"> <span class="function">Student <span class="title">stud2</span><span class="params">(stud)</span></span>; <span class="comment">//定义对象stud2并调用复制构造函数初始化</span></span><br><span class="line"> Student ss[<span class="number">3</span>]&#123;<span class="built_in">Student</span>(),stud,<span class="built_in">Student</span>(stu)&#125;&#125;; <span class="comment">//ss[0]调用构造函数，ss[1]与ss[2]调用复制构造函数初始化</span></span><br></pre></td></tr></table></figure>              </div>            </details></p><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><h4 id="在对象消失时，释放由构造函数分配的内存"><a href="#在对象消失时，释放由构造函数分配的内存" class="headerlink" title="在对象消失时，释放由构造函数分配的内存"></a><span class='p red'>作用：</span>在对象消失时，释放由构造函数分配的内存</h4><p>在类体中的声明形式：<code>~类名（）</code>;<br>定义形式：<code>类名::~类名（）&#123; &#125;</code><br><span class='p red'>注意：</span></p><ol><li>在<code>类</code>中只能定义<code>一个析构函数</code>且不能指定<code>参数</code>，并对象生存周期结束时，系统自定调用。</li><li>系统会自动生成空的析构函数,使用<code>new运算符</code>动态分配了内存空间，则在析构函数中应该使用<code>delete</code>释放掉这部分空间。</li><li>系统会按照<code>后创建先析构</code>的顺序，可以使用delete调用析构函数改变顺序。</li></ol><details class="folding-tag" orange><summary> 析构造函数示例 </summary>              <div class='content'>              <!-- tab  源码--><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myDate</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">myDate</span>();        <span class="comment">//构造函数 </span></span><br><span class="line">~<span class="built_in">myDate</span>();  <span class="comment">//析构函数 </span></span><br><span class="line"><span class="built_in">myDate</span>(<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>);    <span class="comment">//带参数的构造函数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setDate</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>)</span></span>;   <span class="comment">//设置 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setDate</span><span class="params">(myDate)</span></span>;  <span class="comment">//设置 </span></span><br><span class="line"><span class="function">myDate <span class="title">getDate</span><span class="params">()</span></span>;  <span class="comment">//获取 日期 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setYrar</span><span class="params">()</span></span>;   <span class="comment">//设置 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getMonth</span><span class="params">()</span></span>;     <span class="comment">//获取</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printDate</span><span class="params">()</span> <span class="type">const</span></span>;  <span class="comment">//打印日期 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> year,month,day;</span><br><span class="line">&#125;;</span><br><span class="line">myDate::<span class="built_in">myDate</span>()&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =<span class="number">1970</span>,month = <span class="number">1</span>,day = <span class="number">1</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;myDate构造函数1 &quot;</span>&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">myDate::~<span class="built_in">myDate</span>()&#123;    <span class="comment">// 析构函数 </span></span><br><span class="line"> </span><br><span class="line">cout&lt;&lt;<span class="string">&quot;myDate析构函数1 &quot;</span>&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">myDate::<span class="built_in">myDate</span>(<span class="type">int</span> y,<span class="type">int</span> m,<span class="type">int</span> d)&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =y,month =m,day = d;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">myDate::setDate</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> m ,<span class="type">int</span> d)</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =y,month =m,day = d;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myDate::setDate</span><span class="params">(myDate oneD)</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =oneD.year =oneD.month,day = oneD.day;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> <span class="function">myDate <span class="title">myDate::getDate</span><span class="params">()</span></span>&#123;    <span class="comment">// 获取日期 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">myDate::getMonth</span><span class="params">()</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line"><span class="keyword">return</span> month;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myDate::printDate</span><span class="params">()</span> <span class="type">const</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">cout&lt;&lt;year&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;month&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;day;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>();</span><br><span class="line">~<span class="built_in">Student</span>();</span><br><span class="line"><span class="built_in">Student</span>(<span class="type">const</span> Student &amp;s);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setStudent</span><span class="params">(string,myDate)</span></span>; <span class="comment">// 设置学生信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string)</span></span>; <span class="comment">// 设置学生姓名</span></span><br><span class="line"><span class="function">string <span class="title">getName</span><span class="params">()</span></span>; <span class="comment">// 获取学生姓名</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setBirthday</span><span class="params">(myDate)</span></span>; <span class="comment">// 设置学生生日 </span></span><br><span class="line"><span class="function">myDate <span class="title">getBirthday</span><span class="params">()</span></span>; <span class="comment">// 获取学生生日</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent</span><span class="params">()</span> <span class="type">const</span></span>; <span class="comment">// 设置学生生日 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line">myDate birthday;</span><br><span class="line"> </span><br><span class="line">&#125; ;<span class="comment">//string 系统定义好的类，myDate前面定义好的类 </span></span><br><span class="line">Student::<span class="built_in">Student</span>():<span class="built_in">name</span>(<span class="string">&quot;Noname&quot;</span>),<span class="built_in">birthday</span>(<span class="built_in">myDate</span>())&#123;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Student构造函数2 &quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Student::~<span class="built_in">Student</span>()&#123;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Student析构函数2 &quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="type">const</span> Student &amp;s)&#123;</span><br><span class="line">name = <span class="string">&quot;copy&quot;</span> + s.name; </span><br><span class="line">birthday = s.birthday;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Student复制构造函数2 &quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setStudent</span><span class="params">(string s,myDate d)</span> </span>&#123;  <span class="comment">// 设置学生信息</span></span><br><span class="line">name = s;</span><br><span class="line">birthday.<span class="built_in">setDate</span>(d);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setName</span><span class="params">(string n )</span></span>&#123;  <span class="comment">// 设置学生姓名</span></span><br><span class="line">name = n;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Student::getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setBirthday</span><span class="params">(myDate d)</span></span>&#123;</span><br><span class="line">birthday.<span class="built_in">setDate</span>(d);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">// 设置学生生日 </span></span><br><span class="line"></span><br><span class="line"><span class="function">myDate <span class="title">Student::getBirthday</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> birthday;</span><br><span class="line">&#125;; <span class="comment">// 获取学生生日</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::printStudent</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;姓名  &quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;  生日&quot;</span>; </span><br><span class="line">birthday.<span class="built_in">printDate</span>();<span class="comment">//调用myDate的成员函数</span></span><br><span class="line">cout&lt;&lt;endl; </span><br><span class="line">&#125;; <span class="comment">// 设置学生生日 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Student stud;</span><br><span class="line">stud.<span class="built_in">printStudent</span>(); <span class="comment">//输出默认值 </span></span><br><span class="line">Student sy[<span class="number">2</span>] = &#123;<span class="built_in">Student</span>(),stud&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">sy[i].<span class="built_in">printStudent</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><!-- endtab --><!-- tab 运行结果--><p>myDate构造函数1<br>Student构造函数2<br>姓名  Noname  生日1970/1/1<br>myDate构造函数1<br>Student构造函数2<br>myDate构造函数1<br>Student复制构造函数2<br>姓名  Noname  生日1970/1/1<br>姓名  copyNoname  生日1970/1/1<br>Student析构函数2<br>myDate析构函数1<br>Student析构函数2<br>myDate析构函数1<br>Student析构函数2<br>myDate析构函数1<br><!-- endtab --></p>              </div>            </details><p><code>注意：</code><br>在构造函数中初始化对象的变量：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student::<span class="built_in">Student</span>():<span class="built_in">name</span>(<span class="string">&quot;Noname&quot;</span>),<span class="built_in">birthday</span>(<span class="built_in">myDate</span>())&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h3><ol><li><span class='p red'>静态全局变量：</span>static修饰的、在所有花括号之外声明的变量，<code>其作用范围全局可见，整个项目内有效</code></li><li><span class='p red'>静态局部变量：</span>static修饰的、在块内定义的，<code>其作用范围从定义之处开始到本块结束为止</code></li><li>静态变量均存储在全局数据区，只初始化一次，如果未初始化系默认初始为0；</li><li>类的静态成员有两种：静态成员变量与静态成员函数，</li><li><code>静态成员变量不能在类体内赋值，应该在类外进行初始化</code>，给静态成员变量赋初始值格式如下：<br>类型  类名:: 静态成员变量 = 初值;//<code>不能有static</code></li><li>在类体外定义成员函数时，前面不能加<code>static</code></li><li>类的静态成员，被类的所有对象<code>共享</code><h4 id=""><a href="#" class="headerlink" title=""></a><span class='p orange'>注意：</span></h4>静态成员函数<code>不可以调用非静态成员</code></li></ol><blockquote><p>访问静态成员的一般格式：</p><blockquote><blockquote><p>类名:: 静态成员名<br>对象名 · 静态成员名<br>对象指针-&gt;静态成员名  </p></blockquote></blockquote><p>静态成员函数与一般成员函数的不同</p><blockquote><p>1)可以不指向某个具体对象，只与类名连用<br>2)在没有建立对向前，静态成员就已经存在；<br>3)静态成员是类的成员，不是对象的成员；<br>4)静态成员为该类的所有对象共享，他们被存储在一个公共区域<br>5) <code>没有this指着</code>，只能通过对象名或指向对象的指针访问类的数据成员<br>6)静态成员函数<code>不能被说明为虚函数</code><br>7)静态成员函数<code>不能直接访问非静态函数</code></p></blockquote></blockquote><details class="folding-tag" green><summary> 静态成员变量示例 </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="type">static</span> <span class="type">int</span> glos = <span class="number">100</span>;<span class="comment">//静态全局变量 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>; <span class="comment">// 局部自动变量 </span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> fs = <span class="number">1</span>;<span class="comment">// 静态局部变量 fs, 完成初始化</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;在f中：a（自动） = &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;  fs(静态) = &quot;</span>&lt;&lt;fs&lt;&lt;<span class="string">&quot;  glos(静态) = &quot;</span>&lt;&lt;glos&lt;&lt;endl;</span><br><span class="line">a +=<span class="number">2</span>;fs += <span class="number">2</span>;glos +=<span class="number">10</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;在f中：a（自动） = &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;  fs(静态) = &quot;</span>&lt;&lt;fs&lt;&lt;<span class="string">&quot;  glos(静态) = &quot;</span>&lt;&lt;glos&lt;&lt;endl; </span><br><span class="line"><span class="comment">//cout &lt;&lt;&quot;ms = &quot;&lt;&lt; ms&lt;&lt;endl;该航错误，变量ms不可见 </span></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> ms =<span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt;=<span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;ms = &quot;</span>&lt;&lt; ms&lt;&lt;endl; <span class="comment">//输出10 </span></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;glos = &quot;</span>&lt;&lt;glos&lt;&lt;endl;<span class="comment">//输出130 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;nihao&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 静态成员函数示例 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">classA</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">double</span> x,y;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> num;<span class="comment">//类的共有静态成员变量，供所有对象共享；  </span></span><br><span class="line"><span class="comment">//此处用于记录 通过构造函数已生成的对象个数</span></span><br><span class="line"><span class="built_in">classA</span>()&#123;  <span class="comment">//构造函数 </span></span><br><span class="line">x = <span class="number">0</span>; y = <span class="number">0</span>;</span><br><span class="line">num++;<span class="comment">//每生成一个对象，num加 1 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">classA</span>(<span class="type">double</span> x0,<span class="type">double</span> y0)&#123;  <span class="comment">//构造函数 </span></span><br><span class="line">x = x0; y = y0;</span><br><span class="line">num++;<span class="comment">//每生成一个对象，num加 1 </span></span><br><span class="line">   &#125; </span><br><span class="line">   <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">staticFun</span><span class="params">()</span></span>&#123;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;调用静态函数current_num = &quot;</span>&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">   <span class="comment">//cout&lt;&lt;&quot;x = &quot;&lt;&lt;x&lt;&lt;endl;  </span></span><br><span class="line"> <span class="comment">//错误，在静态函数中不能访问非静态变量。 </span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="type">int</span> classA ::num = <span class="number">0</span>; <span class="comment">//必须在类体外初始化静态成员变量 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">classA <span class="title">obj</span><span class="params">(<span class="number">1.2</span>,<span class="number">3.4</span>)</span>,*p</span>;  <span class="comment">//调用以构造函数</span></span><br><span class="line"><span class="comment">//第一次调用 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;classA::num = &quot;</span>&lt;&lt;classA::num &lt;&lt;endl; <span class="comment">//使用类名做限定符</span></span><br><span class="line">classA::<span class="built_in">staticFun</span>() ;<span class="comment">//调用函数</span></span><br><span class="line"><span class="comment">//第二次调用 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;obj.num &quot;</span>&lt;&lt;obj.num&lt;&lt;endl; <span class="comment">//使用对象名做限定符</span></span><br><span class="line">obj.<span class="built_in">staticFun</span>();</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">classA A[<span class="number">3</span>]; <span class="comment">//调用三次构造函数</span></span><br><span class="line"><span class="comment">//调用后结果 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;classA::num = &quot;</span>&lt;&lt;classA::num&lt;&lt;endl;</span><br><span class="line">classA::<span class="built_in">staticFun</span>() ;<span class="comment">//调用函数</span></span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">p = <span class="keyword">new</span> <span class="built_in">classA</span>(<span class="number">5.6</span>,<span class="number">7.8</span>) ;<span class="comment">//调用一次构造函数</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;classA::num &quot;</span>&lt;&lt;classA::num &lt;&lt;endl;</span><br><span class="line">classA::<span class="built_in">staticFun</span>() ;<span class="comment">//调用函数</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p-&gt;num &quot;</span>&lt;&lt;p-&gt;num &lt;&lt;endl;</span><br><span class="line">p-&gt;<span class="built_in">staticFun</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>classA::num = 1<br>调用静态函数current_num = 1<br>obj.num 1<br>调用静态函数current_num = 1</p><p>classA::num = 4<br>调用静态函数current_num = 4</p><p>classA::num 5<br>调用静态函数current_num = 5<br>p-&gt;num 5<br>调用静态函数current_num = 5</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h3 id="变量及对象的生存期和作用域"><a href="#变量及对象的生存期和作用域" class="headerlink" title="变量及对象的生存期和作用域"></a>变量及对象的生存期和作用域</h3><p>生存期：是指所占据内存空间由分配到释放的时期。<br>作用域：仅仅在定义的代码块内有效。</p><h3 id="常量成员和常量引用成员"><a href="#常量成员和常量引用成员" class="headerlink" title="常量成员和常量引用成员"></a>常量成员和常量引用成员</h3><p>1、 类的常量成员变量  </p><blockquote><p>定义<code>类的常量成员</code>变量的一般格式：</p><blockquote><p>const  数据不类型  <code>类常量成员变量</code> =  表达式  </p></blockquote><p><code>类常量成员变量</code>必须进行初始化，而且只能通过构造函数的成员初始化列表方式进行。  </p></blockquote><p>2、 类的常量对象</p><blockquote><p>类的常量对象必须在<code>声明的同时进行初始化，而且不能被更新。</code>定义常量对象的格式：</p><blockquote><p>const 类名 对象名（参数表）;或<br>类名 const 对象名（参数表）;</p></blockquote></blockquote><p>例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">myDate <span class="type">const</span> <span class="title">al</span><span class="params">(<span class="number">1997</span>,<span class="number">12</span>,<span class="number">20</span>)</span></span>; <span class="comment">//定义myDate类常量对象al 并初始化</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>常量对象</code>只能调用<code>常量成员函数</code>不能调用非常量成员函数，不同对象可以调用所有成员你函数<br><details class="folding-tag" green><summary> 常量成员函数与普通成员函数 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sample</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Sample</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getVlue</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//常量成员函数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getVlue</span><span class="params">()</span> </span>;<span class="comment">//非常量成员函数 （同名） </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">priVlue</span><span class="params">()</span> </span>;<span class="comment">//非常量成员函数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">priVcon</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//常量成员函数 </span></span><br><span class="line">&#125;;</span><br><span class="line">Sample::<span class="built_in">Sample</span>() &#123;&#125;;<span class="comment">//构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sample::getVlue</span><span class="params">()</span> <span class="type">const</span> <span class="comment">//常量成员函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;常量成员函数&quot;</span> &lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sample::getVlue</span><span class="params">()</span>  <span class="comment">//非常量成员函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;非常量成员函数&quot;</span> &lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sample::priVlue</span><span class="params">()</span>  <span class="comment">//非常量成员函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;非常量成员函数priVlue()&quot;</span> &lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sample::priVcon</span><span class="params">()</span> <span class="type">const</span> <span class="comment">//常量成员函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;常量成员函数priVcon()&quot;</span> &lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Sample o;</span><br><span class="line"><span class="type">const</span> Sample cono; </span><br><span class="line">cout&lt;&lt;<span class="string">&quot;cono\t&quot;</span>;</span><br><span class="line">cono.<span class="built_in">getVlue</span>();<span class="comment">//通过常量对象只能，调动常量函数</span></span><br><span class="line"><span class="comment">//cono.priVlue() ;  //错误！不能调用非常量成员函数 </span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;o\t&quot;</span>;</span><br><span class="line">o.<span class="built_in">getVlue</span>();  <span class="comment">//“同名”情况下，系统自动调用区别用</span></span><br><span class="line"> </span><br><span class="line">cout&lt;&lt;<span class="string">&quot;o\t&quot;</span>;</span><br><span class="line">o.<span class="built_in">priVlue</span>(); <span class="comment">//调用普通函数</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;o\t&quot;</span>;</span><br><span class="line">o.<span class="built_in">priVcon</span>();  <span class="comment">//调用常量成员函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>cono    常量成员函数<br>o       非常量成员函数<br>o       非常量成员函数priVlue()<br>o       常量成员函数priVcon()</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details></p></blockquote><p>3、常量函数</p><blockquote><p>在类体内定义常量函数格式：</p><blockquote><p>类型标识符  函数名  （参数列表） const{….//函数体}</p></blockquote><p>在类体内声明，体外定义格式：</p><blockquote><p>声明形式： 类型标识符  函数名  （参数列表）const;<br>定义形式： 类型标识符  类名：：函数名（参数列表） const;<br>{….//函数体}  </p></blockquote></blockquote><p>4、常引用作为函数参数<br>&ensp;&ensp;使用引用作为函数参数，传送的是地址，所以形参改变，则实参也跟着改变，但如果不希望函数改变对象的值，就要使用<code>常引用</code>作为参数，<br>例如：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">(<span class="type">const</span> <span class="type">double</span>&amp; r)</span></span>&#123;cout&lt;&lt;r&lt;&lt;endl&#125; <span class="comment">//Display是能使用而不能改变r所引用的对象。</span></span><br></pre></td></tr></table></figure></p><details class="folding-tag" green><summary> 常量成员变量及常量成员函数的使用 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">constClass</span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> conMbr;<span class="comment">//类中常量成员变量</span></span><br><span class="line"><span class="type">int</span> Mbr;<span class="comment">//普通成员变量</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"><span class="built_in">constClass</span>():<span class="built_in">conMbr</span>(<span class="number">0</span>),<span class="built_in">Mbr</span>(<span class="number">100</span>)&#123;</span><br><span class="line">&#125;<span class="comment">//类中定义的const成员变量必须在构造函数的初始化列表中进行初始化</span></span><br><span class="line"><span class="built_in">constClass</span>(<span class="type">int</span> i):<span class="built_in">conMbr</span>(i)&#123;</span><br><span class="line">Mbr = <span class="number">200</span> ; <span class="comment">//初始化列表处给出初值 </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printConst</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;conMbr = &quot;</span>&lt;&lt;conMbr&lt;&lt;<span class="string">&quot;,Mbr = &quot;</span>&lt;&lt;Mbr&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getConst</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;调用非常量函数&quot;</span>&lt;&lt;endl; </span><br><span class="line"><span class="keyword">return</span> conMbr; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getConst</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;调用常量函数&quot;</span>&lt;&lt;endl; </span><br><span class="line"><span class="keyword">return</span> conMbr; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">; </span><br><span class="line"><span class="keyword">return</span> Mbr; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processConst</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;在processConst函数中非常量-- &quot;</span>&lt;&lt;endl; </span><br><span class="line"><span class="type">int</span> x = <span class="number">2</span>*conMbr +<span class="number">1</span>;<span class="comment">//可以读取conMBR </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;x = 2*conMbr +1 = &quot;</span>&lt;&lt;x&lt;&lt;endl; </span><br><span class="line"><span class="comment">//conMbr++;//错误！不能更改常量成员变量conMbr的值</span></span><br><span class="line">Mbr++;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Mbr = &quot;</span>&lt;&lt;Mbr&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processConst</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;在processConst函数中非常量-- &quot;</span>&lt;&lt;endl; </span><br><span class="line"><span class="type">int</span> x = conMbr +<span class="number">1</span>;<span class="comment">//可以读取conMBR </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;x = conMbr +1 = &quot;</span>&lt;&lt;x&lt;&lt;endl; </span><br><span class="line"><span class="comment">//conMbr++;//错误！不能更改常量成员变量conMbr的值</span></span><br><span class="line"><span class="comment">//Mbr++;  //错误！也不能更改非常量成员变量 Mbr的值 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Mbr = &quot;</span>&lt;&lt;Mbr&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">constClass <span class="title">ob1</span><span class="params">(<span class="number">123</span>)</span>,ob2</span>;</span><br><span class="line"><span class="comment">//定义普通对象 ob1=&#123;123,200&#125;,ob2=&#123;0,100&#125; </span></span><br><span class="line">ob1.<span class="built_in">printConst</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;ob2.getConst() = &quot;</span>&lt;&lt;ob2.<span class="built_in">getConst</span>()&lt;&lt;endl; </span><br><span class="line"></span><br><span class="line"><span class="comment">//普通对象系统自动调用非常量函数</span></span><br><span class="line"></span><br><span class="line">ob2.<span class="built_in">processConst</span>() ;</span><br><span class="line"><span class="function"><span class="type">const</span> constClass <span class="title">ob3</span><span class="params">(<span class="number">20</span>)</span></span>;<span class="comment">//定义常量对象ob =&#123;20,200 &#125; </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;ob3.getConst() = &quot;</span>&lt;&lt;ob3.<span class="built_in">getConst</span>() &lt;&lt;endl;</span><br><span class="line">ob3.<span class="built_in">processConst</span>();</span><br><span class="line"><span class="comment">//常量对象系统自动调用常量函数 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>conMbr = 123,Mbr200<br>调用非常量函数<br>ob2.getConst() = 0<br>在processConst函数中非常量—<br>x = 2*conMbr +1 = 1<br>Mbr = 101<br>调用常量函数<br>ob3.getConst() = 20<br>在processConst函数中非常量—<br>x = conMbr +1 = 21<br>Mbr = 200</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><details class="folding-tag" green><summary> 常引用型成员变量 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> fvalue = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CDemo</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> num; <span class="comment">//常量型成员变量 </span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp;ref;<span class="comment">//常引用型成员变量 </span></span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CDemo</span>(<span class="type">int</span> n):<span class="built_in">num</span>(n),<span class="built_in">ref</span>(value),<span class="built_in">value</span>(<span class="number">4</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//常引用型成员变量也必须在 构造函数的初始化列表中进行初始化 </span></span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">sizeof</span>(CDemo) &lt;&lt;endl;</span><br><span class="line"><span class="comment">//输出 CDemo对象的长度24（整形站8个字节）</span></span><br><span class="line"><span class="function">CDemo <span class="title">f</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="comment">//定义对象f  ，初始化f&#123;100,4,4&#125;</span></span><br><span class="line"><span class="comment">//f.ref = f.value; //错误！在程序中不能修改这个引用</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;f.num= &quot;</span>&lt;&lt;f.num &lt;&lt;<span class="string">&quot;\t f.ref =&quot;</span></span><br><span class="line">&lt;&lt;f.ref&lt;&lt;<span class="string">&quot;\t f.value =&quot;</span>&lt;&lt;f.value&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>24<br>f.num= 100       f.ref =4        f.value =4</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h3 id="成员对象和封闭类"><a href="#成员对象和封闭类" class="headerlink" title="成员对象和封闭类"></a>成员对象和封闭类</h3><p>1、在<code>定义封闭类的构造函数</code>时，需要添加<code>初始化列表</code>指明要调用成员对象的那个构造函数。  </p><blockquote><p>在封闭类构造函数中添加初始化列表格式：</p><blockquote><p>封闭类名::构造函数名 （参数表）:成员变量1（参数表）, 成员变量2 （参数表）····{····}</p></blockquote></blockquote><p>例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student::<span class="built_in">Student</span>(string n):<span class="built_in">name</span>(n) ,<span class="built_in">birthday</span>(<span class="built_in">myDate</span>())&#123;&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：</p><blockquote><p>1) &ensp;<span class='p red'>执行封闭类的构造函数时，先执行成员对象的构造函数，然后再执行封闭类自己的构造函数。</span><br>2) &ensp;成员对象的构造函数的执行次序<code>与成员对象在类定义中的说明次序一致</code>,与在构造函数初始化列表中出现的次序无关<br>3) &ensp;;当封闭类消亡时<code>先执行封闭类的析构函数，然后再执行成员对象的析构函数</code>,<emp>析构函数先构造后析构</emp></p></blockquote></blockquote><details class="folding-tag" green><summary> 封闭类构造函数的初始化列表 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CTyre</span>&#123; <span class="comment">//轮胎类 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> radius; <span class="comment">//半径 </span></span><br><span class="line"><span class="type">int</span> width;<span class="comment">//宽度 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CTyre</span>():<span class="built_in">radius</span>(<span class="number">16</span>) ,<span class="built_in">width</span>(<span class="number">185</span>)&#123;</span><br><span class="line">&#125;<span class="comment">//定以构造函数 1</span></span><br><span class="line"><span class="built_in">CTyre</span>(<span class="type">int</span> r,<span class="type">int</span> w):<span class="built_in">radius</span>(r) ,<span class="built_in">width</span>(w)&#123;</span><br><span class="line">&#125;<span class="comment">//定以构造函数 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getRadius</span><span class="params">()</span><span class="comment">//获取半径 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> radius;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getWidth</span><span class="params">()</span><span class="comment">//获取宽度 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> width;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CCar</span> &#123;<span class="comment">//汽车类 封闭类 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> price; <span class="comment">//价格 </span></span><br><span class="line">CTyre tyre;<span class="comment">//成员对象 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CCar</span>();<span class="comment">//声明构造函数 3</span></span><br><span class="line"><span class="built_in">CCar</span>(<span class="type">int</span> p ,<span class="type">int</span> tr, <span class="type">int</span> tw);<span class="comment">//声明构造函数3 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123; <span class="comment">//获取价格 </span></span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">CTyre <span class="title">getCTyre</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//获取轮胎信息 </span></span><br><span class="line"><span class="keyword">return</span> tyre;</span><br><span class="line">&#125;</span><br><span class="line">&#125; ;</span><br><span class="line">CCar::<span class="built_in">CCar</span>()<span class="comment">//定义构造函数3 </span></span><br><span class="line">&#123;</span><br><span class="line">price = <span class="number">50010</span>;</span><br><span class="line"><span class="built_in">CTyre</span>();</span><br><span class="line">&#125; ;</span><br><span class="line">CCar::<span class="built_in">CCar</span>(<span class="type">int</span> p ,<span class="type">int</span> tr, <span class="type">int</span> tw):<span class="built_in">price</span>(p),<span class="built_in">tyre</span>(tr,tw)&#123;</span><br><span class="line">&#125;;<span class="comment">//定义构造函数，使用初始化列表 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">CCar <span class="title">car</span><span class="params">(<span class="number">48900</span>,<span class="number">17</span>,<span class="number">255</span>)</span> </span>;<span class="comment">//定义对象car并调用构造函数4初始化，</span></span><br><span class="line"><span class="comment">//需先执行构造函数2初始化轮胎信息，在继续执行构造函数3初始化价格</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\tprice= &quot;</span>&lt;&lt;car.<span class="built_in">getPrice</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\tgetRadius =  &quot;</span>&lt;&lt;car.<span class="built_in">getCTyre</span>().<span class="built_in">getRadius</span>()&lt;&lt;</span><br><span class="line"><span class="string">&quot;\tgetWidth =  &quot;</span>&lt;&lt;car.<span class="built_in">getCTyre</span>().<span class="built_in">getWidth</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><pre><code>      price= 48900    getRadius =  17 getWidth =  255</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><p>2、封闭类的复制构造函数</p><blockquote><p>如果封闭类的对象是用默认复制构造函数初始化，那么他包含的<code>成员对象也会用复制构造函数初始化</code></p></blockquote><details class="folding-tag" green><summary> 封闭类的复制构造函数 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;default&quot;</span>&lt;&lt;endl;<span class="comment">//构造函数 </span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">A</span>(A&amp;a)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;copy&quot;</span>&lt;&lt;endl;<span class="comment">//复制构造函数 </span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;<span class="comment">//封闭类 </span></span><br><span class="line">A a;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">B b1,<span class="built_in">b2</span>(b1);<span class="comment">//b1是类A构造函数初始化，b2是类A 复制构造函数初始化 </span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>default<br>copy</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>1、 友元机制是对类外一些函数打开的一个特殊通道，<code>授权他们能够访问本类的私有成员变量</code>。<br>2、 友元机制破坏了类的封装性和信息隐藏，但有助于<code>数据共享，能够提高程序的效率</code><br>3、 友元机制包括友元函数和友元类</p><blockquote><p>友元函数：</p><blockquote><p>在定义一个类的时候，可以把一些函数（包括<code>全局函数</code>和<code>其他类成员函数</code>）声明为“友元”，这样这些函数就成为了<code>友元函数</code></p></blockquote><p>类中声明友元函数的格式：</p><blockquote><p>friend 函数类型 函数名（参数表）； //<code>针对全局函数</code><br>friend 函数类型 函数所在类名::函数名（参数列表）;</p></blockquote><p>注意：</p><blockquote><p>友元函数可以在类中私有或公有部分通过关键字friend<code>声明或定义</code>，但如在类中声明，而在类外定义，就不能再在类外使用friend关键字。</p></blockquote><p>友元函数的优点</p><blockquote><ol><li>友元函数应被看做<code>类接口的一部分</code>，使用它的主要目的是提高效率，因为它可以直接访问对象的私有成员，从而省去调用类的相应成员函数开销。</li><li>类的设计者不必考虑好该类的各种使用情况之后再设计这个类，而是可以根据需要，通过用友元来增加类的接口。</li></ol></blockquote></blockquote><details class="folding-tag" green><summary> 友元函数声明 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span><span class="comment">//数学函数 </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pixel</span>;<span class="comment">//前向引用声明 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printX</span><span class="params">(Pixel p)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pixel</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Pixel</span>(<span class="type">int</span> x0,<span class="type">int</span> y0)<span class="comment">//定以构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">x = x0;y = y0; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Pixel:(&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">double</span> <span class="title">getDist</span><span class="params">(Pixel p1,Pixel p2)</span></span>;<span class="comment">//声明全局友元函数</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Test::printX</span><span class="params">(Pixel p)</span></span>;<span class="comment">//声明Text类成员函数为友元函数</span></span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Test::printX</span><span class="params">(Pixel p)</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p.x =&quot;</span>&lt;&lt;p.x&lt;&lt;<span class="string">&quot;\tp.y =&quot;</span>&lt;&lt;p.y&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getDist</span><span class="params">(Pixel p1,Pixel p2)</span><span class="comment">//友元函数在类外定义</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> xd = <span class="built_in">double</span>(p1.x -p2.x);<span class="comment">//友元函数使用pixel 类私有成员</span></span><br><span class="line"><span class="type">double</span> yd = <span class="built_in">double</span>(p1.y -p2.y);<span class="comment">//强制类型转换</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(xd*xd + yd*yd) ;<span class="comment">//计算两点之间距离 </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">Pixel <span class="title">p1</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>)</span> ,<span class="title">p2</span><span class="params">(<span class="number">10</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line">p1.<span class="built_in">printxy</span>();</span><br><span class="line">p2.<span class="built_in">printxy</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;(p1,p2)之间的距离  =&quot;</span>&lt;&lt;<span class="built_in">getDist</span>(p1,p2)&lt;&lt;endl;<span class="comment">//直接调用全局函数 </span></span><br><span class="line">Test t;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;从友元函数中输出----&quot;</span> &lt;&lt;endl;</span><br><span class="line">t.<span class="built_in">printX</span>(p1);<span class="comment">//通过对象调用类的成员函数 </span></span><br><span class="line">t.<span class="built_in">printX</span>(p2);<span class="comment">//通过对象调用类的成员函数 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>Pixel:(0,0)<br>Pixel:(10,10)<br>(p1,p2)之间的距离  =14.1421<br>从友元函数中输出——<br>p.x =0  p.y =0<br>p.x =10 p.y =10</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><blockquote><p>友元类</p><blockquote><p>如果将一个类B说明为另一个类A的友元类，则类B中的所有函数都是类A的友元函数<br>友元类的关系是单向的,且不可出传递<br>除非必要一般不使用友元类</p></blockquote><p>在类定义中声明友元类的格式</p><blockquote><p>friend clsaa 类名</p></blockquote></blockquote><details class="folding-tag" green><summary> 友元类示例 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myComplex</span>&#123;<span class="comment">//复数类 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">double</span> real,imag;<span class="comment">//复数的实部，虚部</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">myComplex</span>();<span class="comment">//声明构造函数 </span></span><br><span class="line"><span class="built_in">myComplex</span>(<span class="type">double</span> r,<span class="type">double</span> i);</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">oper</span>;  <span class="comment">//定义友元类 .oper是myComplex的友元类且方向不可逆</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line">myComplex::<span class="built_in">myComplex</span>()&#123;</span><br><span class="line">real = <span class="number">0</span>; imag = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line">myComplex::<span class="built_in">myComplex</span>(<span class="type">double</span> r,<span class="type">double</span> i)&#123;</span><br><span class="line">real = r,imag = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">oper</span>&#123;</span><br><span class="line"><span class="comment">//声明成员函数，连个参数对象c1与c2相加 </span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">myComplex <span class="title">addCom</span><span class="params">(myComplex c1,myComplex c2)</span></span>;</span><br><span class="line"><span class="comment">//声明成员函数，输出参数对象c有关的数据 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">outCom</span><span class="params">(myComplex c)</span> </span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外定义函数 </span></span><br><span class="line"><span class="function">myComplex <span class="title">oper::addCom</span><span class="params">(myComplex c1,myComplex c2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(c1.real+c2.real,c1.imag+c2.imag);</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">void</span> oper:: <span class="built_in">outCom</span>(myComplex c)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;c.real&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;c.imag&lt;&lt;<span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">myComplex <span class="title">c1</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span>,<span class="title">c2</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span>,res</span>;</span><br><span class="line">oper o;</span><br><span class="line">res = o.<span class="built_in">addCom</span>(c1,c2);<span class="comment">//通过oper操作myComplex成员函数</span></span><br><span class="line">o.<span class="built_in">outCom</span>(c1); </span><br><span class="line">cout&lt;&lt;<span class="string">&quot;+&quot;</span>;</span><br><span class="line">o.<span class="built_in">outCom</span>(c2); </span><br><span class="line">cout&lt;&lt;<span class="string">&quot;=&quot;</span>;</span><br><span class="line">o.<span class="built_in">outCom</span>(res); </span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>(1,2)+(3,4)=(4,6)</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h3 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h3><p>1、当一个承运函数被调用时，系统将自动向它传递一个<code>隐含参数</code>，该参数是一个指向调用该函数的对象指针，名为<code>this指针</code>，从而使成员函数知道该对那个对象进行操作。<br>2、使用this指针，保证了每个对象可以拥有自己的数据成员，但处理这些数据成员的代码却可以被所有的对象共享，从而提高了程序的安全性和效率。<br>3、this指针式实现封装的一种机制，它将对象和该对象调用的成员函数链接在一起，从而在外部看来，每个对象都拥有自己的成员函数。</p><blockquote><p>注意：</p><blockquote><p>除非形参的名字与成员变量的名相同。一般情况下都省略掉符号<code>this-&gt;</code>,而让系统进行默认</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七牛云图床</title>
      <link href="/posts/966f41d8.html"/>
      <url>/posts/966f41d8.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="57fe60c559a8e8fe2a126aad4b7916c11f5afd8d85d01fd13a84e65f66a9f478">7581020999ef8a5b4e658865f7f9f3c0d26bddbbb1ebfee70b42e8673f9ebc72e918f8e7ebff1bbb4d3d1a582067ba02101b28fdd2c3b7563bbaabda7c7e4f6b4bebfc5bcab088b3135d808c1e6a850d0a377d26b61b9a633eb5d5cbdc30276e167168e3203e94dfa91d7622ba6702bbdef35764a6a489371490f5f2486defb930c30e75cc3212961d405fcbf654d3100bb12ada28102dd565e2b056d0a252b9a23bba3b24bfd5e84eacc2b3eaf2e614801c227b5386a2c75bea0d89acc985aee3e1291386e44bce40f07e951de87808ca1e67ebf08f454e58f52219e37a976b1b6d36273e57650a2d539288f14bb689b846a5e117fc66a311ee219dddf98491c4e715d179166883fe78783f28cd2c1bdc91aafde80d017f36b10e803b8d6ef18d4938d7516e50ca8675e34e0bb488d854524313329218d6d1ca47769fbf8dc7087518c725ade31418b2d4788bf7072799adc542bf536ff6c476032219454d3e9d5a4af91a82385887f88c2223b5203b693678738614dcd7189cc3c437fdeb75a41c2929a6a3736bb08a1fba2f3f77f1bc17d5b3aaa6601fd97d9c06ed62e0ed80e3f3bd0a89e2586c91aafdf33e35e783c105d87d3e6a83b383d36bee2e098d57b916b364028d31e9d2b9558bb009d78b1fb2df6c0cc7b8473dd3acf46f2ee33a262a254d2a647806f5cdec5276171380862d4644ca1447b17f4246c5ccfabe14a20612c5129ca3c5b09e1543a12a58ac43a5c21aacdc6de8c2f329a9dc2ed21d468bcdae53c5f849de768131a83db766aae30f15f86b68c6c070731190bc3e4b867fe7cf59c32c9b2e827e70c58ae50317e1063b13f9b709e4df3e71cd6a789545979e5bd493d870d8a055904ee26cedfaff76af63cfad68f8453f8459c182873921d5c82b1d35136b3f55951acb8f56a089cd4c76b01be651fc9d74ca93a80529e22fcc934bdd9d303e49709e20f1e88bd38b3044dccd92822739e1664981413045366342c5fa292daac5b3e64ee9ddef8305411c8d8b2f646328ffc5580f431bcd6a03968585c55639474056e298c58b3067bbc36e749651f1246c12b1a47e54fd37ff5b7109b1eb77fe591c45cffbc80885ef16e78bcb266b4d80339f8b98bc2ca8e8fda5dec81fc51335adbbd305823591001005fa967d763ddd58f6f9b6b5e9c18240b8b44fffad5d75bd3e59e68bec7f0534e39ec0a552b8203d0f57bc13357a49afe1afb3d54c672e467a422aba25948f83f2d8c79b930455d6438b1cd10c1376e5e666c0d5d0219a37bcc31c719e584b03119ee876a1375b2469b4a5e9e1856a17d61789fea0759da21b53ad3a46f23b1b939501d1d78a9bf1775940e716451767085c238d3ec532eea45a6b6ea05b5497f7d47bde8b671aeafef37e67561c9320c6d8ca61c3416fb18123181c7d7b337551f7ab9f53973e50c4e57010b0e2d9cd57da485c8ff2f7b35d0a3209b4f3a51dcc0637413f502ca41739db3b0279d14207e0185c190c05fd508574a134008ac5211f07187e29533e70a2d6b7b12dbf0676d02cfaba090526e2d1bf2236daaf9535cf1fc7be66c2dd0c6c2233439d15f78ffbc3b06f7bcff6fdc86dbd3f08df260f138b965b914781ed192fbe47d016bcdce8dcc7bdf92f960352b8b0bc162c71c7746836dff6c9e6e1662f0725c5412dabc4d892f868276e010d4152159aa64f96878664c3772524b251bcc528b67d579c009ba6c7b6ae1e08a6488b2ee7c40f7e19a33735c87bb16c5e89ce39de0a42f8ad4ba89c1d418d8432a4aa6ae5c54001c9bca894b2284de77adf7b1a582525ec60e0d31415814facd48884cfc388e4b00daa9aef2f5411aa5867d153a93e8250eff9f0523a4e3ddceba60cac6d84d1e9d2483d9891056a6297bc5694400a4f47719e0e115e4e6f548cf1b37deb58817e88c9ea3611e7d9e2b2b9c953e2fdeb28de2d013e223da168153ec635182c47a7c8b62c52b9eaf720f0f8978fa738e75b4568d5583b7a2084f3d9ca494884d2adb68c2a2187913644f92dbffc965bb578ba6bc775671568fb7e1aa849b05958d5b1fb104bce93cbda680e63741b1e31c5e03754ac25b3a9ead46ca512e52d281c1f4c340133f2b411e03459689db61a3cd93457dc208eaad243627652b74b81545dc987463a2345de1351bb24caa18f0fa0d81f7d83544ef182d1c14ec661b576019515679899992b4100f8b36d724565485d87b313aff1962d33c39b31a3f33ab7a770a33d63cdf9858a1ee239570751e82748dff87de0850726052746ab69811e5ae745b1a4c2cb56357c05cac446c198d7f0500882b5616dad1c85e35ba6b5f2ee5230524b5f3fd42897043ab3029bba8a7770599a93ebcbbd0c25d728bac5d73cde7ba73094df7406018d195f8268b86ac76ba3fbf9d37d2c1cffd45c7a90317da3097edb0738b08a1ba9b97da707ad12e8cdf60de013c93a63249784291817eef1ff031e485cf66d46b794652577fac5d2c26e42ce87b5789624315d2ee5494149d06de2cfe1cfe85f0b0ea9ea5894a982ad69ae20b4ca8ee59bcd7c78b794e2b807af68ebf280124b0e04b11d606d6ca5f08e1b6cebcfd6a89c64326eb07bc23fcd4ef00bf0777dac1e00aec8459a309be961ecc08979fe6731a53e73c6be3a85071cdae87e0c215980b755c3de504711d26f7a5ff0dc7f99356f6d184f0492a228185b3935542d5638528ed4f6985b8664b535d1c86730ddfe7a6211fdf148579aebcce07a62a280dd4451124d85db631010927e313b6975a1dd28c61b07e0acc93dfca904924081ba7669ae86d2cd1c3b871530238786f5434038d6d19c389fedb1479a315bdbc2a9de9a0d4a0e5c459cded31cb0a7f97de9dc1c8873d752e5d0dc7d2e1263e7e4d8d6cfa7a30b4a5cb8a72d5e81fad60778e43f01f091f771d89007dd090d4b33a23c9c09e834f79ce35504386496d6bf83e03cdb91c23d0c0a3f57ab8de7f841ddea4a4c05d5b9af624352a536896864d851d8550bd104d6578edf67d17a62ca50c0f25e2639024ceede0546fa26965d002865099298a4d3ee212c9d6cf688c2cd1031e3ee0c122cc37d78ce6e82a43550e3271c72eb35d2d2e9af19c3c7d0ab1ebc048c1c07f58a1ea53c71898b05da06011c7a1664f895d80078d1e95fc4019b7ca364e391845771796db520ce048ee9868a1135f5b75be112dac7eb9ee8c5aeb5fa844bd7e05d8dd8f5c37e4885ca99d5706147b00d86a62c7a45a2873d39bd6095a3df770330efec3a01fd579071cab1c834b8681e2eb92ff41afc2fd78b5cd66c1c0db1f7ad1cb8dd8a5f0d61ba2393c781825fc903bb13b3d0109458982cab7b6df7c1b9d7dc0f5f1d1e12368569a6b10064aa2a91a037c5412ac075d60781e1d95606dba4be4ab5e917d0b1f232ea568701fca61b0f30c39c32bb8b30c75a5fa1f7a01daaba6305e6cdb990396820d78ec6f32ea893895457110efa29acc79253e2d3fdd3c36bac684c38ed589f3b8be5a9b33bcab682a8aa1b8afea040647b8764a375aae3e4b1b86d54cedae410cdc1ef79b999c8a4a0ff4bcc2a24e5a9bd18aa491084ab2a2988d2d92e95b18addf250028235e5367816bc953193dab2799a3c67839a9506736f689ccb3ee9b2b34b9b320d65ac8d860d5858c13d8b9d7ef47348aeb18b1f29d4d143825f7c5dbc4495a67e1f746560242c6aea573502d44ad950680a8d51afe654912df9f4282b843e8a2dfa0d20d245e456795814cd2898b2a228e08c25f1cbba7958e39cc052f815c24ebdc476a4e55e3f0869a058eb5e0f69772fc0fa11030bd901084443a794805c3740d22ebb039fcb3a2273445e292d0da396746e2a5e65553d05f95930c53769109f9a94aa562094b3bbf5015a7a7bf071d72faa254173d8e1205118d4fe138178a7f98308b8cb2ac0a0ea3cb1e1c3b52b2525e2631cb727</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 七牛云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置mysql</title>
      <link href="/posts/186a9432.html"/>
      <url>/posts/186a9432.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Java项目封装成可以分享安装的小程序</title>
      <link href="/posts/e75e11db.html"/>
      <url>/posts/e75e11db.html</url>
      
        <content type="html"><![CDATA[<h2 id="从-idea-中导出项目"><a href="#从-idea-中导出项目" class="headerlink" title="从 idea 中导出项目"></a>从 idea 中导出项目</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>                            </div>            </details><h2 id="安装-exe4j-程序"><a href="#安装-exe4j-程序" class="headerlink" title="安装 exe4j 程序"></a>安装 exe4j 程序</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>                            </div>            </details><h2 id="安装-inno-setup"><a href="#安装-inno-setup" class="headerlink" title="安装 inno setup"></a>安装 inno setup</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>                            </div>            </details>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题切换</title>
      <link href="/posts/f1f94f58.html"/>
      <url>/posts/f1f94f58.html</url>
      
        <content type="html"><![CDATA[<h2 id="搭建-hexo-框架"><a href="#搭建-hexo-框架" class="headerlink" title="搭建 hexo 框架"></a>搭建 hexo 框架</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <h3 id="初始化文件夹"><a href="#初始化文件夹" class="headerlink" title="初始化文件夹"></a>初始化文件夹</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="安装相关依赖："><a href="#安装相关依赖：" class="headerlink" title="安装相关依赖："></a>安装相关依赖：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure><h3 id="安装-hexo："><a href="#安装-hexo：" class="headerlink" title="安装 hexo："></a>安装 hexo：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="Git的安装与使用"><a href="#Git的安装与使用" class="headerlink" title="Git的安装与使用"></a>Git的安装与使用</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <ol><li>进入官网<a href="https://git-scm.com/downloads">下载安装</a>-64-bit Git for Windows Setup 版本</li><li>三种命令格式：<br>Git CMD 是windows 命令行的指令风格<br>Git Bash 是linux系统的指令风格（建议使用）<br>Git GUI是图形化界面（新手学习不建议使用）</li><li>常用命令：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config -l  //查看所有配置</span><br><span class="line">git config --system --list //查看系统配置</span><br><span class="line">git config --global --list //查看用户（全局）配置</span><br></pre></td></tr></table></figure></li><li>配置用户名与邮箱名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></li><li>使用  <code>git config -1</code>检测配置是否成功</li><li>链接Github<br>(1)执行命令生成<code>.ssh</code>文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>(2)打开C盘对应文件夹，复制秘钥内容到Github的token中。<br>文件夹路径：<code>/c/Users/11011/.ssh/id_rsa.pub</code></li></ol>              </div>            </details><h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h2><details class="folding-tag" orange><summary> 选择主题 </summary>              <div class='content'>              <div class="tabs" id="主题"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#主题-1">主题 1</button></li><li class="tab"><button type="button" data-href="#主题-2">主题 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="主题-1"><p>直接使用 butterly 主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterflyy</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主题-2"><p>git clone matery 主题放在自己的 theme 文件夹下<a href="https://github.com/blinkfox/hexo-theme-matery">传送门</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="安装主题渲染依赖"><a href="#安装主题渲染依赖" class="headerlink" title="安装主题渲染依赖"></a>安装主题渲染依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus –save</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="将静态网站挂载到-github-上"><a href="#将静态网站挂载到-github-上" class="headerlink" title="将静态网站挂载到 github 上"></a>将静态网站挂载到 github 上</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>格式必须是：用户名+.github.io,将来要部署 github a page 的时候，才会被识别，也就是 xsxxx.github.io，其中 xxx 就是你注册 Github 的用户名。</p><h3 id="安装-hexo-deployer-git-依赖"><a href="#安装-hexo-deployer-git-依赖" class="headerlink" title="安装 hexo-deployer-git 依赖"></a>安装 hexo-deployer-git 依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure><h3 id="修改-config-yml-文件"><a href="#修改-config-yml-文件" class="headerlink" title="修改_config.yml 文件"></a>修改_config.yml 文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">   <span class="string">repository:git@github.com:fshby/fshby.github.io.git</span></span><br><span class="line">   <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在-posts-文件夹下新建文章"><a href="#在-posts-文件夹下新建文章" class="headerlink" title="在 posts 文件夹下新建文章"></a>在 posts 文件夹下新建文章</h3><div class="tabs" id="方式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#方式-1">方式 1</button></li><li class="tab"><button type="button" data-href="#方式-2">方式 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="方式-1"><p>新建文章</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 文章名</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="方式-2"><p>新建页面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page 页面名</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="将代码推送到-github"><a href="#将代码推送到-github" class="headerlink" title="将代码推送到 github"></a>将代码推送到 github</h3><div class="tabs" id="终端"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#终端-1">终端 1</button></li><li class="tab"><button type="button" data-href="#终端-2">终端 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="终端-1"><p>gitBush<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="终端-2"><p>vscode<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean; hexo generate; hexo deploy</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h2 id="将静态网站挂载到-gitee-上"><a href="#将静态网站挂载到-gitee-上" class="headerlink" title="将静态网站挂载到 gitee 上"></a>将静态网站挂载到 gitee 上</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>格式必须是：用户名+.gitee.io,将来要部署 Gite e page 的时候，才会被识别，也就是 xxxx.gitee.io，其中 xxx 就是你注册 Gitee 的用户名。</p><h3 id="安装-depoly-git-依赖"><a href="#安装-depoly-git-依赖" class="headerlink" title="安装 depoly-git 依赖"></a>安装 depoly-git 依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deploy-git   --sava</span><br></pre></td></tr></table></figure><h3 id="修改-hexo-配置文件指定仓库路径"><a href="#修改-hexo-配置文件指定仓库路径" class="headerlink" title="修改 hexo 配置文件指定仓库路径"></a>修改 hexo 配置文件指定仓库路径</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: http://zheng-kunfeng.gitee.io/zhengkunfeng.gitee.io</span><br><span class="line">  branch: master</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="推送-hexo-站点文件"><a href="#推送-hexo-站点文件" class="headerlink" title="推送 hexo 站点文件"></a>推送 hexo 站点文件</h3><p>推送命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a>加载动画</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <p>大家勾选动画后可以看到butterly的方块动画个人觉得不太好看，所以我找到了<a herf='https://cloud.tencent.com/developer/article/1943725'>花猪学习记录</a>的齿轮动画</p><div class="hide-block"><button type="button" class="hide-button" style="background-color: orange;">查看效果    </button><div class="hide-content"><div class="caishendeng">                <div class="caishenxian">            <img class="caishenpic lala" src="http://rm5i494z0.hn-bkt.clouddn.com/article/qiniu/%E5%8A%A0%E8%BD%BD%E6%95%88%E6%9E%9C.png">        </div>                  </div></div></div><h3 id="在themes-butterfly-layout-includes-loading目录下创建一个名为loaded-ejs的文件，并将如下内容写入该文件："><a href="#在themes-butterfly-layout-includes-loading目录下创建一个名为loaded-ejs的文件，并将如下内容写入该文件：" class="headerlink" title="在themes\butterfly\layout\includes\loading目录下创建一个名为loaded.ejs的文件，并将如下内容写入该文件："></a>在themes\butterfly\layout\includes\loading目录下创建一个名为loaded.ejs的文件，并将如下内容写入该文件：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.preloader.enable) &#123; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;loader&#x27;</span>&gt;</span></span><br><span class="line">    &lt;% if(theme.preloader.layout == &#x27;gear&#x27; ) &#123;%&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer_box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;loader_overlay&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;loader_cogs&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;loader_cogs__top&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;top_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;top_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;top_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;top_hole&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;loader_cogs__left&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;left_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;left_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;left_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;left_hole&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;loader_cogs__bottom&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;bottom_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;bottom_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;bottom_part&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;bottom_hole&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;% &#125; else if(theme.preloader.layout == &#x27;spinner-box&#x27;) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading-left-bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading-right-bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;spinner-box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;configure-border-1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;configure-core&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;configure-border-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;configure-core&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading-word&quot;</span>&gt;</span>加载中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> endLoading = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;auto&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;loader&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;loading&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>,endLoading);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="找到主题配置文件-config-butterfly-yml，在inject的head处引入如下两个css文件："><a href="#找到主题配置文件-config-butterfly-yml，在inject的head处引入如下两个css文件：" class="headerlink" title="找到主题配置文件_config.butterfly.yml，在inject的head处引入如下两个css文件："></a>找到主题配置文件_config.butterfly.yml，在inject的head处引入如下两个css文件：</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@latest/hexo/css/loading_style_1.css&quot;</span> <span class="string">&gt;</span> <span class="comment"># spinner-box风格样式文件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/zyoushuo/Blog@latest/hexo/css/loading_style_2.css&quot;</span> <span class="string">&gt;</span> <span class="comment"># gear风格样式文件</span></span><br></pre></td></tr></table></figure><h3 id="在-themes-butterfly-layout-includes目录下，找到layout-pug文件。"><a href="#在-themes-butterfly-layout-includes目录下，找到layout-pug文件。" class="headerlink" title="在\themes\butterfly\layout\includes目录下，找到layout.pug文件。"></a>在\themes\butterfly\layout\includes目录下，找到layout.pug文件。</h3><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.preloader</span><br><span class="line">      !=partial(<span class="string">&#x27;includes/loading/loading&#x27;</span>, &#123;&#125;, &#123;cache: <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.preloader</span><br><span class="line">         !=partial(<span class="string">&#x27;includes/loading/loaded.ejs&#x27;</span>, &#123;&#125;, &#123;cache: <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="找到主题配置文件-config-butterfly-yml。"><a href="#找到主题配置文件-config-butterfly-yml。" class="headerlink" title="找到主题配置文件_config.butterfly.yml。"></a>找到主题配置文件_config.butterfly.yml。</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">preloader:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">gear</span> <span class="comment"># gear, spinner-box 两种样式可选</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="升级markdown"><a href="#升级markdown" class="headerlink" title="升级markdown"></a>升级markdown</h2><p>因为hexo框架使用的是比较老版本的markdown并不支持mermaid,因此需要手动配置<a href="https://www.freesion.com/article/7564409756/">传送门</a>另外给大家推荐一个<a href="https://uav360.gitee.io/gitbook/1-Chapter/8-%E7%89%B9%E6%AE%8A%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html">markdown公式指导手册</a></p><details class="folding-tag" orange><summary> 查看配置 </summary>              <div class='content'>              <h4 id="在终端根目录下安装hexo-filter-mermaids-—save"><a href="#在终端根目录下安装hexo-filter-mermaids-—save" class="headerlink" title="在终端根目录下安装hexo-filter-mermaids —save"></a>在终端根目录下安装hexo-filter-mermaids —save</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-mermaid-diagrams --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="打开-config-yml配置文件"><a href="#打开-config-yml配置文件" class="headerlink" title="打开-config.yml配置文件"></a>打开-config.yml配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mermaid tag</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available themes: default | dark | forest | neutral</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">default</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="添加script脚本"><a href="#添加script脚本" class="headerlink" title="添加script脚本"></a>添加script脚本</h4><p>打开butterfly主题下layout/footer.pug文件，添加一下代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.mermaid.enable </span><br><span class="line"> &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&#x27;https://unpkg.com/mermaid@9.0.0/dist/mermaid.min.js&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line"> &lt;script&gt;</span><br></pre></td></tr></table></figure></p>              </div>            </details><h2 id="死亡灰色滤镜"><a href="#死亡灰色滤镜" class="headerlink" title="死亡灰色滤镜"></a>死亡灰色滤镜</h2><p>filter滤镜，特殊时期时设置，自从伟大的江爷爷走后，全站各个app都变成了灰色，包括按钮、图片等等。只需要在你的css中添加如下代码：<br><details class="folding-tag" orange><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 加灰色滤镜 */</span></span><br><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  -webkit-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  -moz-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  -ms-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  -o-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">filter</span>: progid: DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=<span class="number">1</span>) ;</span><br><span class="line">  -webkit-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details></p><h2 id="Unicode-Emoji"><a href="#Unicode-Emoji" class="headerlink" title="Unicode Emoji"></a>Unicode Emoji</h2><p>emoji绘文字编码 是一种图形字符，不是图片，每个emoji都像文字一样具有独立的编码并且可以存放于字库中和文字一起复制粘贴。<br><a href="https://www.bilibili.com/read/cv2359501">传送门</a><br><details class="folding-tag" orange><summary> 部分表情 </summary>              <div class='content'>              <p>©️®️‼️⁉️™️ℹ️↔️↕️↖️↗️↘️↙️↩️↪️⌚⌛⌨️⏏️⏩⏪⏫⏬⏭️⏮️⏯️⏰⏱️⏲️⏳⏸️⏹️⏺️Ⓜ️▪️▫️▶️◀️◻️◼️◽◾☀️☁️☂️☃️☄️☎️☑️☔☕☘️☝️☠️☢️☣️☦️☪️☮️☯️☸️☹️☺️♀️♂️♈♉♊♋♌♍♎♏♐♑♒♓♠️♣️♥️♦️♨️♻️♿⚒️⚓⚔️⚕️⚖️⚗️⚙️⚛️⚜️⚠️⚡⚪⚫⚰️⚱️⚽⚾⛄⛅⛈️⛎⛏️⛑️⛓️⛔⛩️⛪⛰️⛱️⛲⛳⛴️⛵⛷️⛸️⛹️⛺⛽✂️✅✈️✉️✊✋✌️✍️✏️✒️✔️✖️✝️✡️✨✳️✴️❄️❌❇️❎❓❔❕❗❣️❤️➕➖➗➡️➰➿⤴️⤵️⬅️⬆️⬇️⬛⬜⭐⭕〰️〽️㊗️㊙️🀄🃏🅰️🅱️🅾️🅿️🆎🆑🆒🆓🆔🆕🆖🆗🆘🆙🆚🈁🈂️🈚🈯🈲🈳🈴🈵🈶🈷️🈸🈹🈺🉐🉑🌀🌁🌂🌃🌄🌅🌆🌇🌈🌉🌊🌋🌌🌍🌎🌏🌐🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜🌝🌞🌟🌠🌡️🌤️🌥️🌦️🌧️🌨️🌩️🌪️🌫️🌬️🌭🌮🌯🌰🌱🌲🌳🌴🌵🌶️🌷🌸🌹🌺🌻🌼🌽🌾🌿🍀🍁🍂🍃🍄🍅🍆🍇🍈🍉🍊🍋🍌🍍🍎🍏🍐🍑🍒🍓🍔🍕🍖🍗🍘🍙🍚🍛🍜🍝🍞🍟🍠🍡🍢🍣🍤🍥🍦🍧🍨🍩🍪🍫🍬🍭🍮🍯🍰🍱🍲🍳🍴🍵🍶🍷🍸🍹🍺🍻🍼🍽️🎀🎁🎂🎃🎄🎅🎆🎇🎈🎉🎊🎋🎌🎍🎎🎏🎐🎑🎒🎓🎖️🎗️🎙️🎚️🎛️🎞️🎟️🎠🎡🎢🎣🎤🎥🎦🎧🎨🎩🎪🎫🎬🎭🎮🎯🎰🎱🎲🎳🎴🎵🎶🎷🎸🎹🎺🎻🎼🎽🎾🎿🏀🏁🏂🏃🏄🏅🏆🏇🏈🏉🏊🏋️🏌️🏍️🏎️🏔️🏕️🏖️🏗️🏘️🏙️🏚️🏛️🏜️🏝️🏞️🏟️🏠🏡🏢🏣🏤🏥🏦🏧🏨🏩🏪🏫🏬🏭🏮🏯🏰🏳️🏴🏵️🏷️🐀🐁🐂🐃🐄🐅🐆🐇🐈🐉🐊🐋🐌🐍🐎🐏🐐🐑🐒🐓🐔🐕🐖🐗🐘🐙🐚🐛🐜🐝🐞🐟🐠🐡🐢🐣🐤🐥🐦🐧🐨🐩🐪🐫🐬🐭🐮🐯🐰🐱🐲🐳🐴🐵🐶🐷🐸🐹🐺🐻🐼🐽🐾🐿️👀👁️👂👃👄👅👆👇👈👉👊👋👌👍👎👏👐👑👒👓👔👕👖👗👘👙👚👛👜👝👞👟👠👡👢👣👤👥👦👧👨👩👪👫👬👭👮👯👰👱👲👳👴👵👶👷👸👹👺👻👼👽👾👿💀💁💂💃💄💅💆💇💈💉💊💋💌💍💎💏💐💑💒💓💔💕💖💗💘💙💚💛💜💝💞💟💠💡💢💣💤💥💦💧💨💩💪💫💬💭💮💯💰💱💲💳💴💵💶💷💸💹💺💻💼💽💾💿📀📁📂📃📄📅📆📇📈📉📊📋📌📍📎📏📐📑📒📓📔📕📖📗📘📙📚📛📜📝📞📟📠📡📢📣📤📥📦📧📨📩📪📫📬📭📮📯📰📱📲📳📴📵📶📷📸📹📺📻📼📽️📿🔀🔁🔂🔃🔄🔅🔆🔇🔈🔉🔊🔋🔌🔍🔎🔏🔐🔑🔒🔓🔔🔕🔖🔗🔘🔙🔚🔛🔜🔝🔞🔟🔠🔡🔢🔣🔤🔥🔦🔧🔨🔩🔪🔫🔬🔭🔮🔯🔰🔱🔲🔳🔴🔵🔶🔷🔸🔹🔺🔻🔼🔽🕉️🕊️🕐🕑🕒🕓🕔🕕🕖🕗🕘🕙🕚🕛🕜🕝🕞🕟🕠🕡🕢🕣🕤🕥🕦🕧🕯️🕰️🕳️🕴️🕵️🕶️🕷️🕸️🕹️🖇️🖊️🖋️🖌️🖍️🖐️🖕🖖🖤🖥️🖨️🖱️🖲️🖼️🗂️🗃️🗄️🗑️🗒️🗓️🗜️🗝️🗞️🗡️🗣️🗨️🗯️🗳️🗺️🗻🗼🗽🗾🗿😀😁😂😃😄😅😆😇😈😉😊😋😌😍😎😏😐😑😒😓😔😕😖😗😘😙😚😛😜😝😞😟😠😡😢😣😤😥😦😧😨😩😪😫😬😭😮😯😰😱😲😳😴😵😶😷😸😹😺😻😼😽😾😿🙀🙁🙂🙅🙆🙇🙈🙉🙊🙋🙌🙍🙎🙏🚀🚁🚂🚃🚄🚅🚆🚇🚈🚉🚊🚋🚌🚍🚎🚏🚐🚑🚒🚓🚔🚕🚖🚗🚘🚙🚚🚛🚜🚝🚞🚟🚠🚡🚢🚣🚤🚥🚦🚧🚨🚩🚪🚫🚬🚭🚮🚯🚰🚱🚲🚳🚴🚵🚶🚷🚸🚹🚺🚻🚼🚽🚾🚿🛀🛁🛂🛃🛄🛅🛋️🛌🛍️🛎️🛏️🛠️🛡️🛢️🛣️🛤️🛥️🛩️🛫🛬🛰️🛳️<br>plant-other<br>🌱 🌲 🌳 🌴 🌵 🌾 🌿 ☘ 🍀 🍁 🍂 🍃<br>Food &amp; Drink<br>food-fruit<br>🍇 🍈 🍉 🍊 🍋 🍌 🍍 🥭 🍎 🍏 <em> 🍑 🍒 🍓 🥝 🍅 🥥<br>food-vegetable<br>🥑 🍆 🥔 🥕 🌽 🌶 🥒 🥬 🥦 🧄 🧅 🍄 🥜 🌰<br>sky and weather<br>🌑 🌒 🌓 🌔 🌕 🌖 🌗 🌘 🌙 🌚 🌛 🌜 🌡 ☀ 🌝 🌞 🪐 ⭐ 🌟 🌠 🌌 ☁ ⛅ ⛈ 🌤 🌥 🌦 🌧 🌨 🌩 🌪 🌫 🌬 🌀 🌈 🌂 ☂ ☔ ⛱ ⚡ ❄ ☃ ⛄ ☄ </em> 💧 🌊 </p>              </div>            </details></p><h2 id="添加随机文章查找"><a href="#添加随机文章查找" class="headerlink" title="添加随机文章查找"></a>添加随机文章查找</h2><p><a href="https://blog.leonus.cn/2022/randomPost.html">参考文献</a></p><h2 id="修改文章永久链接"><a href="#修改文章永久链接" class="headerlink" title="修改文章永久链接"></a>修改文章永久链接</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <p><a href="https://blog.51cto.com/u_13640625/3032262">参考链接</a><br>1.安装插件：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><br>2.更改配置<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">permalink: posts/:abbrlink/</span><br><span class="line">abbrlink:</span><br><span class="line">    alg: crc32 #support crc16(default) and crc32</span><br><span class="line">    rep: dec   #support dec(default) and hex</span><br></pre></td></tr></table></figure></p>              </div>            </details><h2 id="折叠显示隐藏部分文字"><a href="#折叠显示隐藏部分文字" class="headerlink" title="折叠显示隐藏部分文字"></a>折叠显示隐藏部分文字</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <p><a href="https://blog.csdn.net/qq_36408085/article/details/104323711">参考链接</a></p>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程</title>
      <link href="/posts/7821ac43.html"/>
      <url>/posts/7821ac43.html</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://ks.wjx.top/vm/Q0daQwm.aspx">第一二章绪论+软件需求A卷</a></div></h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://ks.wjx.top/vm/eFmTwgn.aspx">第一二章绪论+软件需求B卷</a></div></h2><div class="hide-block"><button type="button" class="hide-button" style="background-color: orange;">查看答案    </button><div class="hide-content"><p><img  src="http://rm5i494z0.hn-bkt.clouddn.com/article/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%AC%AC1-2%E7%AB%A0B%E5%8D%B7.jpg"></p></div></div>  <h2 id="-2"><a href="#-2" class="headerlink" title=""></a><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://ks.wjx.top/vm/rvf5CDb.aspx">第三章 结构化方法 A卷</a></div></h2><div class="hide-block"><button type="button" class="hide-button" style="background-color: orange;">查看答案    </button><div class="hide-content"><p><img class="caishenpic lala" src="http://rm5i494z0.hn-bkt.clouddn.com/article/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0.jpg"></p></div></div><h2 id="-3"><a href="#-3" class="headerlink" title=""></a><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://ks.wjx.top/vm/hI37dIJ.aspx">第三章 结构化方法 B卷</a></div></h2><h2 id="-4"><a href="#-4" class="headerlink" title=""></a><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://ks.wjx.top/vm/OrX8n3Z.aspx">第4.5章 UML+RUPA卷</a></div></h2><div class="hide-block"><button type="button" class="hide-button" style="background-color: orange;">查看答案    </button><div class="hide-content"><p><img class="caishenpic lala" src="http://rm5i494z0.hn-bkt.clouddn.com/article/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/4%E3%80%815%E7%AB%A0.jpg"></p></div></div><h2 id="-5"><a href="#-5" class="headerlink" title=""></a><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://ks.wjx.top/vm/O6X8rB8.aspx">第4.5章 UML+RUPB卷</a></div></h2><div class="hide-block"><button type="button" class="hide-button" style="background-color: orange;">查看答案    </button><div class="hide-content"><p><img class="caishenpic lala" src="http://rm5i494z0.hn-bkt.clouddn.com/article/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/4%E3%80%815%E7%AB%A0B%E5%8D%B7.jpg"></p></div></div><h2 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h2><p>软件测试技术分为两大类：白盒测试(结构测试技术) <span class='p red'>路径测试技术，依据是程序的逻辑结构</span> ;<br>黑盒测试技术（功能测试技术）： <span class='p red'>事务处理技术、状态测试技术、定义域测试技术、依据是软件行为描述</span> ;</p><details class="folding-tag" orange><summary> 查看内容 </summary>              <div class='content'>              <h3 id="路径测试技术，的要点："><a href="#路径测试技术，的要点：" class="headerlink" title="路径测试技术，的要点："></a>路径测试技术，的要点：</h3><p>（1） 采用控制流图来表述测试程序模型，揭示程序中控制结构<br>（2） 通过合理地选择一组</p><h4 id="控制流程图"><a href="#控制流程图" class="headerlink" title="控制流程图"></a>控制流程图</h4><div class="table-container"><table><thead><tr><th>基本元素</th><th>表示</th><th>属性</th></tr></thead><tbody><tr><td>过程块</td><td>一组程序语句</td><td>一进一出</td></tr><tr><td>判定</td><td>程序点</td><td>一进多出</td></tr><tr><td>节点</td><td>程序点</td><td>多进一出</td></tr><tr><td>链</td><td>过程块</td><td>无</td></tr></tbody></table></div><h4 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h4><p>(1)覆盖覆盖（px）：执行所有可能穿过 <span class='p red'>程序控制流程快的路径</span>（最强的测试度量）<br>(2)语句覆盖（p1）：执行程序中 <span class='p red'>所以语句</span> 一次。<br>(3)分支覆盖（p2）:将程序中每一个分支执行一次。 <span class='p red'>100%覆盖</span><br>(4)条件覆盖：每个判定中的所有可能的<span class='p red'>条件取值</span>至少执行一次。<br>(5)条件覆盖与条件组合覆盖</p><h4 id="例题21-10-38"><a href="#例题21-10-38" class="headerlink" title="例题21.10.38"></a>例题21.10.38</h4><p><img  src="http://rm5i494z0.hn-bkt.clouddn.com/article/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/21.38.png"></p><details class="folding-tag" ><summary> 查看答案 </summary>              <div class='content'>              <p><img  src="http://rm5i494z0.hn-bkt.clouddn.com/article/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/21.10.38.png"></p>              </div>            </details>              </div>            </details>]]></content>
      
      
      
        <tags>
            
            <tag> 问卷星 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具网站</title>
      <link href="/posts/92edcf8f.html"/>
      <url>/posts/92edcf8f.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/posts/e593433d.html" data-pjax-state="">🥬Hexo博客搭建基础教程(一)</a></li><li><a href="/posts/4aa2d85f.html" data-pjax-state="">🍒Hexo博客搭建基础教程(二)</a></li><li><a href="/posts/3451f874.html" data-pjax-state="">🥪Hexo博客搭建基础教程(三)</a></li><li><a href="/posts/eec9786.html" data-pjax-state="">🍀博客魔改教程总结(一)</a></li><li><a href="/posts/5389e93f.html" data-pjax-state="">🍚博客魔改教程总结(二)</a></li><li><a href="/posts/2d7ac914.html" data-pjax-state="">🎋博客魔改教程总结(三)</a> ⇦当前位置🪂</li><li><a href="/posts/d739261b.html" data-pjax-state="">🥕博客魔改教程总结(四)</a></li><li><a href="/posts/d1927166.html" data-pjax-state="">🍊博客魔改教程总结(五)</a></li><li><a href="/posts/489d3914.html" data-pjax-state="">🧄博客魔改教程总结(六)</a></li><li><a href="/posts/9ac969bb.html" data-pjax-state="">🎨综合美化模块教程</a></li></ol><!-- !['https://github.com/blinkfox/hexo-theme-matery'](/img/favicon.ico) --><html><body style="display: flex ; flex-direction: column;"><div style="display: flex ; flex-direction: row;margin-left:40px"><div style=" width: 128;height: 128;margin: 20px ;">            <a href='https://sketch.metademolab.com/canvas'>                <img src="https://sketch.metademolab.com/favicon.ico" alt="图片鬼畜" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://www.logomaker.com.cn/'>                <img src="https://www.logomaker.com/favicon.ico" alt="图标设计" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://benisland.neocities.org/petpet/'>                <img src="https://sketch.metademolab.com/favicon.ico" alt="摸头图片" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://www.thinkcmf.com/font/font_awesome/icons.html'>                <img src="https://www.thinkcmf.com/themes/simplecmf3/public/assets/font_search/ico/favicon.ico" alt="简洁图标" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://wallhaven.cc/search?q=woman&categories=110&purity=100&sorting=relevance&order=desc&page=16'>                <img src="https://wallhaven.cc/favicon.ico" alt="高能壁纸" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://animate.style/'>                <img src="https://animate.style/img/favicon.ico" alt="动画样式" style="zoom:50%;" />            </a></div></div><!-- 列分割线 --><div style="display: flex ; flex-direction: row;margin-left:40px"><div style=" width: 128;height: 128;margin: 20px ;">            <a href='https://www.runoob.com/'>                <img src="https://www.runoob.com/favicon.ico" alt="菜鸟教程" style="zoom:50%;" />            </a></div><!-- 分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='http://www.ico51.cn/'>                <img src="http://www.ico51.cn/favicon.ico" alt="生成ico" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://unsplash.com/'>                <img src="https://unsplash.com/favicon.ico" alt="摄影壁纸" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://www.neea.edu.cn/'>                <img src="https://fshby.github.io/fshby01/image/LOGO/quanguo.png" alt="教育考试网" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='http://wanyouw.com/sites/133.html'>                <img src="http://wanyouw.com/favicon.ico" alt="万千集合站" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://magicstudio.com/magiceraser/editor'>                <img src="https://magicstudio.com/favicon.ico" alt="专业去水印" style="zoom:50%;" />            </a></div></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 评论功能</title>
      <link href="/posts/9c4dddac.html"/>
      <url>/posts/9c4dddac.html</url>
      
        <content type="html"><![CDATA[<h2 id="来必力"><a href="#来必力" class="headerlink" title="来必力"></a>来必力</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>                            </div>            </details><h2 id="valine"><a href="#valine" class="headerlink" title="valine"></a>valine</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <p>valine评论是基于<a href="">LeanCloud</a>  ，还有一个文章阅读次数功能也是用LeanCloud，两者会有一点冲突<br><a href="https://blog.csdn.net/m0_70274918/article/details/124588151">参考链接</a><br>解决方案：<br><a href="https://cloud.tencent.com/developer/article/1934191">参考方案</a><br>文章禁止评论：<br>在文章头部添加 <code>comment： false</code></p>              </div>            </details><h2 id="Twikoo"><a href="#Twikoo" class="headerlink" title="Twikoo"></a>Twikoo</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <p>参考文字教程：<br><a href="https://twikoo.js.org/quick-start.html">官方：Twikoo文档-针对Vercel的部署</a><br>视频教程：<br><a href="https://www.bilibili.com/video/BV1Re4y1H7g8/">安知鱼：23.butterfly配置twikoo评论系统</a>  </p>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 来必力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随想</title>
      <link href="/posts/41acf799.html"/>
      <url>/posts/41acf799.html</url>
      
        <content type="html"><![CDATA[<h2 id="你好-005"><a href="#你好-005" class="headerlink" title="你好 005"></a>你好 005</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 好主意 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活</title>
      <link href="/posts/a535711.html"/>
      <url>/posts/a535711.html</url>
      
        <content type="html"><![CDATA[<h2 id="你好-004"><a href="#你好-004" class="headerlink" title="你好 004"></a>你好 004</h2><div name="我是墙" id="recent-posts">text_color: black # 文字默认颜色text_hover_color: white # 文字鼠标悬浮颜色background_color: "#f2f2f2" # 文字背景默认颜色background_hover_color: "#b30070" # 文字背景悬浮颜色  <!-- id=>type  recent-posts=>name    -->  <div name="我是画框">    <div name="我是纸">      <!--这里通过js挂载magnet，也就是画画-->    </div>  </div></div>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/posts/79666db.html"/>
      <url>/posts/79666db.html</url>
      
        <content type="html"><![CDATA[<h2 id="你好-004"><a href="#你好-004" class="headerlink" title="你好 004"></a>你好 004</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法自带格式</title>
      <link href="/posts/d2d7725.html"/>
      <url>/posts/d2d7725.html</url>
      
        <content type="html"><![CDATA[<p>前言：<br><span class='p green'>参考文献</span>：<a href="https://www.fomal.cc/posts/2013454d.html">猕猴桃的博客</a>  <a href="https://www.jianshu.com/p/86e7fa33de8e">简书</a>  </p><h1 id="特效标签"><a href="#特效标签" class="headerlink" title="特效标签"></a>特效标签</h1><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate__zoomIn,5s,5s,100,10 %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span><br><span class="line">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endwow %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% wow animate__zoomIn,5s,5s,100,10 %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span><br><span class="line">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endwow %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% wow animate__slideInRight,5s,5s %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span><br><span class="line">`slideInRight`动画效果，持续`5s`，延时`5s`。</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endwow %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% wow animate__heartBeat,,5s,,10 %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span><br><span class="line">`heartBeat`动画效果，延时`5s`，重复`10`次。</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="标题-01"><a href="#标题-01" class="headerlink" title="标题 01"></a>标题 01</h1><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3><h4 id="H4"><a href="#H4" class="headerlink" title="H4"></a>H4</h4><h5 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h5><h6 id="H6"><a href="#H6" class="headerlink" title="H6"></a>H6</h6><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><h1 id="段落首航缩进"><a href="#段落首航缩进" class="headerlink" title="段落首航缩进"></a>段落首航缩进</h1><div class="tabs" id="段落首航缩进"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#段落首航缩进-1">示例</button></li><li class="tab"><button type="button" data-href="#段落首航缩进-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="段落首航缩进-1"><p>&ensp;&ensp;使用全角空格实现段落缩进<br>&ensp;&ensp;&ensp;&ensp;使用半角空格是段落缩进</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="段落首航缩进-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[参考链接](https://blog.csdn.net/manchan4869/article/details/128699543)</span><br><span class="line">&amp;ensp;&amp;ensp;使用全角空格实现段落缩进</span><br><span class="line">&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;使用半角空格是段落缩进</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<del>删除</del>线演示</p><font size = 5>5 号字</font><font face="黑体">黑体</font><font color=blue>蓝色</font><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线演示&lt;/u&gt;</span><br><span class="line"></span><br><span class="line">文字**加粗**演示</span><br><span class="line"></span><br><span class="line">文字*斜体*演示</span><br><span class="line"></span><br><span class="line">文本`高亮`演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line">&lt;font size = 5&gt;5 号字&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;黑体&quot;&gt;黑体&lt;/font&gt;</span><br><span class="line">&lt;font color=blue&gt;蓝色&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=MistyRose&gt;这里的背景色是：MistyRosen，此处输入任意想输入的内容&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="文本链接"><a href="#文本链接" class="headerlink" title="文本链接"></a>文本链接</h1><div class="tabs" id="文本链接"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#文本链接-1">示例</button></li><li class="tab"><button type="button" data-href="#文本链接-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="文本链接-1"><ol><li><a href="http://localhost:4000/posts/d2d7725.html">Markdown语法</a>  </li><li><a href="/posts/ad4f1e09.html" title="⇦当前位置🪂">🥬c++教程上</a></li></ol><ol><li><a href="/posts/761adea4.html" title="Windows技巧">Windows技巧</a></li><li><a href="/posts/761adea4.html" title="md文章跳转">md文章跳转</a>  </li><li><a href="#jump-id">文章内部跳转</a><span id='jump-id'>⇦当前位置🪂</span></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="文本链接-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. [Markdown语法](http://localhost:4000/posts/d2d7725.html)  </span><br><span class="line">2.    </span><br><span class="line">[🥬c++教程上][1]</span><br><span class="line">[1]:/posts/ad4f1e09.html  &quot;⇦当前位置🪂&quot;</span><br><span class="line">3. &#123;% post_link Windows技巧%&#125;</span><br><span class="line">4. &#123;% post_link Windows技巧 ⇦当前位置🪂 %&#125;  </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="行内图片"><a href="#行内图片" class="headerlink" title="行内图片"></a>行内图片</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><p>这是 <img no-lazy class="inline" src="http://www.fshby.top/article/%E4%B8%83%E7%89%9B%E4%BA%91/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8.png?e=1669829201&token=zdXt7o1r40DTFSoqCVkr5MsHd__42I6tayUXGrCY:BPYceniJzSAQwS-DuZJ0M92AtNo=" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="http://www.fshby.top/article/%E4%B8%83%E7%89%9B%E4%BA%91/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8.png?e=1669829201&token=zdXt7o1r40DTFSoqCVkr5MsHd__42I6tayUXGrCY:BPYceniJzSAQwS-DuZJ0M92AtNo=" style="height:40px;"/> 一段话。</p><h2 id="单张图片"><a href="#单张图片" class="headerlink" title="单张图片"></a>单张图片</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="http://www.fshby.top/article/%E4%B8%83%E7%89%9B%E4%BA%91/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8.png?e=1669829201&token=zdXt7o1r40DTFSoqCVkr5MsHd__42I6tayUXGrCY:BPYceniJzSAQwS-DuZJ0M92AtNo=" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage http://www.fshby.top/article/%E4%B8%83%E7%89%9B%E4%BA%91/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8.png?e=1669829201&amp;token=zdXt7o1r40DTFSoqCVkr5MsHd__42I6tayUXGrCY:BPYceniJzSAQwS-DuZJ0M92AtNo= %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage http://www.fshby.top/article/%E4%B8%83%E7%89%9B%E4%BA%91/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8.png?e=1669829201&amp;token=zdXt7o1r40DTFSoqCVkr5MsHd__42I6tayUXGrCY:BPYceniJzSAQwS-DuZJ0M92AtNo=, height=40px %&#125; 一段话。</span><br><span class="line">## 单张图片</span><br><span class="line">&#123;% image http://www.fshby.top/article/%E4%B8%83%E7%89%9B%E4%BA%91/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8.png?e=1669829201&amp;token=zdXt7o1r40DTFSoqCVkr5MsHd__42I6tayUXGrCY:BPYceniJzSAQwS-DuZJ0M92AtNo=, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="强制换行"><a href="#强制换行" class="headerlink" title="强制换行"></a>强制换行</h2><p>行尾连续两个空格</p><h2 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><p><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /></p><h1 id="在线图片"><a href="#在线图片" class="headerlink" title="在线图片"></a>在线图片</h1><p><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;/assets/pusheencode.webp&quot; alt=&quot;示例图片&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"># 在线图片</span><br><span class="line">![code](https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><div class="table-container"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">| 项目标号  | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---  |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><script type="math/tex; mode=display">\Gamma(z)= \int_0^\infty t^{z-1}e^{-t}dt.</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)= \int_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="上标签"><a href="#上标签" class="headerlink" title="上标签"></a>上标签</h1><div class="tabs" id="教程"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#教程-1">示例</button></li><li class="tab"><button type="button" data-href="#教程-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="教程-1"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="教程-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h1><div class="tabs" id="行内文本样式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#行内文本样式-1">示例</button></li><li class="tab"><button type="button" data-href="#行内文本样式-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="行内文本样式-1"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本样式-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line">2. 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line">3. 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line">4. 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line">5. 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line">6. 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h1><div class="tabs" id="行内文本-span"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#行内文本-span-1">示例</button></li><li class="tab"><button type="button" data-href="#行内文本-span-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="行内文本-span-1"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本-span-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 彩色文字</span><br><span class="line">  在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line">- 超大号文字</span><br><span class="line">  文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">  &#123;% span center logo large, Volantis %&#125;</span><br><span class="line">  &#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h1><div class="tabs" id="时间轴-span"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#时间轴-span-1">示例</button></li><li class="tab"><button type="button" data-href="#时间轴-span-2">源码</button></li><li class="tab"><button type="button" data-href="#时间轴-span-3">标签语法</button></li><li class="tab"><button type="button" data-href="#时间轴-span-4">配置参数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="时间轴-span-1"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="时间轴-span-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [2.6.6 -&gt; 3.0](https://github.com/volantis-x/hexo-theme-volantis/releases) --&gt;</span><br><span class="line"></span><br><span class="line">1. 如果有 `hexo-lazyload-image` 插件，需要删除并重新安装最新版本，设置 `lazyload.isSPA: true`。</span><br><span class="line">2. 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 `use_cdn: true` 则需要删除。</span><br><span class="line">3. 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line">4. 2.x 版本的置顶 `top: true` 改为了 `pin: true`，并且同样适用于 `layout: page` 的页面。</span><br><span class="line">5. 如果使用了 `hexo-offline` 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [2.6.3 -&gt; 2.6.6](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [2.6.2 -&gt; 2.6.3](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --&gt;</span><br><span class="line"></span><br><span class="line">1. 全局搜索 `seotitle` 并替换为 `seo_title`。</span><br><span class="line">2. group 组件的索引规则有变，使用 group 组件的文章内，`group: group_name` 对应的组件名必须是 `group_name`。</span><br><span class="line">2. group 组件的列表名优先显示文章的 `short_title` 其次是 `title`。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="时间轴-span-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="时间轴-span-4"><p>1.<code>title</code>:标题/时间线<br>2.<code>color</code>:timeline颜色:default(留空) / blue / pink / red / purple / orange / green</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="折叠框"><a href="#折叠框" class="headerlink" title="折叠框"></a>折叠框</h1><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><h1 id="分栏"><a href="#分栏" class="headerlink" title="分栏"></a>分栏</h1><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例</button></li><li class="tab"><button type="button" data-href="#分栏-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1"><i class="icon]"></i>[Tab caption] [</button></li><li class="tab"><button type="button" data-href="#test1-2"><i class="icon]"></i>[Tab caption] [</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p>Any content (support inline tags too).</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p>Any content (support inline tags too).</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="诗词标签"><a href="#诗词标签" class="headerlink" title="诗词标签"></a>诗词标签</h1><div class="tabs" id="诗词标签"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#诗词标签-1">示例</button></li><li class="tab"><button type="button" data-href="#诗词标签-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="诗词标签-1"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="诗词标签-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="隐藏块"><a href="#隐藏块" class="headerlink" title="隐藏块"></a>隐藏块</h1><div class="tabs" id="隐藏块"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#隐藏块-1">示例</button></li><li class="tab"><button type="button" data-href="#隐藏块-2">源码</button></li><li class="tab"><button type="button" data-href="#隐藏块-3">标签语法</button></li><li class="tab"><button type="button" data-href="#隐藏块-4">参数配置</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="隐藏块-1"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="fshby.top/../../img/城市日落.jpg" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="隐藏块-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line">&lt;img src=&quot;fshby.top/../../img/城市日落.jpg&quot; alt=&quot;image (1)&quot; alt=&quot;image (1)&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="隐藏块-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="隐藏块-4"><p>content：要隐藏的内容<br>display：展示前按钮显示的文字（可选）<br>bg：按钮的背景颜色（可选）<br>color：按钮显示的文字的颜色（可选）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏  %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="气泡注释"><a href="#气泡注释" class="headerlink" title="气泡注释"></a>气泡注释</h1><div class="tabs" id="气泡注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#气泡注释-1">示例</button></li><li class="tab"><button type="button" data-href="#气泡注释-2">标签语法</button></li><li class="tab"><button type="button" data-href="#气泡注释-3">参数配置</button></li><li class="tab"><button type="button" data-href="#气泡注释-4">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="气泡注释-1"><p><span class="bubble-content">气泡注释 </span><span class="bubble-notation"><span class="bubble-item" style="background-color: blue;"> 一种文章详细注释 </span>&lt;/span&gt;<br>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如 CSS 的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span>&lt;/span&gt;，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局”，用来为盒状模型提供最大的灵活性”</span>&lt;/span&gt;，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span>&lt;/span&gt;，animation 的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span>&lt;/span&gt;写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span>&lt;/span&gt;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="气泡注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="气泡注释-3"><p><code>content:</code> 注释词汇<br><code>otation:</code> 悬停显示的注解内容<br><code>background-color:</code> 可选，气泡背景色。默认为“#71a4e3”</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="气泡注释-4"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如 CSS 的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation 的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="引用文献"><a href="#引用文献" class="headerlink" title="引用文献"></a>引用文献</h1><p>Akilar の糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用 Hexo 框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly 主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了 Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个 volantis 的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly 主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><h1 id="mermaid图表"><a href="#mermaid图表" class="headerlink" title="mermaid图表"></a>mermaid图表</h1><h2 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">stateDiagram-v2[*] --> StillStill --> [*]Still --> MovingMoving --> StillMoving --> CrashCrash --> [*]</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stateDiagram-v2</span><br><span class="line">[*] --&gt; Still</span><br><span class="line">Still --&gt; [*]</span><br><span class="line">Still --&gt; Moving</span><br><span class="line">Moving --&gt; Still</span><br><span class="line">Moving --&gt; Crash</span><br><span class="line">Crash --&gt; [*]</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">sequenceDiagramAlice->>John: Hello John, how are you?John-->>Alice: Great!Alice-)John: See you later!</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">John--&gt;&gt;Alice: Great!</span><br><span class="line">Alice-)John: See you later!</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">graph TDStart --> StopStart --> next</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">Start --&gt; Stop</span><br><span class="line">Start --&gt; next</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">erDiagramCUSTOMER ||--o{ ORDER : placesORDER ||--|{ LINE-ITEM : containsCUSTOMER }|..|{ DELIVERY-ADDRESS : uses</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">erDiagram</span><br><span class="line">CUSTOMER ||--o&#123; ORDER : places</span><br><span class="line">ORDER ||--|&#123; LINE-ITEM : contains</span><br><span class="line">CUSTOMER &#125;|..|&#123; DELIVERY-ADDRESS : uses</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">classDiagramAnimal <|-- DuckAnimal <|-- FishAnimal <|-- ZebraAnimal : +int ageAnimal : +String genderAnimal: +isMammal()Animal: +mate()class Duck{+String beakColor+swim()+quack()}class Fish{-int sizeInFeet-canEat()}class Zebra{+bool is_wild+run()}</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">Animal &lt;|-- Duck</span><br><span class="line">Animal &lt;|-- Fish</span><br><span class="line">Animal &lt;|-- Zebra</span><br><span class="line">Animal : +int age</span><br><span class="line">Animal : +String gender</span><br><span class="line">Animal: +isMammal()</span><br><span class="line">Animal: +mate()</span><br><span class="line">class Duck&#123;</span><br><span class="line">+String beakColor</span><br><span class="line">+swim()</span><br><span class="line">+quack()</span><br><span class="line">&#125;</span><br><span class="line">class Fish&#123;</span><br><span class="line">-int sizeInFeet</span><br><span class="line">-canEat()</span><br><span class="line">&#125;</span><br><span class="line">class Zebra&#123;</span><br><span class="line">+bool is_wild</span><br><span class="line">+run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="旅程图"><a href="#旅程图" class="headerlink" title="旅程图"></a>旅程图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">journeytitle My working daysection Go to workMake tea: 5: MeGo upstairs: 3: MeDo work: 1: Me, Catsection Go homeGo downstairs: 5: MeSit down: 7: Me</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">journey</span><br><span class="line">title My working day</span><br><span class="line">section Go to work</span><br><span class="line">Make tea: 5: Me</span><br><span class="line">Go upstairs: 3: Me</span><br><span class="line">Do work: 1: Me, Cat</span><br><span class="line">section Go home</span><br><span class="line">Go downstairs: 5: Me</span><br><span class="line">Sit down: 7: Me</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h2> <div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">gantttitle A Gantt DiagramdateFormat  YYYY-MM-DDsection SectionA task           :a1, 2014-01-01, 3dAnother task     :after a1  , 20djava     :5dsection AnotherTask in sec      :2014-01-12  , 12danother task      : 24d</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">title A Gantt Diagram</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line">section Section</span><br><span class="line">A task           :a1, 2014-01-01, 3d</span><br><span class="line">Another task     :after a1  , 20d</span><br><span class="line">java     :5d</span><br><span class="line">section Another</span><br><span class="line">Task in sec      :2014-01-12  , 12d</span><br><span class="line">another task      : 24d</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">pie title 饮食统计"蔬菜" : 38"肉蛋" : 85"水果" : 15"有机蛋白" : 45</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pie title 饮食统计</span><br><span class="line">&quot;蔬菜&quot; : 38</span><br><span class="line">&quot;肉蛋&quot; : 85</span><br><span class="line">&quot;水果&quot; : 15</span><br><span class="line">&quot;有机蛋白&quot; : 45</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="公式格式"><a href="#公式格式" class="headerlink" title="公式格式"></a>公式格式</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><script type="math/tex; mode=display">\begin{Bmatrix}   a & b \\\\   c & d\end{Bmatrix}</script><script type="math/tex; mode=display">\begin{CD}   A @>a>> B \\@VbVV @AAcA \\   C @= D\end{CD}</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"></span><br><span class="line">\begin&#123;Bmatrix&#125;</span><br><span class="line">   a &amp; b \\\\</span><br><span class="line">   c &amp; d</span><br><span class="line">\end&#123;Bmatrix&#125;</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">\begin&#123;CD&#125;</span><br><span class="line">   A @&gt;a&gt;&gt; B \\</span><br><span class="line">@VbVV @AAcA \\</span><br><span class="line">   C @= D</span><br><span class="line">\end&#123;CD&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="横向流程图"><a href="#横向流程图" class="headerlink" title="横向流程图"></a>横向流程图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">graph LRA[方形] -->B(圆角)    B --> C{条件a}    C -->|a=1| D[结果1]    C -->|a=2| E[结果2]    F[横向流程图]</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><pre class="mermaid">graph TDA(开始) --> B[存储变量及用户界面]B --> C[用户根据界面提示输入]</pre><pre class="mermaid">graph LRA(开始) -->B[存储变量及用户界面]     B --> C{条件a}    C -->|a=1| D[结果1]    C -->|a=2| E[结果2]    F[横向流程图]</pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
