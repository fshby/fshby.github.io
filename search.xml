<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>性能测试实战</title>
      <link href="/posts/4e096d54.html"/>
      <url>/posts/4e096d54.html</url>
      
        <content type="html"><![CDATA[<h2 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h2><p>搭建python环境<br>python   —cmd命令，显示版本号<br> exit()   —退出python<br>运行python脚本<br>问题：缺少第三方包报错：<br>ModuleNotFoundError: No module named ‘ pymysqL<br>解决问题：安装第三方包：<br>pip install pymysql</p><h2 id="jmeter脚本"><a href="#jmeter脚本" class="headerlink" title="jmeter脚本"></a>jmeter脚本</h2><p>使用jmeter脚本批量添加用户<br>链接JDBC数据池</p><ul><li>遇到问题：<div class="tip error"><p>jmeter链接JDBC报错:Cannot create PoolableConnectionFactory </p></div>解决方法：<a href="https://www.cnblogs.com/mingmingming/p/16308880.html">参考</a><br>在database URL链接后添加<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?useSSH =false</span><br></pre></td></tr></table></figure><h2 id="SQL脚本"><a href="#SQL脚本" class="headerlink" title="SQL脚本"></a>SQL脚本</h2></li></ul><ol><li>查看重复手机号<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> litemall_user.mobile,<span class="built_in">COUNT</span>(litemall_user.mobile) <span class="keyword">FROM</span> litemall_user </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> litemall_user.mobile</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(litemall_user.mobile)<span class="operator">&gt;</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li>删除重复数据（手机号） <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> litemall_user </span><br><span class="line"><span class="keyword">WHERE</span> litemall_user.mobile <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">SELECT</span> a.m <span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> mobile m <span class="keyword">FROM</span> `litemall_user` <span class="keyword">GROUP</span> <span class="keyword">BY</span> litemall_user.mobile <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(litemall_user.mobile)<span class="operator">&gt;</span><span class="number">1</span>) a</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li>使用存储函数为用户添加地址<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> if <span class="keyword">exists</span> add_address; <span class="comment">-- 删除存储函数</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> if <span class="keyword">exists</span> selectUid; <span class="comment">-- 删除存储函数</span></span><br><span class="line"></span><br><span class="line">delimiter $$ <span class="comment">-- 分隔符</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> add_address(<span class="keyword">in</span> uid <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    if uid <span class="operator">!=</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `litemall`.`litemall_address` (`id`, `name`, `user_id`, `province`, `city`, `county`, `address_detail`, `area_code`, `tel`, `is_default`, `add_time`, `update_time`)</span><br><span class="line">    <span class="keyword">VALUES</span> (uid, <span class="string">&#x27;郑堃逢&#x27;</span>, uid, <span class="string">&#x27;河南省&#x27;</span>, <span class="string">&#x27;南阳市&#x27;</span>, <span class="string">&#x27;长安区&#x27;</span>, <span class="string">&#x27;东门101号&#x27;</span>, <span class="string">&#x27;130102&#x27;</span>, <span class="string">&#x27;13282135001&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2022-05-05 18:32:30&#x27;</span>, <span class="string">&#x27;2022-05-05 18:32:34&#x27;</span>);</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">    <span class="keyword">SELECT</span> uid;</span><br><span class="line">    <span class="keyword">END</span> if;</span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line">delimiter; <span class="comment">-- 分隔符</span></span><br><span class="line"></span><br><span class="line">delimiter $$ <span class="comment">-- 分隔符</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> selectUid()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">declare</span> i <span class="type">int</span>;</span><br><span class="line">    <span class="keyword">declare</span> uid <span class="type">int</span>;</span><br><span class="line">    <span class="keyword">set</span> i <span class="operator">=</span> <span class="number">2000</span>;  <span class="comment">-- 第一个创建的用户编号-- 为已有用户添加地址</span></span><br><span class="line">    WHILE i<span class="operator">&lt;=</span><span class="number">2001</span> DO  <span class="comment">-- &lt; =数字   数字是创建的最大用户ID</span></span><br><span class="line">        <span class="keyword">set</span> uid <span class="operator">=</span> (<span class="keyword">SELECT</span> u.id <span class="keyword">FROM</span> litemall_user u <span class="keyword">WHERE</span> u.id <span class="operator">=</span> i);</span><br><span class="line">        <span class="keyword">set</span> uid <span class="operator">=</span> IFNULL(uid,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">CALL</span> add_address(uid);</span><br><span class="line">        <span class="keyword">set</span> i <span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line">delimiter; <span class="comment">-- 分隔符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> selectUid;</span><br></pre></td></tr></table></figure></li></ol><h2 id="查询sql将结果导出为csv文件"><a href="#查询sql将结果导出为csv文件" class="headerlink" title="查询sql将结果导出为csv文件"></a>查询sql将结果导出为csv文件</h2><p>查询结果导出为csv文件,在jmeter文件中导入配置csv中<br><code>注意</code>：CSV文件改为常规格式</p><ol><li>查询有效用户和对应的收获地址<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> u.username ,a.id <span class="keyword">FROM</span> litemall_user u,litemall_address a</span><br><span class="line"><span class="keyword">WHERE</span> u.id <span class="operator">=</span> a.user_ id</span><br><span class="line"><span class="keyword">and</span> u.id <span class="operator">&gt;=</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure></li><li>查询商品信息<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> g.id, p.id <span class="keyword">FROM</span> litemall_goods g,litemall_goods_product p</span><br><span class="line"><span class="keyword">WHERE</span> g.id <span class="operator">=</span> p.goods_id</span><br><span class="line"><span class="keyword">and</span> g.deleted <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li>重新添加时删除表数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除对用户添加的地址</span></span><br><span class="line"><span class="keyword">DELETE</span> a <span class="keyword">FROM</span> litemall_address a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> litemall_user u <span class="keyword">ON</span> a.user_id <span class="operator">=</span> u.id</span><br><span class="line"><span class="keyword">WHERE</span> a.user_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除添加的用户</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> litemall_user </span><br><span class="line"><span class="keyword">WHERE</span>  id<span class="operator">&gt;</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="性能测试用例执行："><a href="#性能测试用例执行：" class="headerlink" title="性能测试用例执行："></a>性能测试用例执行：</h2><ol><li>TPS:<br> TPS 20/s,<br> 设置常量吞吐定时器为1200   —20<em>60<br> <code>未达到既定TPS吞吐量时</code>，确定是否是<code>服务器的原因</code>造成用户等待，升级服务器后，接口的TPS仍然不能达到即定值，则接口<code>不符合需求</code><br> <em>*TPS随人数的增加而上升</em></em></li><li>CPU： 80%±5</li><li>内存利用率： 80%±5</li><li>流量：<br>找到自己服务的带宽，确定占用数量，找出空余数量，判断是否需要等待</li></ol><h3 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h3><ol><li>慢查询<br>修改慢查询阀值<br>查看日志<br>找到sql语句代入查询语句</li><li>缓存命中率</li><li>数据池连接数</li><li>mysql锁</li></ol><p>压测机资源（时刻监测本机的资源占用，避免本机宕机导致压测无效）</p><h3 id="JVM-监测-监测接口内存溢出"><a href="#JVM-监测-监测接口内存溢出" class="headerlink" title="JVM 监测 - -监测接口内存溢出"></a>JVM 监测 - -监测接口内存溢出</h3><p>有内存使用也有缓慢的内存释放，<br>断崖式释放    —系统崩溃<br>内存溢出   —系统停摆退出</p>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能测试jmeter</title>
      <link href="/posts/19c33d55.html"/>
      <url>/posts/19c33d55.html</url>
      
        <content type="html"><![CDATA[<h2 id="性能测试："><a href="#性能测试：" class="headerlink" title="性能测试："></a>性能测试：</h2><p>● 后台处理程序的性能(代码性能)<br>● 中间件、数据库、架构设计等是否存在瓶颈<br>● 服务器资源消耗(CPU、内存、磁盘、网络)</p><h3 id="性能测试目的"><a href="#性能测试目的" class="headerlink" title="性能测试目的"></a>性能测试目的</h3><ol><li>评估当前系统能力   —验收第三方提供的软件，获取关键的性能指标，与其他类似产品进行比较</li><li>寻找瓶颈，让开发进行优化性能</li><li>评估软件是否能够满足未来需求    —根据用户量增长预估将要达到的指标</li></ol><h3 id="性能测试与功能测试的对比与关系"><a href="#性能测试与功能测试的对比与关系" class="headerlink" title="性能测试与功能测试的对比与关系"></a>性能测试与功能测试的对比与关系</h3><ol><li>功能与性能相辅相成</li><li>功能测试（正向、逆向）→性能测试（时间、资源）</li></ol><h3 id="性能测试策略"><a href="#性能测试策略" class="headerlink" title="性能测试策略"></a>性能测试策略</h3><ol><li>基准测试<br>狭义：单用户测试获取单用户运行时的各项性能指标<br>广义： 通过基准测试（建立已知性能水平）→在系统的软硬件发生变化之后→ 再通过基准测试（确定变化对性能的影响） —版本优化性能应该逐优<br>用途：并发与场景测试的参考依据、确定环境变化的影响、为优化提供参考指标</li><li>负载测试<br>在满足某个指标的情况下，测试系统的最大负载量<br>负载：向服务器发送请求数量越多，负载越高，逐步增加，找到最<code>大负载量与最优负载量</code></li><li>稳定测试<br>服务器稳定运行，长时间测，时长一般为1天或1周</li><li>其他： 并发测试、压力测试（大量数据）、容量测试（极限值）</li></ol><h3 id="性能测试指标"><a href="#性能测试指标" class="headerlink" title="性能测试指标"></a>性能测试指标</h3><ol><li>响应时间    — 客户端发送一个请求到，服务器返回请求，整个过程所耗时间<br>响应时间= 网络时间+程序处理时间</li><li>并发数<br>1) 系统用户的数量： 系统注册的总用户数<br>2) 在线用户数： 每段时间内访问系统的用户数<br>3) 并发用户数： 某一物理时刻，系统提交请求的用户数   —小接口50并发，中型接口200并发</li><li>吞吐量   —单位时间内处理客户请求的数量<br>1) 业务角度：业务数/天   - -PV（页面天访问次数）与UV（页面天访问人次）<br>2) 网络角度： 字节数/小时、字节数/天<br>3) 技术角度：TPS(每秒事务数—业务请求数)与QPS(每秒查询数—点击数)    — jmerter吞吐量是TPS<ul><li>TPS算法：<br> 简单算法：TPS = 总请求数/总时间<br> 二八算法：TPS = 总请求数80%/总时间20%<br> 根据业务算法：<br> 根据业务算法-峰值压力算法：业务集中时间结合二八算法<br> 根据业务算法-峰值压力算法：TPS = 峰值请求数80%/峰值时间*系数</li></ul></li><li>点击数<br>每秒点击数</li><li>错误率<br>失败业务概率—- 错误率 =（失败业务数/业务数）*100%<br>稳定性较好的系统，其错误率，应该是排队超时引起的，即超时率</li><li>资源利用率<br>CPU不高于80%（±5）<br>内存不高于80%<br>磁盘不高于90%<br>网络不高于80%</li></ol><h2 id="性能测试流程："><a href="#性能测试流程：" class="headerlink" title="性能测试流程："></a>性能测试流程：</h2><ol><li>性能测试需求分析<br>熟悉被测系统    —主业务功能，技术框架<br>明确性能测试内容   —确定关键业务，接口逻辑复杂，数据量庞大的业务<br>明确测试策略       —负载、稳定、并发测试<br>明确性能测试指标    —查找先关资料，平均响应时间1,3,5,8：优→差</li><li>性能测试测试计划</li><li>性能测试测试用例</li><li>测试脚本编写/录制</li><li>建立测试环境     — 软硬件环境，数据准备及网络环境（服务器带宽，网络上限）</li><li>执行测试脚本     — 保证脚本测试通过</li><li>性能测试监控     — CPU、内存、网络、TPS、磁盘IO等</li><li>性能分析和调优  —（开发、数据库管理员[ 慢查询sql ]、网络管理员、性能测试分析人员）<br>调优的难易顺序（易→难）<br>硬件<br>网络<br>应用服务器、数据库等配置问题<br>源代码、数据库<br>系统架构</li><li>性能测试报告总结</li></ol><h2 id="技术选型-—如编程语言java、Python、PHP"><a href="#技术选型-—如编程语言java、Python、PHP" class="headerlink" title="技术选型 —如编程语言java、Python、PHP"></a>技术选型 —如编程语言java、Python、PHP</h2><p>测试工具jmeter与loadrunner<br>loadrunner   -功能强大，笨重，适合较大型项目<br>可以ip欺骗，<br>可以上万并发，jmeter500用户左右<br>loadrunner三大组件<br>1、录制脚本,主要用于录制、调试脚本;<br>2、控制台controller,设置场景参数,管理虚拟用户;<br>3、结果分析器analysis,生成测试报告。</p><h2 id="jmeter"><a href="#jmeter" class="headerlink" title="jmeter"></a>jmeter</h2><p>1) 不支持IP欺骗<br>2) 轻便</p><p>下载线程组插件，将插件放在lib/etc目录下<br>下载插件<br>3 Basic Graphs<br>5 Additional Graphs<br>Custom Thread Groups<br>PertMon (Servers Pertormance Monitoring)</p><p>新增线程组功能<br>Arivalis Thread Group —-Arivalis线程组<br>Cocurreney Thread Group —加密货币线程组<br>FreeFrm Arivalas Thread Group —FreeFrm-Arivalas线程组<br>Sepping Thread Group   —分离线程<br>Utimate Thread Group  —使用线程组</p><h3 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h3><p>bzm Cocurreney Thread Group  —线程组<br>Target Concurrency:  10  — 并发用户<br>Ramp Up Time (min): 5    —用户启动时间     —实际执行时间= 用户执行时间<br>Ramp-Up Steps Count: 3   —  启动步骤<br>Hold Target Rate Time (min): 60 —运行时间默认为minutes</p><h3 id="监听："><a href="#监听：" class="headerlink" title="监听："></a>监听：</h3><p>—Transactions per Second   —每秒事务数<br>Cocurreney Thread Group→监听→jp@gc - Transactions per Second</p><p>—Bytes Throughput Over Time —一段时间内的字节吞吐量<br>Cocurreney Thread Group→监听→Bytes Throughput Over Time</p><p>—PerfMon Metrics Collector —检测服务资源<br>Cocurreney Thread Group→监听→PerfMon Metrics Collector</p><h3 id="安装开启监听包"><a href="#安装开启监听包" class="headerlink" title="安装开启监听包"></a>安装开启监听包</h3><ol><li>在虚拟机中root路径下，打开解压ServerAgent-2.2.3.zip文件，切换到目录下使用命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./tartAgent.sh   --运行tartAgent.sh</span><br></pre></td></tr></table></figure></li><li>配置sercers to Monitor(CPU、Memory、Disks IO、Network I/O)CPU、内存、磁盘IO、网络I/O<br>Host IP ：192. 168.57.133<br>Port ：4444<br>Metric to collect：CPU</li></ol><ul><li>遇到问题：开启监听包时因为端口阻塞报错：<div class="tip error"><p>INFO    2023-05-22 12:43:02.445 [kg.apc.p] (): Binding UDP to 4444<br>ERROR   2023-05-22 12:43:02.485 [kg.apc.p] (): Can’t accept UDP connections<br>java.net.BindException: 地址已在使用</p></div></li><li>解决办法：查询端口进程并终止<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -anp | grep 4444   --查找4444端口进程</span><br><span class="line">sudo kill -9 &lt;PID&gt;   --强制终止进程</span><br></pre></td></tr></table></figure></li></ul><h2 id="分布式："><a href="#分布式：" class="headerlink" title="分布式："></a>分布式：</h2><p>准备环境：<br>一台控制机，多台执行机<br>适配器→关闭虚拟网络<br>关闭防火墙</p><ol><li>修改控制机<br>修改jmeter目录bin文件→jmeter.properties配置文件<br>1)    remote_hosts配置为：执行机ip：端口（1099）     —268行<br>2)   server_port配置一个端口号，-1099<br>3)   server.rmi.ssl.disable配置为：true—345行</li><li>修改执行机<br> 修改jmeter目录bin文件→jmeter.properties配置文件<br>1)    server_port配置一个端口号，-1099<br>2)    server.rmi.ssl.disable配置为：true—345行<br>3)    执行机要以jmeter.server.bat方式打开</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jmeter测试工具</title>
      <link href="/posts/14011744.html"/>
      <url>/posts/14011744.html</url>
      
        <content type="html"><![CDATA[<p>Apache使用java开发的一款测试工具<br>可以对服务器、网络对象模拟巨大的负载<br>缺点：不支持Ip欺骗</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ol><li>解决响应中文乱码报错：<br>打开：bin→jemter.properties文件搜索<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sampleresult.default.encoding</span><br></pre></td></tr></table></figure>更改为：UTF-8<br>文字：zh-CN</li><li>时间误差——上下时间加减一秒是正常的<br>感叹号—- 报错日志<h2 id="测试计划："><a href="#测试计划：" class="headerlink" title="测试计划："></a>测试计划：</h2>用户定义变量   —-键值对，全局变量，<br>一般不用，在线程组里会写自己的组变量</li></ol><h2 id="线程组-—"><a href="#线程组-—" class="headerlink" title="线程组  —"></a>线程组  —</h2><p>—选项，勾选可以独立运行每个线程组，上一个线程结束后才会开启下一个线程<br>—选项 ，函数测试模式   -不断写入文件，记录每一个请求，严重影响性能<br>功能：添加目录或jar包</p><p>线程组窗口</p><p>有域名的项目一般没有端口号</p><h2 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h2><p>聚合报告：  —一般放在测试计划目录下，可以查看所有线程报告<br>线程组→监听器→聚合报告<br>单位ms<br>百分位   —百分比完成时间<br>吞吐量   —衡量接口性能好坏，每秒处理多少事务数<br>TPS       —每秒处理多少事务数</p><h2 id="配置原件"><a href="#配置原件" class="headerlink" title="配置原件"></a>配置原件</h2><p>HTTP请求默认值<br>线程组→配置原件→HTTP请求默认值<br>配置重复性的协议及服务器名称端口等信息   —</p><h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>线程组→取样器→HTTP请求<br>在HTTP请求默认值的基础上填写，接口路径与接口请求方式</p><h3 id="信息头管理器"><a href="#信息头管理器" class="headerlink" title="信息头管理器"></a>信息头管理器</h3><p>线程组→配置原件→信息头管理器<br>添加headers部分的内容，比如token   —时光钥匙登录身份验证存在token中</p><p>时光钥匙：<br>账号：13282135001<br>密码：asdfghjkl123</p><p>路径：<a href="https://data-collect.shiguangkey.com/data-collect/common/receive">https://data-collect.shiguangkey.com/data-collect/common/receive</a></p><h3 id="Cookie管理器"><a href="#Cookie管理器" class="headerlink" title="Cookie管理器"></a>Cookie管理器</h3><p>线程组→配置原件→Cookie管理器<br>登录接口响应头headers，有Cookie信息用于后续步骤的身份验证（带给后面的接口验证），<br>需要Cookie管理器的方式保存headers中的Cookie信息</p><h2 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h2><h3 id="用户自定义变量"><a href="#用户自定义变量" class="headerlink" title="用户自定义变量"></a>用户自定义变量</h3><p>线程组→配置原件→用户自定义变量<br>调用方式：  ${变量名}</p><h3 id="调试取样器（Debug-Sampler）"><a href="#调试取样器（Debug-Sampler）" class="headerlink" title="调试取样器（Debug Sampler）"></a>调试取样器（Debug Sampler）</h3><p>线程组→取样器→调试取样器<br>查看中间扭转参数</p><h2 id="函数助手"><a href="#函数助手" class="headerlink" title="函数助手"></a>函数助手</h2><p><strong>生成函数可直接粘贴在请求名后，用于统计请求</strong></p><ol><li>${__Random(1,100,)}   —随机数字，在最大数与最小数之间生成随机数</li><li><p>${__counter(TRUE,)}     —TRUE，每个用户有自己的计数器；FALSE，使用全局计数器</p></li><li><p>${__time(,)}           —生成时间戳,以ms为单位</p></li><li>${__time(/1000,)}                      —生成时间戳，以s为单位</li><li>${__time(yyy-M-dd hh.mm.ss,)}   —以时间格式显示时间戳，格式中连接符可以随意更改</li><li>$ {__V(变量名$函数体,)}        —字段拼接函数，将变量名与函数拼接成整体函数</li><li>${__setProperty(p_goodsCode,${goodsCode},)}    —设置全局变量</li><li>${__property(p_goodsCode,,)}     —获取全局变量</li></ol><h3 id="用户参数"><a href="#用户参数" class="headerlink" title="用户参数"></a>用户参数</h3><p>解决中文乱码问题—请求→高级→客户端实现→java<br>线程组→前置处理器→用户参数<br>为每一个用户添加参数</p><h3 id="csv数据文件设置"><a href="#csv数据文件设置" class="headerlink" title="csv数据文件设置"></a>csv数据文件设置</h3><p>线程组→配置原件→csv数据文件设置<br>忽略首行  ，TRUE<br>变量名   —3个变量，变量名1，变量名2，变量名3<br>注意：<br>csv文件不能有空格</p><h2 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h2><h3 id="JDBC默认池链接"><a href="#JDBC默认池链接" class="headerlink" title="JDBC默认池链接"></a><a href="https://fshby.top/test_exam/templates/interface6.html#k19">JDBC默认池链接</a></h3><p>首先在测试计划中添加mysql的jar包<br>线程组→配置原件→JDBC请求池链接<br>配置：</p><ol><li>Variable Name for created pool: phms_Mysql   —创建数据库链接变量名</li><li>Database URL: jdbc:mysql://localhost:3306/phms     1. —jdbc:mysql://主机IP:端口号/库名</li><li>JDBC Driver class: com.mysql.jdbc.Diver       —选择mysql的驱动</li><li>Username: root</li><li>Password: 123456</li></ol><h3 id="JDBC请求"><a href="#JDBC请求" class="headerlink" title="JDBC请求"></a>JDBC请求</h3><p>线程组→配置原件→JDBC请求池链接</p><ol><li>Variable Name of Pool declared in JDBC Connection </li><li><ol><li>Configuration: phms_Mysql   —填写数据库链接变量名，</li></ol></li><li>Variable names: name    —创建接收参数的变量名，查询几列数据就用几个变量接收</li></ol><h2 id="逻辑控制器"><a href="#逻辑控制器" class="headerlink" title="逻辑控制器"></a>逻辑控制器</h2><h3 id="循环控制器"><a href="#循环控制器" class="headerlink" title="循环控制器"></a>循环控制器</h3><p>线程组→逻辑控制器→循环控制器<br>可以对线程组内部请求，单独进行循环多次</p><h3 id="IF控制器"><a href="#IF控制器" class="headerlink" title="IF控制器"></a>IF控制器</h3><p>取消勾选：Interpret Condition asVariable Expression?  —勾选时只能用函数写，”${msg}”==”未登录” ${<em> jex3(“${msg}”==”末登录”,} ${</em> groovy(“${msg}”==”未登录”)}，性能更佳</p><h2 id="后置处理器"><a href="#后置处理器" class="headerlink" title="后置处理器"></a>后置处理器</h2><h3 id="XPath提取器"><a href="#XPath提取器" class="headerlink" title="XPath提取器"></a>XPath提取器</h3><p>线程组→后置处理器→XPath提取器</p><ol><li>勾选：Use Tidy (tolerant parser)</li><li>引用名称: 自定义名</li><li>XPath query: <code>//标签名</code></li><li>匹配数字(0代表随机)：-1   #-1展示全部标签，正整数n，展示第n个标签，</li><li>缺省值: 自定义缺省</li></ol><h3 id="正则表达式提取器"><a href="#正则表达式提取器" class="headerlink" title="正则表达式提取器"></a>正则表达式提取器</h3><p>线程组→后置处理器→正则表达式提取器<br><strong>复制一段包含目标值的一段数据，包含左边界与右边界   —-目标值使用’(.<em>?)’或’(.</em>?)’表示</strong></p><ol><li>引用名称:  goodsCode</li><li>正则表达式:”goodsCode”:”( .<em> ?  ）”,”goodsTye”.( . </em> ?),   —-正则表达式中特殊字符（？、[、]、{、}、+、*、.、^等）需要使用转移字符‘\’</li><li>模板:  $1$</li><li>匹配数字(0代表随机) : 1</li><li>缺省值:口使用空默认值<br><strong><code>遇到问题</code></strong>：从response中复制响应内容时‘：’后自动生成空格导致，搜索失败</li></ol><ul><li>注意：<strong><code>从json文件中复制的代码‘：’后会自动添加空格，导致无法搜索或者报错</code></strong></li><li>边界提取器<br>输入提取值的左侧与右侧搜索<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">左边界： &quot;goodsName&quot;:&quot;</span><br><span class="line">右边界：&quot;,</span><br></pre></td></tr></table></figure><h3 id="json提取器"><a href="#json提取器" class="headerlink" title="json提取器"></a>json提取器</h3>线程组→后置处理器→json提取器</li></ul><ol><li>引用名称: goodsName   —变量名</li><li>Names of created variables:  goodsCode</li><li>JSON Path expressions:    $. data. list[] goodsCode   —获取json中数据</li><li>Match No. (0 for Random):1</li><li>Compute concatenation var (suffix_ ALL): </li><li>Default Values:未知.</li></ol><h3 id="BeanShell提样器"><a href="#BeanShell提样器" class="headerlink" title="BeanShell提样器"></a>BeanShell提样器</h3><p>线程组→后置处理器→BeanShell提样器<br>运行脚本  —-可写入运行的函数内容</p><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><h3 id="响应断言"><a href="#响应断言" class="headerlink" title="响应断言"></a>响应断言</h3><p>线程组→断言→响应断言<br>响应文本（包括、相等、匹配、字符串）</p><p><strong><code>注意</code></strong>：从json文件中复制的代码‘：’后会自动添加空格，导致无法搜索或者报错</p><h3 id="大小断言"><a href="#大小断言" class="headerlink" title="大小断言"></a>大小断言</h3><p>线程组→断言→大小断言<br>完整响应   —大于多少字节成功<br>响应头<br>响应的消息体<br>响应代码<br>响应信息</p><h3 id="响应时间断言"><a href="#响应时间断言" class="headerlink" title="响应时间断言"></a>响应时间断言</h3><p>线程组→断言→响应时间断言<br>判断响应操作时间</p><h3 id="json断言"><a href="#json断言" class="headerlink" title="json断言"></a>json断言</h3><p>线程组→断言→json断言</p><ol><li>Assert JSON Path exists:  $.message     —json表达式</li><li>勾选：  Additionally assert value  —-提取出的属性需要判断具体值是什么，不勾选时只要判断是否提取出该属性就行，不需要判断具体值是什么</li><li>Match as regular expression</li><li>Expected Value:</li><li>Expect null     —断言提取的属性为空</li><li>Invert assertion (will fail if above conditions met)   —取反  </li></ol><h2 id="JDBC请求-ForEach提取器"><a href="#JDBC请求-ForEach提取器" class="headerlink" title="JDBC请求+ForEach提取器"></a>JDBC请求+ForEach提取器</h2><p>线程组→逻辑控制器→ForEach提取器<br>输入变量前缀：name    —变量全称为name_#<br>开始循环字段(不包含): 0<br>结束循环字段(含):<br>输出变量名称: username     —生成全局变量username</p><h2 id="JDBC请求-计数器"><a href="#JDBC请求-计数器" class="headerlink" title="JDBC请求+计数器"></a>JDBC请求+计数器</h2><p>线程组→配置原件→计数器<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Starting value1</span><br><span class="line">递增：1</span><br><span class="line">Maximum value： $&#123;name_ # &#125;   --name_ #为JDBC请求中变量的最大个数</span><br><span class="line">数字格式：</span><br><span class="line">引用名称： num     --生成全局变量num</span><br><span class="line">使用V函数拼接使用  --$&#123;__V(name_$&#123;num&#125;,)</span><br></pre></td></tr></table></figure></p><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="同步定时器-—同一时刻，"><a href="#同步定时器-—同一时刻，" class="headerlink" title="同步定时器   —同一时刻，"></a>同步定时器   —同一时刻，</h3><p>线程组→定时器→同步定时器<br>模拟用户组的数量:50<br>超时时间以毫秒为单位:20   —超过××毫秒报错</p><h3 id="目标吞吐量"><a href="#目标吞吐量" class="headerlink" title="目标吞吐量"></a>目标吞吐量</h3><p>线程组→定时器→目标吞吐量<br>在每个受影响的采样器之前延迟<br>目标吞吐量(每分钟的样木量) :1200.0   —控制器每秒处理事件：<code>20QPSx 60秒=1200</code>   —每秒按20次<br>基于计算吞吐量:  只有此线程</p>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postman接口测试工具</title>
      <link href="/posts/b98ce94.html"/>
      <url>/posts/b98ce94.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="e68e7db985d238075beccc446d83f5210108c915694dcb830ad10755fec58091"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口测试</title>
      <link href="/posts/160b2d7e.html"/>
      <url>/posts/160b2d7e.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="2f614219e9abfa6c8a78e9b8bd42c8aa9392df6c41c4b6a64304b83f1b494621">7581020999ef8a5b4e658865f7f9f3c0d26bddbbb1ebfee70b42e8673f9ebc727ec2b706ad5da8b8c4313cec6b7a6fd818ec191a8c8d8483fce0770df5a5fc3f6ec5c395ca30093d12776a19117b348e0de1161602de5e2d8da341e2b6377cb95deae79199bc11c91a081248e28961a9a7842066db89fa5bdbb9b2e10c1e922d68c92449e13f7464f894622e24ec27973d1601e72cb23bdb3c179c5a18bbb5ab84220089c2743aded74f4245f3b5f8202b761561520161c4d9567d127f7eaa4fc7a59e57ba99102fc0eaf31143c1ecd34f3a0588198ae50c8925a9c3e08f8be9bdc800e1248941638d5f11254ca8ef9d2c276238a4d4b43ca2af49823051d7618c9d9aa3c5baf3a24482e6b5d1a17a950ba31cf3d9167ac44477e709e80f8c3411205a051c6ddccc58dc5cf77b4554370d6dce7bf1d51ed4a324eb796a035d734f4716a23297d733da801570c75e2ae62fbcb6367bff3acce7b63b60f609b6bd332fd7309ac3cb2d681a40c29b6285d517c59a14ed4c488d9b9cee119e907a4ccf3894c9bb99f4036687ab4898684cb6ed078732dce7b60c31b5cf985a1130549bad0f1e1efc9ef8bf529099195a6887f2d827d81bb5c6d18eb1fbabcaba5b17da1447a62f24580275eed167907fda85dcad033ac61720d5f4d76a560c885c5bb18cb94a7ff8dbc9e1df215c59f2eb69d6fd0b541a05eb6457e047c85bb68e856dfc18a578197c7f1f1460b0c9247f41b74c20b6d0293e088846fcc242a6bafbc1da7702d5eeea63c9d2455daebc1034e8111d08a58a2f5e61386c807ada25e461cd36c685ace47b49c1ad323488471be072585899ebdabc6091fa9bf94ed956ac2b59046b4b2d24c40989e8139cb36154e765da32f9e34e8227a7dc718e12156460a1164996bbc220fc55670e42483b9b5fae9880e02e578cb298c57b66d50b05af9588cbedb028fd5d7aa3f15aa5f0258c8d7f7ec422a784e6fca16db236f6fb7e0e3340c8118247bd07d0182c0edea2ee3097594d508e5ee189052eba4dcbde020c787c9ec5f5efe4d8ee6756e4921ad00a21d9af74dd3b1315d6f9dbc3fe6d8440d83f9c124222b0f22639febc351dd7b5aada0ac574269732e0933b5c840a5551c1c2fa7f73b456cefcb6aa52b568cc34381229cd367f5405bf14c1fd2d905a43813d00667783b370c1f136d7a161e4a7ab4a97bbfbb2decc2dabdf4a9be0595526427cf785bd037d37cd130e2d8a74441844ec107c7408adb00558a92aa111334e13e363bbeb89530eef6ef13f5a6cec09dd383b66a401194788b8cb115053257644d91f407cc1387c5f2bbb1b64da3aa4cb3d007ccd31967df885841000a187d7461a60017e02ba006d99588d48af1504e1327060c03d39efe22cfff3422d0957f30ece2c05b651e3e6bf751e188931358eabd0d3579a18ebd9c3914e52678034d6bb21f97a7afcbb1f6f8a7f13d6b6be4ede002342a2c97500c5cea2405a53f2adec14eca26f8da67e0c051094aad4e27cec0787ce659191627aa158fc14d61498d1f60168aea4596a624dccdd27f5b6de9e97dc59cd23c4019c8ae6631fded3ab83a3e7265a698c7d749673a572fe149c66ddb8ce9d77ee8f3ccd2e5731ac9f4c7f24fc58046182d0df9d814dbbb23015f7ba42560600541c1eb6766079cd2115245536594f442780633e6b31a6c3c796ca6280758945c0e0b54c049d58522904c631700983526c7d04cbd41919d02de3ec7d866d3738e32dd6fe6a8f050ff023f7a8aa03cf06dff2488539edf9e466fa7be03c94a5aadb6fb84cbdd6ea6d354bf0dbc68e0c4b39335e8582c316fc5ef15b562a855490670534a7d8cecb944c2cc5ee27d5cf6d5cc13432fcf2d6689678674e310307fc578dc0d7a270ca2702ca03ec9d60026656dc9359ed101789a6eaf4731e0248c3eb50731c90aa4530f5b9cae71d9ec3cc0fd7bcacee59224b717146bf998dce42138a0183ce86c32258ddd004bcf38b0cf5e93a14a6b9f57a4c027ada392be816b260ec202f90913f5ff0e878f13921680d9fc5643c51c93ce982bd42fd4388a5757dcf7a5622c7a9d23c0ccb21901d1a26fb8cba6d68b9066f6bd127fb1a43fba5dd4ce747172e61a7232a54769d543dfe263f591b2089cd72dbf15fd2a36b7d8069fccc342db1beb1f522a4dbb35d5ca43ad26d824f8c63a541c143bf64b68bfe7a7c502e0f647bd43123b1e0029b195c9922fc61fd6c8f2f74ffc11ab20a554ff4552f9b948f8cbf7aa7cc23bce4490edd8f34b7384c24e6c94fedec7a523c5fa4876a53796313d8e2c8ace5ddb297ed7abb24fdc9f289f9750df651f86d2f1e2f08cc086a90195182042a3de2241488f21ebf6fb9b55910af6d9931350c48779dd2346ff664b8a53ec4a181b25715531f25b2d29d6fee041884f66cba2bbedf9cb6233d37d3950ea663108b69132d1db6160059942629f8662766d9c09464aabad30b2e8b4dd6d4637afe70a57f1bd2a87574ad98855fd9e3363341c321db330036a9f56ebcd47a9e925befa698cc887299b893b5378ff321cc3a0abd4ddc6ef28ca67ac22041ea116ca8b3ceef4ca7f04470d2ed96d7d8d09e95b222234b065c1d1a0e3923e1550ac02745cb163ee60e7b833a61492fdba8cb5d44cfb4a41d42fe0696735862caacf4ec35fdb3e68334009630cf0427e3f38d0a08be188bd29d6d88df7b74650b7199c24f600de8ada97e027bbf58ee5441174fcc44c218725cf9cbb0238744fbc390d2ef70f39f72450454a0405c45bebd4ff3d76191fcba65da530000778f403a03cbe0b44dd6363505a036b581c77e24700401fb2b0e775414a9e026101811f635ae33bedce3bef1e7d81bb28c7993ce69441b108226f313e874873c762c21b6c38c3d2d656e0384406a677e011792f75d054a737c8dd48a3aa25b551518d62dd8e77a0be216cb4b88d7af40920c926c266df33aa32c8f6a9073acf7512473187c31ecb9d8d751c8f1c00773d80d84e52be9c4cc45d89dbf4764aae1e59530a62eab8d7c3e97c4a7df73232371722e18ecb04cac45e60a97bdc1842694af4a61cdc2e778f101154179919d8e581733ad757784317787fb15b907c5adef46b0fe97ac054531fc444735d94a34f572bb96ad75750ad22723c86ba6eb9a8dc10bf3e7f0077afb283f1ee94f6f91b9f73f330dda75167d24fa08f8882d226fffcecdba50a209b1bbefaabbe94c1e0ce845a1f82a938ea70ad7cf2a10e3b295760e37e693b193f86883bc8433eec5248182bac30b0c2731bfc21d8f652f56c250597e882b60f900745eca5b5bb78cde7bc7c9cd6cf8c40e1f7ca3a02ec100d33f0fe92ec1248fa6c06aa745daf77d1117ca3473a312f646beba2d31bf025fed1fbb14f2eee83c7e428c8308ad8f23177445e175deaba0333133d413f47aad5c5284cc5d0cc6c0bdeeedb3c74b844a835ec1659bedcab90dfba0d8aab560c83c74557aef848bef7db8abd922abf0c1ae36f7e31bdc3f1b13862146843663f6db8949fa7fc62be1b32f0b204b244d7591fdb3a48482ccedffd96d88cc4283a5d9b1a0cb09e94559036d0e26ef0d4ca28261579e2798b6eaeb4703102ddc94a7a02980c73d75ba04081f7e94eb62be47c709f21dd95765371645376adbf6c8daa0ca1edb06057c3a50b8edfd69919f4e5e6db756074702f689c2e9bbd66fc04bf9644f77db52fea00d433f339f396bb86556bbaca041970e6d98bf99500fc5786e74a59bd091e46a9d5601348faf9625eea89a6872018d34061930c46608588032b5132755130fbeb149f075f441734580ee7d7e4a6da14605993905d57fc2f4541a2cf44aca7112c9e664a6d10704fe4de8d4aee51c16abe5ed06b26efa1819c8cf9ef7483a0160c4d6d604bbe879e1bd73803257b3dd30a8cf456b192380eccdca83a97fe03626ff9cd64feaac9e6262cfd140a93faf910310337b3126ee868b4bde6e8afe283fac75c0c62e4c81c0f2c66adc1118a613a9634ee7afa99ab74995817e384243dc738dca66394fe8388b09930626bf491224bc6acd302aff53f35185b190a42357dba3e7c37b97c86d5a19ec44abd4d860a07e31e5d5c33021abe793464eec275061e33512be21e191af8b21f9070683e80bd06e9e2089219a2ddbbdf0654229b5459ef063007ffb7874af42f4762a63c72b6ab4c0212681b9ea48235726ba947ab8c34900b875a5701cbbd71bd8f0b6ba85f5e039d010ffdf50f2fb59d2f9dbfc3089e7b6dd67734928be67a983d8a467e3bb1d30a4d662184ef32bee55879025ecfdddfa8b6c06ce624a5ae71e8c738ae84a28d914481f3bb5b513fc888cbb1f079c9ae143ef418807059722ec0a7332aa1a01cc6ea2533ed6e2d9c286fd1476a2f37529aafd3c72a1bf4756cb12419c7f905a4a984b2f098997c2a7717068d968ca0809c902520251a0d5a6451b9399dfcd4463fd66a091e36a6340a9555f4f083ef3249a45861aace805531f5a1d71380dc3aea2c33b735a27b08c4e41cb713cfebec1f3a7c341d5cd0d92c00809cbf34e0fe81cf73421a9dffeab7cc5eae2024dfdbb5ca39b74f512e00b12bc443aecfd81b17c711f0c69a87fd333a4a5761a57dc3143732eff7f2ad215f33ebb669b6a949ae8511c8fe0812670e98631dd861aa6e3937db11ceb348a9c529290bfd7ae6e3dd3dd2e2512aaf04fe15eb10a94067151270b0ac2eaf20b8511dab36888bbbdc87de6d4184ae710a91111605ea16ae5c2cf47b760ffebb6958e69b11af64dedbd73c589d7e7f2604cd37c4e15282bacffbcbd540fc8ef8f87ef8226f6b3806575f32f704fffdd2601ededa7332f06bb40966a78dcb3455db2777dbe67dd110f55251480850bce77cf3eaa1f00bc7027418e7ee7c095561a2512ce97c1d3610fc100e7156b74b6ee4cba1a84780e129e9f496addb56fb6254545c3708287c383936b0bec5fce97a3488aee013c91f4711ba1c083923f494a127fb9b37aa99235de636872ce273ccbb0adb9cc42be27ef10441eb0629357c7f700452c102434ec7a17fa2fe115e5e7396d7f38a7c19eecc6d91c773ba365e6d671fb453bc3d51c2226b3a7067a7b22c8de42232b7e74b96c0c468e8c56a4b41fdd53a97c7f625ceb028b870661a2fcb9d8a628931ac633458754e2204d2375fe11152b8b083912788dda629612eb22e87225569fe020940b7ab018aba192c9b58fff4dd8e47c6f3c3c26983c753664d569cd6cfac89629da11b31605fc99824a00d7637af1f8b08a2e9502ad0dc0837bfb87035b661410f3417c30601a1bf62a5fd7743fb8b942d3590967bf7452ed94101ca372fc6b12b13d825d193674fefd678615e3fe6bd3ed3a3941eb208bedc9da0835e658deff83dade8e7cbded70b57f85b4cfe04935eadd0495edbf06dae3673f13ed88e75ed15e6056a5a0debc3f7647e15a07e866b557ca1cb88a7d77b81ad83caf42caf9e1c5e1cf16d23aa2904078f2d050676e1b308d7d1a45ec4ae8d81979b56eb1aef97f0ba55b6ad565a47c72ab06ed6e94e8b4fd2136f44cc4d0f025d98d6b5cc636e11b49a28afbaf2aea642962fdaac50b7b39e49e1bc572b869e9b6bf280713f94cef5c23f3355a4c879a33bfc2d8488cf9477f594c0ffe118deec7946db9b5817810418993e9f16768da5b469439a110c3f402ff04b94f16e71ff50311cdfe5af016e8d269db40b783f43e00ab0f2ebfc5590713082a96c8de96a90dc5c3317f2fc0e0ff59fb536d7adb8ada32e0cd6cd531608ac224d0723f7df862f08a8fd230684ab5f90d7971ad4ce31c3c07d23291feac99ae9d4736cdd32b8d704316bb743023f3a1bfc241ddb9b5e6b28580875eb65d171e7732b649744b80c7a2656aecd320a031f8ad400118106e92460475183889edfb63a53cefd176476aaa96ea047b75c9f392677bca863672cb76a1ddc4a26e030b7e08f0f072624b88a83d5b86307859c199bc9f3272c7d876b365e1444892a86c7f5a9cf4acfc638136e07b27c4d4d242e1de2e9c41b1a5dfcaef30aa0e107bc85605e3b5b49e4e9b7888e17c8eb4a9bd3360034eff995aba756ebffb7c36f2b1fa4c06d6e53f195471c12d4970cab60a962c3b7932113c45a74db48df94be8e6f97252bb3a4a398a6280f3e8204c27a4034dd8ff3dbfe957afd3d963f6d3f47456a3e8c583c3e489c587c5682a15fb6670e6c15d02caf0aba065f7fa3ff4a4d50d158d6c08a41e4144fc1eab9c6e8d8fd9d10725ff25db601c5a5435e2a2e6d5e40067402af6440f8e0bb10bbfd32cb7e8b082b5d4921f701c51535241b248a87168def128e7b45fceea8caa39a3c0c497317c03c45c1d067875f8451a891aee397406d1e07a085703b1dff5ead399bb362a7e0929fbc54ca8f9387b779673fe839e58fbc679d03a3378e25822ef0b098e24dc83cd3e8db51affe8fefeca1e97605f3f4356bf20b0d17cc8fd7f4d2fd993bc82b693f639fd53d5d073313954801c7b5e59d7e4e73f3cff2b7e9a24e0614cd8e5351d1576f91f1139c182455422087737a0642a955e0d6f247d45c18c4d33aff81152d43a2413df3959795f83f38e1e661c910453adf123857bebe241c2ad54fa065d2939d409f88a0982ee7295e4cce5b6d9a8df6bc42f73406a6edca6613148ae73887c1b95a1fd9d95de6af5967fe3c77f5091b6e265f4993c877b3002198953143f060aee43ec778450a2546451a534dd7ca1bc3b8fac1da5d8fc9d07ce4e713f67519a365f857c41a31933b5c36d5f6298778f19b44a133542eb1b4e577c7ea11f8e312b618bd2c3f778cbf97bebc439b679187bc6ba4f95d36c748b15695a771ec8cb148454429d526031e57ac76aeb4df66815749c7bce5625c7e288582d3beede7444d17beeb52b81115c434293a1fbb6c639b186439916a5dd71c81fecebecb8acff958dd724b08280a087cff38217e7adbfd9338961adacf478719fa3163f2ad2f5ba45451c49a4c42a7bc1bc92795690e30095b8535d2ea0d8dad55189c54d7003ba3a15664542f1f119e22cfe947388990d3d22ff1af40eb1133d5a353a7dffc75a7e35ad35626673b809e3f6961ad0ba0d5de28135db9811dd8e6b71484abd0a9dbacafbfbc18a0eef921524a8f2be822a61a92fd2097edecd1a783b9572038493fdf4d9ec7a4242c152df22e1d7cdcbc15abb248ee1d1841b956e000eeca22960e7d3160c078892ed5ac779ecdfd5acd039bec1f3db71e1f00eeb76657272e6eef6a6a09448f85fef592539d1ff79658f1c8d8b033d6023d1d327ba9ade269599a911bd8eca470a946e6671472ccffd74f16cfbb41dc6b275ea96d401101c3c47dd58815ecc8f35b0f963936cfe66e3fa1e3d9adaf9a4f7b3b20416be7b57ceeadbe45397a005e6fc159a2048d0d694a0399fc2940f0f233e516558dac3c062f7fae8af97ab3b59598ce8ee86e16d1124b4ff77b66e04fa5d1a61bdcc43bda2015de4fd3afbe870273812acac9acbd94d32ac75c9c9bffcc7770fda48ef7efd4cb6f847fe8fe46b616574a9cfb6fb6065b22d1e746797f306d2f7a65acfbe06dfb0f97d62fba37abd735ff9870e6aede91a63fc0d846d2f4828aa9131aca9ca46cc88a8df237ccf41ff87e387d47b630fe146c6aaa41b9686a6850e0f65cbe39d1254dce73049c32c74af7290da7ae798dd3a2d038254caeae1371d6cb1e44c860b179090222422408e93b7707b49cb7f823cff6d42f8690d4eddb45dc53dde1df5e01f4de2bff2137112d8e573f208c5f1386ca213c7812e51e3997806ad3d6586c073dba237aa46b2f66cb752bbcbd961a9796b5fe56b2716849feaaaf818e506282a9823fd8b65321485d338a778522cdbd6722b023706907c4edbdd3ea194a4b6637f06690d528ecf3fe69d00a9334b55c9608e4d9a4dd64d46c8154d7d4d070aee1fd7f3f3a200faaeed4a063d5e011672f2cd24931fde31071613318549c4cd0ce267ff820d82470098649ae32a24048f56e5e622986f3ad922a389d780e2bfbc4889f1fd9373e620b4fe610459d482252d9a80fcb436906f0bef132fea0a487a5163d6df89add31575f3bc2a29f1aad52797f34a3e9b798227acc34a3b9a1bff580cf863251f387772825bc02ee17ead5baa68ceb9def71c43d0a9010c0a245e6c287a7f13854993d6fd4199557bee71b2b493e99db41c908b1bdb91e7aab404b0ff4932eb5f1fb590175cf083b6e08884838dcc1d33c313f590419cb16cd762d49749a4582d2c27ca33c14eff42ffdd0b41815a63ddcbcd67f1dcb3a29d5b46799fba8d14549df8ec97662b68072d3ccc352123aa70cfbd4ac49813df6b442252164035fbbbd418b4deaa2fd5ec97e48bd986abecf51993e9ec9eb6facc272052d9fd97577e2e378e8dcb4302a738966dfd2f0b3a9030996dae6f87ed28138ccf0510a8eb2f6dbaea97531476a8be21499885c4cc352a89b58975912eaef39a827326189a569bfabeaf831b86ce1e1cc114e9e5c0f1d856dc4b3de0681ae2fc44242a16b0fe9cd5e42e3b7c57309da846ed1c4ad042ef9743fb5e404ebf2d25c7e91514b2881f6a993907de24a6917ad1affb68d4286d4a9b13e114e745f4b5b56677bdddc63fb55216cd8b7db281f1bddced86be173b04046c75f22b43b1e3ffd151eae72fe1dcc4cb3a1af90a9dd1060637958d16df4fedbc59d26d91a2fce6cec1f12fbbd6fd7f7c3899ec3352f9c027fac04f37c185fc56132694598fcc972ae917a189140793e593eefa7340e9df064372d3738bffd78d34d2e0a63dbc60f9d8ca5868587a0365bbd175a0a8a56642241253db4d2e039d67b3e439d93cf5a21f6b51d063d689089db8f661d55586590df847e1eaee2b65b2b0d1194f0eadda0d348bd14e535d8d2be8e0c4fd6f398f79fce767643c4b03c2cf30a65bbec520ef91e9943e90dfeb5ecddf30cfdc50a991db82c01cc46f467711156a28e70b55162f6f090ae6461a9e4834c16a239785768fa9f97efd8d1010b877e56fbdc78be86b41d75b0636878d13c3c8556b72358b8463ffd0b85bb9876de474f7e6c0848b7d618f9966b01201f2e443e4c4486d403b9bd43e2a082d527fa602004f4995cf705d8297c53cfc4ceb0ee99169421223f2d386ac537740beb5994735747130d96706868871aec2068a286dbd0495f6e32d8133f0f588091ba78814ca2e1cabbe307fa66c7895e87ba7d7f5220af73d7a90a623bb31ba07ac51d69360c70b4d0266079e884848a5590762d24e41ff9b085ce0c981f0991d81d3ac6c9206ace00da0d4dea1a135fac87abcebd6941e34086c095b94214fb941464242b13d42a6a69b9a549a3a6243db254cc21ed4c9c46927c88baa85edeb1ef9fe4ba6925fbd14c9c2881764c0e395392ec14dfed2e90f23a3e57dc7f5fba8b755845ed1e1566c6776119c81126af8ab914928b9279a2ca4066bfb0fad4c319a085dd146c9d14acc769ad5567a1d15eeb54f5ca4fda38180e2963d02a49c85e000c3c344aefdb1c76db7710509fa819f81d7b534efd855f69988f986a363b8481ef7a7daaa237cf442ae8e45d6c18a28f8a2995ba9e460fdd2764e09f219e7ed12497847f19f63b386df01d2c747e906f5ceb59746117d501fdf2c0e8887a5d8df24ebee4d32d23113564ef02b56c804fe3cb8196c05efa111969159cc9a28b8e8fe411cc37f6eb2b8f84a77e7e85c476f8fd54301aed20ab25edebfd1fca8361a9886131408009f4ebc3853287e5091648f4e87e85b70721646f871e8ee3a1a10bbc1dc9d78609426cff33137ce86190b7d7e5724e56b114b51fb6119a51afa09434e2c1e3654e4c3a6649ecd397e865af7bdafc35009963f332d53771d8a614580088198c49aaaa0290e3fca9adf2316959bd2f1388c380b57ba993ae96ec089b736506ccd59be026b387eb976df80dcc0ac4241220bcd34a8d360aa2f814f89b3d8cd8a3420dbaaec401c0bb886c32068674a275647392a2ff0469884f5acb6720a7fe0bdbcaa7ab8615427716807409442d95d7ee7f625ab4d198754b816af1795faceb3404553ec09754e841bc73afb05fa29e2a502b3ed4938b850fdb9636d50546ec67191458dc82c421ba85a79a8ad0d9556fc149dc68eafbf30758a258cc8441a526c0417cf505611b9eb3938e7a0995d7e1db0c1d9398d1101a7bbd748f7c15100451833980ae193760327b27ebb89a754c05324a8c367308d2974d4834dce235e86cbbe1085687f2c3d225c4b14536a556e0746fa80dfe717999ce2ac728a14dc0fba9f2ca1163438dcbd00218e09954ca74ba666d6d5d586098ccb64940f21780d9facf59f12cdd2e307e6080e4b7ee47be1e9cd6487d2add07d20fac6092d2d0d0379bb87721412e1b630ba6439db912ab92f894e582c0a3501e25710be20e3af2ecc6a9006b5b0133e31e3087fb37329cfe1f1dc3f7b905046d71bd4a25165bd0b5328bd7824708687f2913d7c4426b472af779f1847251429f6dbbb0a11bd159b96eb0286e170ceeecc789bad05dd5100c0b08f51517edf2ef042be9e665e04e08ef5e9e55c4f2661103d13cc7760bfc53655145d63c7e8d72c2bb433eb0c91a897a86390eb84a0e708adbb1fc814a2094a27e9c213f91e2287288f4b5a0f63c4cd3927e8340e90dc6267a3f6a782e981fe335edfc0000d94db57cc63b5e6187d29657b5a3a22ef35a2e7521399a59cfe6a40dae352bb47b5f01fa621dba87505e4fa7dd833692f2c17807172f426442d570a998efd63cb85b877a14d3b4c35f9dc9eadef2b4bb4706f5ea98683b97a520ed442b9ffeb9753ec596d53c5157ece6bb8370b47b582af2df4b3a6fae75ee88cb067adf115a2b0a28a31ec9187aa66fc5fb67bcc1bc62ee5c80f562a5b5959802dcdca340e7582421e91d1c32d18d292a38a7c2d4871696cea12d76845fe4d1077db17f7cfcd2d59571f76b247fd183ad3071224e9e4225b4dc79d9a05f0387d97f9a3bfb5dd1c801f612375c4120fdc81da11bdf2394abcf1f900071a907bbc113534b2cd1d01dc041745c8941ebbd594a6bead241cce099d77f1c77d5a0ca3c9a45335f97ea0fbbb586bd25218f1a213533c0d9391f6c88c79fba36823ff8d1e7136ad719df5be7dbb36e4b425b12125c17de96894a8128f7f557ff0fc9846d1d02d2eb5ab3e2d649a0bb74c19427582e9878d0d0fb4136c4608f9d2117a0dcb2004496da33cc8e79bf5e78d667d5436f55acdc9be5da47e9f0d2a3dc3dad51b52c249b088de54f86f90aa2596273694ab490731b9a0dba577aeeca3d4f26e4a1d616f1a6cb24a1d2017dd23a20e1240cd6565a5a68ca8dac9efd58adc782b5fa6579105e517e5a3504d091b80b016aa776f02a65ec1337c0d557fb76c06ee82f329d88b4cbad128bb4d19fbbd3d05e1f6888b97a754397487195f27b152d1ccacc41b889de78449ab5bfe8b5220f1058be36f0ddffe0d73c6224854c89d426e6f5a1470aca35eb2db58508a1cfda0d2c8bb93065970dc31577fe2d84e98ae989353dbc624974c929ea09ab4c64974afd636d1a90de8ec7eb55ca10e3a0b672ace77c34b4e638c18024124644d641acb5949f4a4aafe5847f87a830ceaeee113be7c086f9809f938d29d9889c45ed84b1155f45b9b2f2173c92f3f0b64f38dbd91beba326acacfe100cc3614ddd898e67571fa5b1a67582143a257d33f453e8f7fd5465fe81a6582e304b87a00017ebaec35b2ad92c7a4842242d25f7f6e4ef1141657dc43a4b1a1ff487c7c0f5dca42979c2f15202159f7ba801ef0d6a625c506efbfe073c44e9189c74882c9e7869869741ccba09d630b4a155d2f0ea577f0bb53b9bb48af9aca2ea3debd54117eea2dfd22d4a5f5e8901e2e6bf283c094fc17f2ddd66c7bbced4155783c1e4168f62a98b6dd4b130aefbdc6ff11bcc3d96be4e4371bf6b36ec719f30760ec986a75313d98d2285e301bd83fa8daf506f8e9252e856843ae359da69e0cab77aecdc9cee0db6d838afc921135b50f000ea3e0475915715c1845cca2fd4f850ae778f9b29cf2ba8c6a5e896008eb9bfad9e16f951c937c3b0b71743e74a52dd5f26d36579d25c90aec21061bd47074f354082d0f913c4fd4a5a8b29903ee280f85ec3df9542fb1fb7d296dea075427465d4e5d3854b9977f18ae91dd729c03d8933fd0a8554b528ca05b9ae0ed22bb60db6d57b1aaf865e581dbe398ebf6f861067b0adc0c1ea8f79cc933ce71bb17f59f5dd8cdce1482ab2a3ef37db5faa483d52382aed172f692fe1228b3f4b2a1431e4a9fec8d98210c526d1ff2dc4f98f47cc1ef0250e584671b2252de68f7ba8101be29bb1a7a9ee86987c06576a5a50a379a9c8e5ff0bf58ce29028d44d82e0a7068cdf80b42b8c0ca9862d069a8a2cc804a1d48752bee2cce1957762f1e82c1f9d1d35ccc014a50593153392a36c8fc670a077817f98872a110d23e1bb789a7098d2d8183487da685b14bbded93d06a0c1ab0dae1eaa34c860250f16899b08271afa1e618e6b904961f86c73b833c58aad717b04ad24b44e72261d6bb49ded411417cabe76dbba8fbe5ce8431bac868dec8ae59b54b698a073baff072d33fce8c03a79146e4a512ec0b8ab70bbae56dcb2e2a83fe1fdcc36295d74137e4fc6b712bfb7e6774a14a47b1a4982acfb24322509b9e1c84015ec4f398700aeaa204e3d9ea016d9625cd4bd04a3462df7a3bb55b6a96d5c1f92c9fa6bafd477385bfd2d1794a7a69b3e37844732614cfa18e8f83c871fb2c8331822d2e6f79055c9514c46096241b806dac1a60601ce37be802def82c91d540b21cf2962f208063a50e18759f7298953df4e16122d2901b8e5441194e9295cfdbf3f6be47928411d0481874033cfca43c1165efedfac1a5c1ca3fd158b1bb7cca1979525bedd2b3bb309f6fd760d66064b248ee3bb27fe31cd6c42fffb4d1dcb39e8b05df036c97bc02e0b78511de41fc62a5e820719cfa847ae3eacde39d51df744d45c62d0d90195f9ec101b894befc4e247eba5a5f700a2c2bca4e3e4731a93e6f60258204bae91f05aeed0dceaba8e634e4368fe90e186e8a6bc985dc54d9f9ba5489e691fac6e43f2e4b327bea2432679426302059e605f9e1f5d3d5e82e9a8dea278ac84521b4dda19cb5888cb9394afe56e28c867890b1e6c85c782b83d0f7be6014dcb3f673ce1cc83d866b1bde33ae3861f9670aeafb69c75257f854f50baaf3fdf5fd3949fb63349168ad6e57844fe837955420cb9c568dfe85dfda58ad1e3d77e618718f70c296ed75bfdfa6dade56f1f62fee9167e0a432a58887e5f9ea6527f048f6010745c9a9c000258cbe889fc82649ec6694fc86d439c593320bded5a67e66b643e825c84ff78117d978248431225f29bca30fd93c9e423f301b89458b67bce6d5d9d8f9328cd83947b9bfe7d08a767dae987f866588550baa4ff0662fd673e1cc4ef6d2c05baf1639a768200e41a3ddedc0e650b7401aa94918ac3fcdc89824dcc6034b91ae70ebd095514606c967f1f7058bed2cd5981e5ec4982e7962eac2f18af7ab5a833c9652abf3f122bc3474b8bc4e1530bd99b6b3a362d7a18ae2388519fd3d38704e9e60b5d3e03934cdf4dcc4565530b3cbf56dc51016dfc74c518bd732b850ffd50ad43f8291d91a9edabb9e9a972f209384db5ccd35d0afeb8106eb75e0df78d301b4df8265ffd3a25a38b1681d08fe439f00fb5d2a5f12ef9e789012bbcb83c0c64fa2bcad408a5c0221c83c111f0ce29a66918e8daaccc60dc5cc02e1c254623a6e442b2b343e86228e87817c2cb30dbe2d95938b47d98a161d4a6a898b9e367f9e2fc0a30090568fddc4d297780bebb25201df5d7083c580855de96e58d050a5eb15ad46c9a50dde08d1d40d3e82319402da27939806c66f81a7fe7cca38a98670a786a71ea2e0d83b68bdd91493176b30c8e993e6f9bfb22ef7cd9de8835dbb049c9ce2d50cc8b562ff2a762f5ad858bde84819b3abe2314402179b99ca463df2bf93251265158311dae22aabcc917f26fb944a5f0f61535e88db74bd4385c5c26b46e5bfeeabaa0e54e754e5c94876c243e19c76413136995b5fac4790d8a2d11ba04f8bdca4a659d140d294cb5b550ac70bf3e17e48453f10c166cc328a35e91151588223a65ba4b0f26a22154a052e1215c12c3cb4d46fd0cced041e830f510850f18cd9f884c38973bf09bd6c4eadb4e6bf10169f8b5794b314312069bd99ef56aaac91314e5c460d4a9b459b155b7d1f96a71c43615352ef4708f5cf8a45e2257cfcc54c9f41f57f3f59d60a81b0fcbe0fecc12fb6f34213fe21b2824fa58090e54d8d4baf3727aeea40e8f18349ebb1d2e547575f8ea602662058c69f90099701f6e9088887ce1e4cd123d9eb7bc6ac3cbafbbed0c42f2553cd33e88ef31f847afa5a3508bc50cdee1fa3a0c63301a2272f719e34483d755428a5b90bfc4c71507ce512fde82031d9143b046c238fc8194580c2e7f580f6d3798e0cea9c629e9640b41a4527794aa9a92b54ab90042aa49a2cef79c1ce0977fff2548fc87c5d9316184403a6253ce29453831ce7a0328303d663b8a78a13dd98a0e9582bfa0d298193a90b9482372a1d88d3813e3a50075357fc2cbd248c41816a6b9abac704e31e3fca1e8353cd1c6f91badf321b1cc91a259840b5af039a93b733d4024f0385cfcde99f6930b0f69ed98daa2910059472a71cd82647b3814f44177e5a4bc9373e8ac06c972d6891d87b6bda5456e6b3a249dbf2d9377befcaad5755896c471c876f11368e92cc70a483946578a65178c9f3e6cdbc7d906ebbe0026f02a947f15f6f6feabe24b2231288a512d5c0664e9d6c6d8c8daf7310398dc8c2e453211a888950bf9d4a9bc3c576d368fbde4dd2bb1ea26625052ba3aae18b15516afbcd5f726e8060072bbe3b42030c85277aebfd5ff30f293f2d6a3988defa95e3db2f4644d30f30ae61a2c43251253c5013ef5565dd42332c3f40831363c777e0e32417a1d0f2b78c1096375b63051729402a02b8ab1177a6cae5daafaa2222cf03b405122943cf8e49a3df69fdcd05803bf92d3e9dd4624175ab366d6f0e6e66a07e07505b8d1ade0d5e9d8f56213024a4dbf39fdd607c983cfcff694f9bfee906c492321e3a990d7ea94800f2f0bd1e2d1dd681d4a12dc91c5319a8fb9d3ea2272f8eb7c6009aac57d50d95894371b194ba9cb393ff4290283f57104967e6977bf383e8f4a1f5a6122f8b812098834cf82954e9b03faae292642a794c18779e26436de94b82e02ff3660707dddd09d3c7803e79d7e13bd52bb7c17aa076c71399331aa165ea2fa5b0e641134b794d4c6c8892dae04a9a48015a77c1aea6cb96454b9698d768e4a521be5506a8a0b3b2145d09d04ecbf9b2932bc37b81214c0ba18c4507c90746abbc95ae868b4b937d2571d327035ab808a2788582a29b155afc7c89b000e4cdd6aa11cc316aeb7f97a2453dcfb3f61765cc15d40d37a01ef4f7e6830df19fdfa9ce11e30f1fd4572ff60b451e71b24ffa135832bcdca366146382859c885b2c77361baec0d17832090ab7303ecfb75bcdb6cc41a48e815be7da710cd0e64ee272895cdec88353de5fb101367abd71b07f1953d7f35cb6107981aea16c63fd25a383aa627dcc9d07942e9e47a6e0e68a7ac4cd9cf1592747bf62bdffdbc1a4244ed90740352f884f2a0670285e7d0394d0a87b86a60af97aa72645fa41153fd2e1d7b9815dcdc0b1e6ebee7a215c487c53b3a9ac264cf7c6abfec68e0517f076b2c53307d27dc6b9085dff4413d28fce91d998bd4c763758ce46d95f215ed6d86966e21c0d2c859b553327a24a42dda070175cfbff7b87384eaa8fcd194db348fb7e3e29eba56ebc7dff347b4ae6cce483c25ec0d274015bd9e51561a5e215acaec444d0b73a18d6eb872952e29566394319e1decace5de852670838b9ebbbdf873125cbfe1d43a00c30daf28e50bdebbe2c8dee3b652e3d7e59c0a4e13acc7c531a9d299046177d2c32b00e5f31d641696999f240b1e6c65bab7de2912a3780288719fdd6e57ae33463677689c58a50e829ca887572399583450589e74a922eb27fd7037d836eb9e71cf00d8af825c950768117aadbdbf86ac09f1c1f352b8cc8d8094ef6a651754318045f0848d7844b528acf7fe4e39970f753cfb33dda19377dbd9693dba666fe5d0511796d21bb8c7d38230f5b8807cffc55c6280e156552781bdec8cef8860a8d9eb1830c2a3dd84417cfb0c21dc80b7f4b51991ee302ba4f4348195c9a3ebb322ce82002bb54e9f907a248026ac4eef2a482fe2f33407107c8f43aff1d4bdeea8235482fb26b5c84a2fa225d56e0fc92c7b73b530febeefeb7305bda0d5675532e6c62d7889499dffd3f80b84eea33177c9a946b09b684d02e76e25846c8eaa6d20790f1d12cd06abfa2c87305a8cbd7d66fa134be455f535337fe2ec5ca53cde219e4e2e61c5ee88be8ef218c11c78568344c57b6f2d1700b490a796d99a5b0b89800f0cd455a59976f2cdfd3b9937bf744f07fe41f66082243d96c257f851a1e959c2aaa61bb5138bd40bbc0fbc550132a7b3c28ec2e68e042f6df4f84a9e363b27c6bd97ac47e8e2c4a85770830f963b0ec55d48b527c20fc80bf66c5234c819b56746879f9eb413822527f89dfabeae6cec85423ba4e0464e9630430202ad56a544449f068b677eb237a0de250fc1cce910a3b9eea528b79e8c3d4c171fd64a9c611c21c5abf8c1d9958ba15d00985140fb55c912a6054e111008d7db8c55547109c1da798e70ab7cf713cf8362dbf2534fa1873ca0d5632889d63d9742dd78a26041363cfa69cb3fea081f0a5650e4e575e1f2723e860f98e1b0166186fdd1ae2c96f3bcf05ef7f5e34ee8c45cc30327628b802aed34c318b0d4762ce50d3502deee9004b2a34e4eb1d47ee27d36ff41e05890f5ac9698234faabcead0f754660a613e91fe4ff121424bc53dab5e12c373485d5e05c0973f99dc34fe6398c85f508dc2033bff67d330f40fd0196ce8aaa8e6b3a98d16d1a7d2626b4546d6a378cca7887318e008335857530b9d8e35d20b23d0ea14ee8ca21cf5fb5740d9e29b62ae2e222028a8579b62ade1c281f3edd42247e31200baf89aa7a3a1d561e5d5cae7a1e03feb54a26b766b308f79d7f7c753279d02bb842fcdddd189a07c5ce7938c39200f142a4b983cadbfb8449cca222b04c45cb7758c98ed65d3841d9e2fa5914f66c1f1bdc785f53725d49a431167fec704032dd3266d79b15981a0107a16ecec67096bcd4cc9df30c7bcaa5026e0b0eec2908f81fb50ad0ebafdfcf0869f0df3a0527b1fb2690770d5cb6cdc3c1b0bc02a40fd255b8414235b70811d527afacb3986300261826af8d1c62f4f4133114cf7bdf078486d14e27ecb5e44075a4611c342a9b8e55b21098844d3d29c549e987142442b0f065d1dc3fcbf668f3bb392305976b492ec599c4c5834d76dc9f2532373639c870a4f72deb868459e843ce15ae6eccd699f493f2623b1a0c83b448901481f39038f62fe8ffda786a6779e95ad69be8a11ac261dd2c144e21d5eb0f5fd5c23e62bc5c05b40d67c33d9b693237f5b7f34a4d86409e0dbbb316bddd0f633fa3331144e2944245a7d087e65833ccfb71d079c6f6b977f8332106d218c90d0bfdeb45b5b3769bef9f1b11ddc1fb32d2e2791ec1ed669db0b574eac962eb3fb44ed43f92d3823b313f6a8115cca3d6b62cecc4e5a785b7f5de76b28805463c24ccf61d4d5b2c140a4c19f5006f4942e2265286e56a260a954ba6bddab33e60b405358db221d9e0c15821a92867811be85315ab99896bc040ceaf1c80fc3d26b0c626c4fad37f0cfff6a064d93e7a8ed80719468d2e9866852486aa0bd8cb2753f2791d674b4ea6c2004e0550b5618288b2592e9aed645b821926e446890e0c085a968522cbd8b609f53c6e54719237012360f77d6fcd0b9edba28927464c0f215a89e5781df7d291f6f940058c3d7b6aaaef89ebbea158bbe6526d5e1a3c910912808a06a1b9e35c105d9d005b59b84f79a503a80e78da002fb3f6be1cf54ff9726b6d5ec605ba430b2064e2029c2ea68f14846345011c412b3c0d7067c2cb6f9ef6c9de9ded797574a42e657d7288c6c1850bfabef0405044d7b8c8bc270567008c0ec8787cb700c96cf891c4c5351d1b518b65e705b0744353140ab69dacb5afdf9d199c1b864f708393b06fca10a01393e14d116af145fb2f83188631b4f4d81ade34a5e284d1c132d72b538f673b9557da63593dfed43401fb924b95bb4abf35487d565d70fd0f67023b06d1ef9f8cb469b60f4faac3b11ce1a3474bd11c93876793e5c63566c53dcd561e9da2d698590122c4d2f800bd678bfd0a460c81ec18f9a8623db30cbdc4c6ea8d1db08ebf8a167d31324c5e5a278fa37301084fc64b23cd61b1931751f3c6028a3c840a1599d73b9e1f9e953d3e22473f4461b78f45dada59bb2b6faec70466f88b1f555a00baf12c2698a42e34f5e7af2ffa036c6331c687131738295e1f2312bfde848ff5b9ae40aef509a98f45edb0913dbb30bd3eea27bca67f54a28f7cdb8f7c1d21968361e6df5b4d1e74efdf69350dbe1ec128ee838b2bf31d5bab96a4d4b1a11734dd53fe72018994a200dd44e901867f7a69523cb6f1d56145fce179ebf938814b9e5330d47dcb78a83dc048ad339f1273500bcae89406496e8a0b666d2d88c92d50c3deb775d0f4ddcb0fb675c1fa16dd699cb4fa96e07c7b4cfb88e3796eeaac7408948856889e04e594f6d147793a0dc53172d1b4d46f84bd503cd4146cf3e42c3c61bae9b7ef0d112bdafd8de839e0297e9d0d55bf9c8ef6de3cb57d156674ba0eda0754e9cb0a774ab7adbee4eb38e806fafe8be2408a997fb81dfe921515c170d2e16b444cc5914ad1a6c1d0243a867cc582f490b6e23dbc3a1d185aada56f4ff5f00994fef79e21e82deca24bdd006901c039e5c9c02800d00f61c20edb79bbd8ea65f598f432442b3897508d4b5b9c510abb75629127b51082def6cc34e98b0632bce5d136a746e879e6d72593ef9c0c472c92be89b83728fb7ccd9f592b6473cc0b15933c185b2aa6d18fe7ce87d23fdbff2506f2cccc894f5385f4e7b28eb00f22255f04ba2f466cced65e27ee047bc15f33cf93b87d870e593dad1dfff688caed06f13be3177cb39330014e56467523e449ace3ab20f15855c4faa893c56e74546b9fca5766456ec18a1363f95f146a940f25f688e93ff99920c102486407140a32b66da3aa2acd4a653c49d7780a4b9f7530fe1728b91753ed381f367cd02cebb444346773dcbf6c8a081ee803317701f2ec0107d8814665d3eff256b8a88e1cb4b84fe3334a43ab0a895d1ab7832cfdac24f465f4f3e46e957df17f919a6b8b8d2738473d27454b99e9781f7fe18bd873255dca2612adfc7a28793c579c80f811424734340947a9b2018ea83760f28792c474c609ac2c62237e614ac108722b454b181232a53b877febf549b8898775485e2abe59b66e4eda23b7324f8f5c6d25b279fb4ba09c479538faee2d9cd788fb22d4685cb2d1ae9ba70ab4ac231016b576ec664398bc2e30714418641fed21c08ef828d5f8b3e1c9db9f5a47b7132bbf1686f7f01aa831097f1d83420c7718ef01814bb641a60a1a8e6c707220d676fcf8428ae86d948188473dd91ae2ff3132910e461c4bab4cf925e08c9b835aabcfeda19416c7a9b378f4845c328c89b07cf5de96574cd42d68563bb2e7c4a70236ef955f512de944a72804c710ed34595732579f5b73c3be419ac22cd383caa980a57728a3895200c2886f57f61eb2f4e69d0d2e75ef9935d1f4a4b90097bb10d1d0cc8fb9ba0174608d8b04aeadbe08643f30e6adc285a3e82035c043726aa901d4fedde90b1f0a6c5a17eff7e61fea3f0c440f6501b942154b921923ed9e5ca9ade9ee9d74fc34f574cd7e8031666993fbdc0e43668f1591f2716031fd5bfc5b2fef733bac88a3cc134616e6f3f6d174efdd3a90483253db8f2e1436f1a6f11b95ab6ec83b4ab3f5b0a0c1b4e2d990879e2d11c005be76463fa5602c5633e5ab91bb78fb99036635974b32f83d8d955d82e752b7348693a6098a301240aedff619ecaae96986abe80af51626d028279e12aa57389874f5a7e734a7a6fb1d5087f27886ff9e3256925f6b40fb4efa194ed7cbca7d9e4f87ddaa8820de4b1dd9b0e21dcda9ed58b0f9027f8f5e261fdb1f1e991d3c4a61cd9838eccd7f7750c22b73cf3fdab50495243d29e9f30620669bd40648f68ebcd349f20ffaeb401dc7102c00fdc488ea95f5fe8d03d0a68c05224230d4ecf31620dfce7c55739a10adf502b92f503b4bf334c50131b3e94f4c3943c32ffd590f125998a7ece5f38826123681e5444c8afff1e6006d35d39cb56d3cbc5536f9f5d065879b5600257c936fb1a9e73770fc8966a6bfd08c2b85e9b30f67f1aed2c3a50c3c748d24885448d9326a188e385b931d2bb3711ee58fa97c508066c0fc47fa086bb7a52a9beb9a634703e25201cc7a4a98d756ec10e5d689372a3fc153d306af98c78036f3d1591355966c960d0ca29b6597b6fb38b0ac9bb8b97df30bf9736ba93eccda4c72635b2172d64782df56f590edc1d48c4fbeb3657f3e62c8b90d902a7eba892b4a38662aad1f7cf9b62e1e7388d29e6b935e618121ed535bb4444521adcac47f14a1e204ffe410b63802b0f370aeb2084ea224fe0d74de5a31c7a93bcd8d0694cd0ebc8215e6f8a8d3fe3328cd71cccff2d641848422feb902c6a5ed5ac59c1268102c5828e3d4d8f415e4cf8d640587fdac51bf246200e902bf767390e310fb5a6e3a500801b8e957147d8a5313d600846aa60a56d74c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻商城</title>
      <link href="/posts/cccb0e7e.html"/>
      <url>/posts/cccb0e7e.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="2ec4dc559624cf600d900a88335ed2728e59381c01b0a644ca2cb87baa2efe5f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缺陷管理与禅道使用</title>
      <link href="/posts/a01f896b.html"/>
      <url>/posts/a01f896b.html</url>
      
        <content type="html"><![CDATA[<h2 id="缺陷的评价标准："><a href="#缺陷的评价标准：" class="headerlink" title="缺陷的评价标准："></a>缺陷的评价标准：</h2><ol><li><strong>缺失功能</strong></li><li><strong>功能错误</strong> </li><li><strong>多余功能</strong>  — </li><li><strong>约定俗成功能缺失</strong>  —约定俗成的功能</li><li><strong>不易使用</strong>  —软件难以理解，不易使用</li></ol><h2 id="缺陷出现的原因"><a href="#缺陷出现的原因" class="headerlink" title="缺陷出现的原因"></a>缺陷出现的原因</h2><ol><li><strong>需求阶段</strong>  —需求描述不易理解</li><li><strong>设计阶段</strong> — 文档出现错误，思虑不周</li><li><strong>编码阶段 </strong>— 代码出现错误</li><li><strong>运行系统</strong> — 软件系统本身故障、配置项有误</li></ol><ul><li>注意：<br>测试人员，在需求阶段介入测试，产生bug最少，成本最低 </li></ul><h2 id="缺陷的特点"><a href="#缺陷的特点" class="headerlink" title="缺陷的特点"></a>缺陷的特点</h2><ol><li><strong>二八原则</strong></li><li><strong>测试越到后期，越不容易发现bug</strong></li><li><strong>允许bug遗留延后或不解决</strong>    —  <pre><code>允许bug存在不超过2%各种成本与产出不成比例，修复风险太大不算真正的软件缺陷</code></pre></li></ol><h2 id="bug的流程-生命周期"><a href="#bug的流程-生命周期" class="headerlink" title="bug的流程-生命周期"></a>bug的流程-生命周期</h2><p><div class="mxgraph" style="max-width:100%;border:1px solid transparent;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;toolbar&quot;:&quot;zoom layers tags lightbox&quot;,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile&gt;&lt;diagram id=\&quot;KnKF4ZZEGJLheeBFdIgB\&quot; name=\&quot;第 1 页\&quot;&gt;&lt;mxGraphModel dx=\&quot;306\&quot; dy=\&quot;506\&quot; grid=\&quot;1\&quot; gridSize=\&quot;10\&quot; guides=\&quot;1\&quot; tooltips=\&quot;1\&quot; connect=\&quot;1\&quot; arrows=\&quot;1\&quot; fold=\&quot;1\&quot; page=\&quot;1\&quot; pageScale=\&quot;1\&quot; pageWidth=\&quot;827\&quot; pageHeight=\&quot;1169\&quot; math=\&quot;0\&quot; shadow=\&quot;0\&quot;&gt;&lt;root&gt;&lt;mxCell id=\&quot;0\&quot;/&gt;&lt;mxCell id=\&quot;1\&quot; parent=\&quot;0\&quot;/&gt;&lt;mxCell id=\&quot;4\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=none;html=1;\&quot; parent=\&quot;1\&quot; source=\&quot;2\&quot; target=\&quot;3\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;2\&quot; value=\&quot;开始\&quot; style=\&quot;rounded=1;whiteSpace=wrap;html=1;fillColor=#ffcd28;gradientColor=#ffa500;strokeColor=#d79b00;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;200\&quot; y=\&quot;80\&quot; width=\&quot;70\&quot; height=\&quot;30\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;6\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=none;html=1;\&quot; parent=\&quot;1\&quot; source=\&quot;3\&quot; target=\&quot;5\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;3\&quot; value=\&quot;测试人员：发现bug\&quot; style=\&quot;rounded=1;whiteSpace=wrap;html=1;fillColor=#ffe6cc;strokeColor=#d79b00;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;175\&quot; y=\&quot;140\&quot; width=\&quot;120\&quot; height=\&quot;30\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;8\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=none;html=1;\&quot; parent=\&quot;1\&quot; source=\&quot;5\&quot; target=\&quot;7\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;5\&quot; value=\&quot;测试人员：提交bug\&quot; style=\&quot;rounded=1;whiteSpace=wrap;html=1;fillColor=#ffe6cc;strokeColor=#d79b00;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;175\&quot; y=\&quot;190\&quot; width=\&quot;120\&quot; height=\&quot;30\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;12\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=none;html=1;\&quot; parent=\&quot;1\&quot; source=\&quot;7\&quot; target=\&quot;11\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;7\&quot; value=\&quot;测试人员：将bug支配给开发\&quot; style=\&quot;rounded=1;whiteSpace=wrap;html=1;fillColor=#ffe6cc;strokeColor=#d79b00;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;175\&quot; y=\&quot;240\&quot; width=\&quot;125\&quot; height=\&quot;50\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;14\&quot; value=\&quot;是\&quot; style=\&quot;edgeStyle=none;html=1;\&quot; parent=\&quot;1\&quot; source=\&quot;11\&quot; target=\&quot;13\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;22\&quot; value=\&quot;否\&quot; style=\&quot;edgeStyle=none;html=1;\&quot; parent=\&quot;1\&quot; source=\&quot;11\&quot; target=\&quot;21\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;11\&quot; value=\&quot;开发确认bug是否是重复bug\&quot; style=\&quot;rhombus;whiteSpace=wrap;html=1;rounded=1;fillColor=#f8cecc;strokeColor=#b85450;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;200\&quot; y=\&quot;320\&quot; width=\&quot;80\&quot; height=\&quot;80\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;16\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=none;html=1;\&quot; parent=\&quot;1\&quot; source=\&quot;13\&quot; target=\&quot;15\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;13\&quot; value=\&quot;开发标记解决方案：重复bug\&quot; style=\&quot;whiteSpace=wrap;html=1;rounded=1;fillColor=#f8cecc;strokeColor=#b85450;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;10\&quot; y=\&quot;345\&quot; width=\&quot;110\&quot; height=\&quot;35\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;18\&quot; value=\&quot;是\&quot; style=\&quot;edgeStyle=none;html=1;\&quot; parent=\&quot;1\&quot; source=\&quot;15\&quot; target=\&quot;17\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;Array as=\&quot;points\&quot;&gt;&lt;mxPoint x=\&quot;60\&quot; y=\&quot;895\&quot;/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;23\&quot; value=\&quot;否\&quot; style=\&quot;edgeStyle=none;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;15\&quot; target=\&quot;21\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;15\&quot; value=\&quot;测试确认bug是否为重复bug\&quot; style=\&quot;rhombus;whiteSpace=wrap;html=1;rounded=1;fillColor=#ffe6cc;strokeColor=#d79b00;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;25\&quot; y=\&quot;430\&quot; width=\&quot;80\&quot; height=\&quot;80\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;17\&quot; value=\&quot;关闭bug\&quot; style=\&quot;whiteSpace=wrap;html=1;rounded=1;fillColor=#d5e8d4;gradientColor=#97d077;strokeColor=#82b366;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;182.5\&quot; y=\&quot;880\&quot; width=\&quot;110\&quot; height=\&quot;30\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;28\&quot; value=\&quot;是\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;21\&quot; target=\&quot;25\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;36\&quot; value=\&quot;否\&quot; style=\&quot;edgeStyle=none;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;21\&quot; target=\&quot;33\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;21\&quot; value=\&quot;开发确认bug是否有效\&quot; style=\&quot;rhombus;whiteSpace=wrap;html=1;rounded=1;fillColor=#f8cecc;strokeColor=#b85450;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;200\&quot; y=\&quot;430\&quot; width=\&quot;80\&quot; height=\&quot;80\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;27\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=none;html=1;\&quot; parent=\&quot;1\&quot; source=\&quot;25\&quot; target=\&quot;26\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;25\&quot; value=\&quot;开发人员：修复bug\&quot; style=\&quot;whiteSpace=wrap;html=1;rounded=1;fillColor=#f8cecc;strokeColor=#b85450;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;185\&quot; y=\&quot;540\&quot; width=\&quot;110\&quot; height=\&quot;30\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;30\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;26\&quot; target=\&quot;29\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;26\&quot; value=\&quot;测试人员：复测bug\&quot; style=\&quot;whiteSpace=wrap;html=1;rounded=1;fillColor=#ffe6cc;strokeColor=#d79b00;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;185\&quot; y=\&quot;590\&quot; width=\&quot;110\&quot; height=\&quot;30\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;31\&quot; value=\&quot;是\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;29\&quot; target=\&quot;17\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;32\&quot; value=\&quot;否\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.25;entryDx=0;entryDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;29\&quot; target=\&quot;25\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;Array as=\&quot;points\&quot;&gt;&lt;mxPoint x=\&quot;90\&quot; y=\&quot;680\&quot;/&gt;&lt;mxPoint x=\&quot;90\&quot; y=\&quot;548\&quot;/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;29\&quot; value=\&quot;bug是否解决\&quot; style=\&quot;rhombus;whiteSpace=wrap;html=1;rounded=1;fillColor=#ffe6cc;strokeColor=#d79b00;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;200\&quot; y=\&quot;640\&quot; width=\&quot;80\&quot; height=\&quot;80\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;35\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=none;html=1;\&quot; parent=\&quot;1\&quot; source=\&quot;33\&quot; target=\&quot;34\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;33\&quot; value=\&quot;开发人员：拒绝bug\&quot; style=\&quot;whiteSpace=wrap;html=1;rounded=1;fillColor=#f8cecc;strokeColor=#b85450;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;340\&quot; y=\&quot;455\&quot; width=\&quot;110\&quot; height=\&quot;30\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;41\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.504;entryY=0.073;entryDx=0;entryDy=0;entryPerimeter=0;\&quot; parent=\&quot;1\&quot; source=\&quot;34\&quot; target=\&quot;37\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;Array as=\&quot;points\&quot;&gt;&lt;mxPoint x=\&quot;585\&quot; y=\&quot;510\&quot;/&gt;&lt;mxPoint x=\&quot;440\&quot; y=\&quot;510\&quot;/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;42\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;34\&quot; target=\&quot;39\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;43\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.515;entryY=0.083;entryDx=0;entryDy=0;entryPerimeter=0;\&quot; parent=\&quot;1\&quot; source=\&quot;34\&quot; target=\&quot;40\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;Array as=\&quot;points\&quot;&gt;&lt;mxPoint x=\&quot;585\&quot; y=\&quot;510\&quot;/&gt;&lt;mxPoint x=\&quot;711\&quot; y=\&quot;510\&quot;/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;34\&quot; value=\&quot;测试人员：分析原因\&quot; style=\&quot;whiteSpace=wrap;html=1;rounded=1;fillColor=#ffe6cc;strokeColor=#d79b00;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;530\&quot; y=\&quot;455\&quot; width=\&quot;110\&quot; height=\&quot;30\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;47\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;37\&quot; target=\&quot;46\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;37\&quot; value=\&quot;bug无法重现？\&quot; style=\&quot;rhombus;whiteSpace=wrap;html=1;rounded=1;fillColor=#dae8fc;strokeColor=#6c8ebf;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;400\&quot; y=\&quot;545\&quot; width=\&quot;80\&quot; height=\&quot;80\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;48\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;39\&quot; target=\&quot;45\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;39\&quot; value=\&quot;需求不一致\&quot; style=\&quot;rhombus;whiteSpace=wrap;html=1;rounded=1;fillColor=#dae8fc;strokeColor=#6c8ebf;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;545\&quot; y=\&quot;545\&quot; width=\&quot;80\&quot; height=\&quot;80\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;49\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;40\&quot; target=\&quot;44\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;40\&quot; value=\&quot;其他原因\&quot; style=\&quot;rhombus;whiteSpace=wrap;html=1;rounded=1;fillColor=#dae8fc;strokeColor=#6c8ebf;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;667.5\&quot; y=\&quot;545\&quot; width=\&quot;80\&quot; height=\&quot;80\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;44\&quot; value=\&quot;上报\&quot; style=\&quot;whiteSpace=wrap;html=1;rounded=1;fillColor=#d5e8d4;strokeColor=#82b366;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;665\&quot; y=\&quot;670\&quot; width=\&quot;85\&quot; height=\&quot;30\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;53\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;45\&quot; target=\&quot;50\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;45\&quot; value=\&quot;三方确定需求\&quot; style=\&quot;whiteSpace=wrap;html=1;rounded=1;fillColor=#d5e8d4;strokeColor=#82b366;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;542.5\&quot; y=\&quot;670\&quot; width=\&quot;85\&quot; height=\&quot;30\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;57\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;46\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;360\&quot; y=\&quot;685\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;46\&quot; value=\&quot;现场重现bug\&quot; style=\&quot;whiteSpace=wrap;html=1;rounded=1;fillColor=#d5e8d4;strokeColor=#82b366;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;397.5\&quot; y=\&quot;670\&quot; width=\&quot;85\&quot; height=\&quot;30\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;54\&quot; value=\&quot;否\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;50\&quot; target=\&quot;52\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;56\&quot; value=\&quot;是\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;50\&quot; target=\&quot;25\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;Array as=\&quot;points\&quot;&gt;&lt;mxPoint x=\&quot;360\&quot; y=\&quot;770\&quot;/&gt;&lt;mxPoint x=\&quot;360\&quot; y=\&quot;555\&quot;/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;50\&quot; value=\&quot;确认结果是否为bug\&quot; style=\&quot;rhombus;whiteSpace=wrap;html=1;rounded=1;fillColor=#fff2cc;strokeColor=#d6b656;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;545\&quot; y=\&quot;730\&quot; width=\&quot;80\&quot; height=\&quot;80\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;55\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;52\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;290\&quot; y=\&quot;895\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;52\&quot; value=\&quot;解决方案标注为设计如此\&quot; style=\&quot;whiteSpace=wrap;html=1;rounded=1;fillColor=#d5e8d4;strokeColor=#82b366;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;542.5\&quot; y=\&quot;880\&quot; width=\&quot;85\&quot; height=\&quot;30\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;/root&gt;&lt;/mxGraphModel&gt;&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}"></div></p><script type="text/javascript" src="https://viewer.diagrams.net/js/viewer-static.min.js"></script><h2 id="禅道"><a href="#禅道" class="headerlink" title="禅道"></a>禅道</h2><h3 id="禅道的安装："><a href="#禅道的安装：" class="headerlink" title="禅道的安装："></a>禅道的安装：</h3><p><a href="https://www.zentao.net/">https://www.zentao.net/</a><br>当前目录：D:\chandao\xampp\</p><p>正在启动……<br>正在安装服务：apachezt…安装成功。<br>正在启动服务：apachezt…端口:80…<br>成功启动服务，端口号为：80<br>正在安装服务：mysqlzt…安装成功。<br>正在启动服务：mysqlzt…端口:3306…失败。<br>再次尝试启动服务：mysqlzt…端口:3306…失败。<br>启动失败，请稍后重试。</p><p>更改端口号<br>禅道mysql端口不能与本地 mysql端口号不能冲突<br>禅道账号：admin   密码： zkf123456</p><p>A公司流程——瀑布流程，测试介入晚<br>产品创建计划→管理需求→指派UI→指派开发→指派测试→指派产品经理→对比</p><h3 id="缺陷报告组成"><a href="#缺陷报告组成" class="headerlink" title="缺陷报告组成"></a>缺陷报告组成</h3><ol><li>id  — 全项目中唯一bug编号   — 禅道自动生成</li><li><strong>标题</strong>    —一句话概括，描述现象，是bug的原因</li><li><strong>模块</strong>  — 缺陷发现的模块</li><li><strong>严重程度</strong>   —<br>   等级1  —致命的（urgent）—<br>   等级2   — 严重的（high）—主功能缺失<br>   等级3    — 中等的，一般的（medium） — 小功能，分支的缺失<br>   等级4    — 建议性小问题（low）— 页面字体小错误等</li><li><strong>bug描述</strong>：</li><li><strong>前置条件</strong></li><li><strong>操作步骤</strong></li><li><strong>预期结果</strong></li><li><strong>实际结果</strong></li><li><strong>优先级</strong>：<pre><code>级别1   -- 立即解决（bug-urgent）级别2   -- 下一个版本解决（bug-high）  级别3    -- 软件发布前（bug-medium）级别4    -- 尽量在软件产品发布前（low）</code></pre></li><li><em>附件</em>：发生bug时的界面截图，后添加报错日志截图，录屏<pre><code> 注意： 解决bug的成本越低，优先级越高 开发压力越小，优先级越高 影响范围越广，优先级越高</code></pre></li></ol><h2 id="排查缺陷的思路"><a href="#排查缺陷的思路" class="headerlink" title="排查缺陷的思路"></a>排查缺陷的思路</h2><ol><li><strong>依赖重要文档《测试用例</strong>： </li><li><strong>对比UI搞</strong>：比对出不一致点</li><li><strong>借助抓包工具</strong>：比对入参和出参的正确性</li><li><strong>检查数据库</strong>： 在数据库操作增删改查</li><li><strong>检查运行日志</strong>： 使用xshell工具链接服务器，检测后台运行日志</li><li><strong>站在用户角度</strong>：找到对系统的不满意度</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宠物医院相关接口</title>
      <link href="/posts/ca4dfde8.html"/>
      <url>/posts/ca4dfde8.html</url>
      
        <content type="html"><![CDATA[<h1 id="宠物医院项目关键接口"><a href="#宠物医院项目关键接口" class="headerlink" title="宠物医院项目关键接口"></a>宠物医院项目关键接口</h1><h4 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h4><p>请求方式： POST </p><p>路径： <a href="http://localhost:8080/login">http://localhost:8080/login</a></p><p>请求头：Content-Type: application/x-www-form-urlencoded</p><p>请求参数：</p><p>​    username: admin</p><p>​    password: 123456</p><p>响应案例：</p><p>​    {</p><pre><code>  &quot;result&quot;: &quot;success&quot;,  &quot;message&quot;: &quot;欢迎登陆&quot;</code></pre><p>​    }</p><h4 id="获取宠物列表"><a href="#获取宠物列表" class="headerlink" title="获取宠物列表"></a>获取宠物列表</h4><p>请求方式： POST </p><p>路径：  <a href="http://localhost:8080/user/pet/getAllByLimit">http://localhost:8080/user/pet/getAllByLimit</a></p><p>请求头：Content-Type: application/x-www-form-urlencoded</p><p>请求参数：</p><p>​    name:</p><p>​    page:1</p><p>​    limit:10</p><p>响应案例：</p><p>{<br>    “total”: 1,<br>    “rows”: [{<br>        “page”: null,<br>        “pageSize”: null,<br>        “sort”: null,<br>        “order”: null,<br>        “rows”: null,<br>        “limit”: null,<br>        “fromNum”: null,<br>        “id”: 33,<br>        “userId”: 1,<br>        “name”: “2号”,<br>        “weight”: 5.0,<br>        “height”: 20.0,<br>        “type”: “2”,<br>        “birthday”: “2022/10/09 00:00:00”,<br>        “img”: null,<br>        “createTime”: “2022/10/09 23:52:41”<br>    }],<br>    “other”: null<br>}</p><h4 id="申请预约就诊"><a href="#申请预约就诊" class="headerlink" title="申请预约就诊"></a>申请预约就诊</h4><p>请求方式： POST </p><p>路径：   <a href="http://localhost:8080/user/apply/doAdd">http://localhost:8080/user/apply/doAdd</a></p><p>请求头：Content-Type: application/x-www-form-urlencoded</p><p>请求参数：</p><p>petId: 33</p><p>info: 不吃饭！</p><p>phone: 13282135001</p><p>address: 武汉中南路330号</p><p>appTime: 2022-10-23 19:31:20</p><p>响应案例：</p><p>SUCCESS</p><h4 id="获取预约列表"><a href="#获取预约列表" class="headerlink" title="获取预约列表"></a>获取预约列表</h4><p>请求方式： POST </p><p>路径：    <a href="http://localhost:8080/user/apply/getAllByLimitDoctor">http://localhost:8080/user/apply/getAllByLimitDoctor</a></p><p>请求头：Content-Type: application/x-www-form-urlencoded</p><p>请求参数：</p><p>info: 不吃饭</p><p>page: 1</p><p>limit: 10</p><p>响应案例：</p><p>{<br>    “total”: 37,<br>    “rows”: [{<br>        “page”: null,<br>        “pageSize”: null,<br>        “sort”: null,<br>        “order”: null,<br>        “rows”: null,<br>        “limit”: null,<br>        “fromNum”: null,<br>        “id”: 40,<br>        “petId”: 33,<br>        “userId”: 1,<br>        “doctorId”: null,<br>        “appTime”: “2022/10/23 19:31:20”,<br>        “info”: “不吃饭！”,<br>        “phone”: “13282135001”,<br>        “address”: “武汉中南路330号”,<br>        “name”: null,<br>        “createTime”: “2022/10/22 19:31:27”,<br>        “status”: 1<br>    }],<br>    “other”: null<br>}</p><h4 id="通过预约"><a href="#通过预约" class="headerlink" title="通过预约"></a>通过预约</h4><p>请求方式： POST </p><p>路径：    <a href="http://localhost:8080/user/apply/chStatus">http://localhost:8080/user/apply/chStatus</a></p><p>请求头：Content-Type: application/x-www-form-urlencoded</p><p>请求参数：</p><p>id:40<br>status: 2</p><p>响应案例：</p><p>SUCCESS</p><h4 id="设置为“已就诊”"><a href="#设置为“已就诊”" class="headerlink" title="设置为“已就诊”"></a>设置为“已就诊”</h4><p>请求方式： POST </p><p>路径：     <a href="http://localhost:8080/user/apply/chStatus">http://localhost:8080/user/apply/chStatus</a></p><p>请求头：Content-Type: application/x-www-form-urlencoded</p><p>请求参数：</p><p>id:40<br>status: 4</p><p>响应案例：</p><p>jz</p><h4 id="新增就诊结果单"><a href="#新增就诊结果单" class="headerlink" title="新增就诊结果单"></a>新增就诊结果单</h4><p>请求方式： POST </p><p>路径：     <a href="http://localhost:8080/user/diagnosis/doAdd">http://localhost:8080/user/diagnosis/doAdd</a></p><p>请求头：Content-Type: application/x-www-form-urlencoded</p><p>请求参数：</p><p>userId: 1</p><p>petId: 33</p><p>info: 多喝热水！</p><p>type: 1</p><p>status: 1</p><p>响应案例：</p><p>SUCCESS</p><h4 id="校验是否登录"><a href="#校验是否登录" class="headerlink" title="校验是否登录"></a>校验是否登录</h4><p>请求方式： GET</p><p>路径：      <a href="https://open.shiguangkey.com/api/udb/login/isLogin">https://open.shiguangkey.com/api/udb/login/isLogin</a></p><p>请求头：</p><p>terminaltype: 4</p><p>token: undefined或用户身份令牌</p><p>请求参数：</p><p>无</p><p>响应案例：</p><p>{<br>    “traceId”: “84626b8514694b938ba01a717b985330”,<br>    “status”: “V108”,<br>    “msg”: “未登录”,<br>    “data”: {}<br>}</p><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>请求方式：  POST </p><p>路径：      <a href="https://open.shiguangkey.com/api/udb/login/standard">https://open.shiguangkey.com/api/udb/login/standard</a></p><p>请求头：</p><p>content-type: application/x-www-form-urlencoded</p><p>terminaltype: 4</p><p>token: undefined或用户身份令牌</p><p>请求参数：</p><p>account: 13282135001</p><p>password: 6Fw1dOZqm%2BbMFCQHQ7o1Og</p><p>inviteLinkId: </p><p>ticketLogin: 1</p><p>响应案例：</p><p>{<br>    “traceId”: “3c20fb93c70140b081854e04fcbd5e94”,<br>    “msg”: “success”,<br>    “data”: {<br>        “user”: {<br>            “uid”: 5147239,<br>            “needBindPhone”: false,<br>            “headImg”: “https:\/\/res.shiguangkey.com\/file\/202206\/29\/20220629180353941615043.jpg”,<br>            “openId”: “”,<br>            “newRegister”: false,<br>            “mobile”: “13282135001”,<br>            “nickname”: “苏芙蓉”,<br>            “showAccountList”: false,<br>            “account”: “m13282135001”<br>        },<br>        “token”: “106a17a4064e8a67344847c2a773ade0”<br>    },<br>    “status”: “0”<br>}</p><h4 id="获取个人信息"><a href="#获取个人信息" class="headerlink" title="获取个人信息"></a>获取个人信息</h4><p>请求方式： GET</p><p>路径：       <a href="https://open.shiguangkey.com/api/udb/user/mine">https://open.shiguangkey.com/api/udb/user/mine</a> </p><p>请求头：</p><p>terminaltype: 4</p><p>token: 用户身份令牌</p><p>请求参数：</p><p>无</p><p>响应案例：</p><p>{<br>    “traceId”: “50e381b533fe4ec28b7d48839178eeeb”,<br>    “status”: “0”,<br>    “msg”: “success”,<br>    “data”: {<br>        “userDetail”: {<br>            “uid”: 5147239,<br>            “account”: “m13282135001”,<br>            “phone”: “13282135001”,<br>            “nickname”: “苏芙蓉”,<br>            “nicknameLimit”: “”,<br>            “birthday”: 1604160000000,<br>            “headImg”: “<a href="https://res.shiguangkey.com/file/202206/29/20220629180353941615043.jpg">https://res.shiguangkey.com/file/202206/29/20220629180353941615043.jpg</a>“,<br>            “qq”: “8195889544”,<br>            “description”: “哈哈”,<br>            “realname”: “苏芙蓉，测试”,<br>            “gender”: 0,</p><p>​            … …</p><p>​        }<br>​    }<br>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端测试</title>
      <link href="/posts/e0661c49.html"/>
      <url>/posts/e0661c49.html</url>
      
        <content type="html"><![CDATA[<h2 id="移动端测试"><a href="#移动端测试" class="headerlink" title="移动端测试"></a><a href="https://fshby.top/test_exam/templates/functional9.html">移动端测试</a></h2><h3 id="App测试点"><a href="#App测试点" class="headerlink" title="App测试点"></a>App测试点</h3><ol><li>安全测试</li><li>安装测试</li><li>卸载测试</li><li>功能内容测试</li><li>APP升级</li><li>APP授权</li><li>时间时区</li><li>消息推送</li><li>手机极限情况</li><li>交叉事件测试</li><li>兼容性测试</li></ol><h3 id="小程序测试点"><a href="#小程序测试点" class="headerlink" title="小程序测试点"></a>小程序测试点</h3><ol><li>微信小程序定义</li><li>小程序特点</li><li>小程序的局限性</li><li>小程序的版本类型</li><li>小程序的测s试要点</li></ol><h3 id="小程序测试与APP测试的异同点"><a href="#小程序测试与APP测试的异同点" class="headerlink" title="小程序测试与APP测试的异同点"></a>小程序测试与APP测试的异同点</h3><ul><li>开发方面</li><li>权限方面</li><li>性能方面</li><li>兼容方面</li><li>测试场景</li><li>系统架构</li><li>缓存方面</li><li>运行流畅度</li><li>占用空间</li><li>下载和安装</li></ul><h2 id="安装android-sdk"><a href="#安装android-sdk" class="headerlink" title="安装android-sdk"></a>安装android-sdk</h2><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>安卓系统，基于linux+java开发<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ANDROID_HOME</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">ANDROID_HOME%\tools  --安卓截屏定位工具</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">ANDROID_HOME%\platform-tools  -- abd命令解释器</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">ANDROID_HOME%\build-tools\25.0.0 -- 转换工具</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="Android-adb命令"><a href="#Android-adb命令" class="headerlink" title="Android-adb命令"></a>Android-adb命令</h2><h3 id="链接手机端模拟器设备——雷电模拟器"><a href="#链接手机端模拟器设备——雷电模拟器" class="headerlink" title="链接手机端模拟器设备——雷电模拟器"></a>链接手机端模拟器设备——雷电模拟器</h3><ol><li>adb version  —版本号</li><li>adb connet emulator-5554 —链接设备“emulator-5554”雷电设备号</li><li>adb devices —查看当前设备</li><li>adb shell — 进入linux模式</li><li>adb -s emulator-554 shell — 进入指定设备的shell模式</li><li>exit —退出</li></ol><h3 id="在手机设备上安装-卸载apk软件"><a href="#在手机设备上安装-卸载apk软件" class="headerlink" title="在手机设备上安装/卸载apk软件"></a>在手机设备上安装/卸载apk软件</h3><ol><li>在安装设备上安装apk<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb install apk所在路径</span><br><span class="line">adb install  -r  apk所在路径</span><br><span class="line">adb -s 设备号 install apk所在路径</span><br></pre></td></tr></table></figure></li><li>卸载 apk<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">c d /data/app</span><br><span class="line">ls</span><br><span class="line">adb uninstall 包名  -- 卸载数据</span><br><span class="line">adb uninstall -k 包名  --保留数据卸载</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 查看包名：</span></span></span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">1.   adb shell pm list package -- 查看已有包名</span><br><span class="line">2.  adb shell pm list package -3 -- 查看费安卓，第三方安装的包名</span><br><span class="line">3.   pm  list package | grep &quot; wandou&quot; -- 查看已有包名</span><br></pre></td></tr></table></figure></li></ol><h3 id="文件写入："><a href="#文件写入：" class="headerlink" title="文件写入："></a>文件写入：</h3><ol><li>adb push 文件路径  手机文件夹路径 — 推送</li><li>adb pull   手机文件夹  电脑路径— 拉取 备注：权限问题，不能直接放在根目录下，至少有一个层级</li></ol><h3 id="屏幕截屏："><a href="#屏幕截屏：" class="headerlink" title="屏幕截屏："></a>屏幕截屏：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.  adb shell screencap 截图存放路径 --路径为手机路径</span><br><span class="line">2.  adb 服务启动和关闭</span><br><span class="line">3. adb kill-server  --结束</span><br><span class="line">4. adb start-server --开始</span><br></pre></td></tr></table></figure><h2 id="monkey测试"><a href="#monkey测试" class="headerlink" title="monkey测试"></a><a href="https://fshby.top/test_exam/templates/functional9.html">monkey测试</a></h2><p>Monkey 测试是一种为了测试软件的稳定性、健壮性的快速有效的方法；Monkey 程序是 <code>Android 系统自带的</code>，由 Java 语言写成，在 Android 文件系统中的存放路径是： <code>/system/framework/monkey.jar</code>；Monkey 程序需要通过 <code>adb</code> 来运行。</p><h3 id="monkey命令"><a href="#monkey命令" class="headerlink" title="monkey命令"></a>monkey命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey 行为参数 &gt; 日志保存路径</span><br></pre></td></tr></table></figure><p><strong>网易新闻monkey案例：</strong><br>adb shell monkey -p <span class='nota' data-nota='网易app包名'>com.netease.newsreader.activity</span> <span class='nota' data-nota='随机种子序列号'>-s 1662160204010</span> <span class='nota' data-nota='每个操作间隔100秒'>--throttle 100</span><span class='nota' data-nota='触摸事件占百分之三十'>--pct-touch 30</span><span class='nota' data-nota='忽略应用崩溃错误'>--ignore-crashes</span><span class='nota' data-nota='忽略程序发生异常的错误'>--ignore-timeouts</span><span class='nota' data-nota='忽略本地代码崩溃错误'>--ignore-native-crashes</span><span class='nota' data-nota='监控崩溃是本地代码'>--monitor-native-crashes</span><span class='nota' data-nota='执行1000次'>-v -v -v</span><span class='nota' data-nota='日志存放路径'>> d:\mylog.log</span></p>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试用例</title>
      <link href="/posts/aae8f5fa.html"/>
      <url>/posts/aae8f5fa.html</url>
      
        <content type="html"><![CDATA[<h2 id="测试用例："><a href="#测试用例：" class="headerlink" title="测试用例："></a>测试用例：</h2><h3 id="测试用例表头"><a href="#测试用例表头" class="headerlink" title="测试用例表头"></a>测试用例表头</h3><ol><li><strong>用例编号</strong>       —按项目标号 test_001</li><li><strong>标题</strong>         —  登录成功</li><li><strong>所属模块</strong>     —登录模块，注册模块</li><li><em>目的</em>         —  可省略 </li><li><strong>前置条件</strong>   —  当前所处页面，用户身份</li><li><strong>优先级</strong>       1、2、3、4  —  提测与冒烟用例优先级为最高优先级<pre><code> `次要标题优先级低于主要标题优先级` `反向错误标题优先级低于正向正确标题优先级`</code></pre></li><li><strong>测试步骤</strong>     —  一般为3~5个，最多不超过8个  </li><li><strong>测试数据</strong>      —   <code>成功</code>登录的数据，<code>错误</code>登录的数据</li><li><strong>预期结果</strong>      — 登录成功或登录失败“系统给予反馈的才有预期结果”</li><li><strong>实际结果</strong>      — 后期填写，通过或未通过以及跟预期的差异</li><li><em>备注</em>      — 特殊机型等特殊情况</li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ol><li>用词简介、清晰、专业、不能有歧义，易懂、注意断句，排版整洁</li><li>提前了解公司测试用例要求</li><li>测试步骤明确</li><li>注意调整颗粒度   —颗粒度大，整体简洁，但是用例步骤过多</li></ol><h2 id="设计测试用例的方法"><a href="#设计测试用例的方法" class="headerlink" title="设计测试用例的方法"></a><a href="https://fshby.top/test_exam/templates/functional8.html">设计测试用例的方法</a></h2><h3 id="等价类划分-—-划分范围取代表数据测试"><a href="#等价类划分-—-划分范围取代表数据测试" class="headerlink" title="等价类划分  — 划分范围取代表数据测试"></a>等价类划分  — 划分范围取代表数据测试</h3><ol><li>应用场景： 输入框、文件选择，时间选择</li><li>等价类划分：<br><strong>有效等价类</strong>——正向正确数据，系统提示反馈<br><strong>无效等价类</strong> ——反向错误数据，系统提示反馈<div class="img-wrap"><div class="img-bg"><img class="img" src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/046af9ec-fb0a-4e45-b2cb-650ce7b4fccf.png" alt="即时贴-等价类划分" style="width:800px;height:200px;"/></div><span class="image-caption">即时贴-等价类划分</span></div></li></ol><ul><li>注意事项：<br>1) 据类型覆盖<br>2) 数字（覆盖、整数、负数，小数）<br>3) 整数与负数分开测试 — 负数的补码算法不同与正数<br>4)  数字是无效等价类的时候，不用拆分正负数测试<br>5)  字母（大写，小写）<br>6) 语言（不同国家语言）<br>7) 特殊符号（emog表情，输入法自带的特殊符号</li></ul><h3 id="边界值"><a href="#边界值" class="headerlink" title="边界值"></a>边界值</h3><ol><li>应用场景：在有效数据与无效数据之间</li><li>边界值划分：<pre><code>1)  最大值：**max** 【有效数据中的最大值) 2)  最小值：**max**【有效数据中的最小值】3)  有效最大次边界：**max -**【比最大值小1个单位】4)  无效最大次边界：**max +**【大比最大值1个单位】5)  有效最小次边界：**min+**【比最小值大1个单位】6)  无效最小次边界：**min -**【比最小值小1个单位】</code></pre></li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/20fdf1a0-40fc-4cfd-b05b-9c2dbf1af39e.png" alt="注册程序-等价类划分，边界值划分" style="width:800px;height:400px;"/></div><span class="image-caption">注册程序-等价类划分，边界值划分</span></div><h3 id="因果图"><a href="#因果图" class="headerlink" title="因果图"></a>因果图</h3><ol><li>应用场景：条件和条件之间存在相互依存或互斥的关系</li><li>因果关系划分：<br>1)   <strong>￣恒等于</strong>           — a为0，b为0<br>2)  <strong>∧与</strong>（和、并且）    — 全1为1<br>3)  <strong>∨或</strong>        — 全0为0 ，有1为1<br>4)  <strong>~非(相反</strong>)    —如果a为1，那么b为0<br>5)  <strong>E 互斥关系</strong>    — 单选框<br> 6) <strong>O 唯一关系</strong>     — 有且仅有一个<br> 7)<strong> I  包含关系</strong>      — 必须选，也可以选多个<br> 7) <strong>R  要求关系</strong>       —a为真，要求b也为真<br> 8) <strong>M 屏蔽关系</strong>          — 如果a为1，那么b为0；错误弹窗屏蔽，仅显示一个错误弹窗，</li></ol><h3 id="判定表法"><a href="#判定表法" class="headerlink" title="判定表法"></a>判定表法</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/39b6de2f-6c8d-46fb-a66f-08dbf6759855.png" alt="一卡通充值-判定表" style="width:800px;height:300px;"/></div><span class="image-caption">一卡通充值-判定表</span></div><h3 id="正交排列法"><a href="#正交排列法" class="headerlink" title="正交排列法"></a><a href="https://fshby.top/test_exam/templates/functional8.html">正交排列法</a></h3><p>用最有代表性的数据进行测试</p><ol><li><strong> 应用场景</strong>：当条件过多，使用穷举法太过繁琐时</li><li><strong>正交表 </strong> <script type="math/tex">L_n\left ( M^k \right )</script><script type="math/tex; mode=display">-- 常用正交表类型：L_4\left\{2^3\right\} ,L_8\left\{2^7\right\} ,L_12\left\{2^11\right\} ,L_9\left\{3^4\right\} ,L_16\left\{4^5\right\} ,L_25\left\{5^6\right\} ,L_8\left\{4\times2^4\right\} ,L_12\left\{3\times2^4\right\} ,L_16\left\{4^4\times2^3\right\} ,</script>L:行s<br>n：总行数<br>M：每列的最大值，也叫列出备选流“水平”—  选项<br>k：列数，也加“因素”    — 控件</li></ol><h3 id="场景法"><a href="#场景法" class="headerlink" title="场景法"></a>场景法</h3><p>应用场景：流程性用例，正向流程与异常流程<br>基本流：正向没有错误的基本流程<br>备选流：在基本流的基础上的分支流程，由异常或错误引起，4类<br><strong>使用步骤</strong>：<br>步骤一——先写出基本流<br>步骤二——根据基本流和备选流列出场景<br>步骤三——根据场景，设计相应的测试用例<br>步骤四——去掉重复场景，补充测试数据<br>步骤五——编写测试用例</p><h3 id="错误推导法"><a href="#错误推导法" class="headerlink" title="错误推导法"></a>错误推导法</h3><ol><li>基于经验和直觉推测程序可能存在的各种错误，有针对性地设计测试用例的方法</li><li><strong>错误推论方向</strong>：<br>1) 凭借对<strong>项目</strong>的理解度：了解项目中薄弱的地方。针对性使用错误数据和操作，破坏性使用薄弱功能。<br>2) 根据<strong>个人经验</strong><br>3)  凭借对<strong>开发人员和开发经理的理解</strong>：了解同时的工作风格，判断出“他”可能容易在那些地方犯错误。</li></ol><h2 id="用例测试的顺序"><a href="#用例测试的顺序" class="headerlink" title="用例测试的顺序"></a>用例测试的顺序</h2><p><strong>确定UI界面→场景法→正向场景→根据控件选择测试方法→逆向场景→错误推论</strong></p><h2 id="用例执行状态"><a href="#用例执行状态" class="headerlink" title="用例执行状态"></a>用例执行状态</h2><ol><li><strong>Block（阻塞）</strong>：功能或者测试环境等的欠缺、受其他bug影响，导致测试不能进行到底</li><li><strong>Fail（失败</strong>：当实际执行结果与预期结果不符时</li><li><strong>Pass（通过</strong>）：当实际执行结果与预期结果相符</li><li><strong>N/A（不适用）</strong>：客观原因导致无法适用于当前测试</li><li><strong>Investigate（观察）</strong>：当用例正在执行中，但是需要耗较多时间去观察其结果</li><li><strong>No Test（未执行）</strong>：当用例还没开始执行时</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试需求与测试点</title>
      <link href="/posts/4b54fda.html"/>
      <url>/posts/4b54fda.html</url>
      
        <content type="html"><![CDATA[<h2 id="：测试需求的特征"><a href="#：测试需求的特征" class="headerlink" title="：测试需求的特征"></a>：<a href="https://fshby.top/test_exam/templates/functional5.html">测试需求的特征</a></h2><ol><li>可核实</li><li>不含具体的测试数据</li><li>满足正常的前置条件</li></ol><h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><ol><li>必须参加需求评审，熟悉业务的过程</li><li>确保正式工作前，各方（产品经理，开发，测试人员）对需求的理解一致</li><li>理清主业务功能</li><li>挖掘潜在需求</li></ol><h2 id="测试需求工具"><a href="#测试需求工具" class="headerlink" title="测试需求工具"></a>测试需求工具</h2><ol><li>流程图 XMind<br>1) 模块\列表<br>2) 前端交互、后端交互、访问权限<br>3) 前端交互 — 页面交互、页面元素、操作逻辑<br>4) 后端交互 — 相关接口、相关数据表、相关sql<div class="img-wrap"><div class="img-bg"><img class="img" src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/3c68c299-dfbf-4b31-bda1-175d2c0f93d2.png" alt="思维导图测试点模板" style="width:800px;height:400px;"/></div><span class="image-caption">思维导图测试点模板</span></div></li><li>思维导图 drawio</li><li>表格excel</li></ol><h2 id="手机验证码限制："><a href="#手机验证码限制：" class="headerlink" title="手机验证码限制："></a>手机验证码限制：</h2><ol><li>格式判断（前端限制格式）</li><li>有效 （第三方大厂判断是否有效）</li><li>时间限制（限制60秒）</li><li>写缓存<br>redis_key_13000000，限制一个小时内有线条数</li><li>测试环境跳过限制的方法：白名单、万能验证码、清缓存</li></ol><h2 id="宠物物医院管理系统"><a href="#宠物物医院管理系统" class="headerlink" title="宠物物医院管理系统"></a><a href="https://fshby.top/test_exam/templates/functional5.html">宠物物医院管理系统</a></h2><ol><li>运行phms项目</li><li>快压打开jar包内D:\phms\BOOT-INF\classes\application.properties文件</li><li>查看服务器端口号和数据库端口号，并修改为本地数据库链接端口</li><li><p>java -jar   phms-1.0.jar</p><p>注意：可以直接phms-1.0.jar文件拖动到dos命令窗口，直接显示路径，可运行<br>localhost:8082  端口本地打开<br>账号admin<br>密码1234561. </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试基础</title>
      <link href="/posts/c2577fef.html"/>
      <url>/posts/c2577fef.html</url>
      
        <content type="html"><![CDATA[<h2 id="软件基础"><a href="#软件基础" class="headerlink" title="软件基础"></a>软件基础</h2><h4 id="软件的构成"><a href="#软件的构成" class="headerlink" title="软件的构成"></a>软件的构成</h4><p><strong><code>软件 = 程序 +文档 + 数据</code></strong></p><ul><li>程序：程序员通过开发语言编写的代码集合</li><li>文档：软件开发过程中所产生的图文文档集合，如《需求规格说明书》、《用户手册》、《数据库设计说明书》等</li><li>数据：使用软件过程中所产生的的本地数据，以及服务器数据</li></ul><h3 id="软件研发中的角色"><a href="#软件研发中的角色" class="headerlink" title="软件研发中的角色"></a>软件研发中的角色</h3><p>一款软件的诞生，离不开中间多种岗位角色的努力</p><ol><li><strong><code>产品经理</code></strong>：负责市场调研用户需求，确定需求方向，设计软件产品的原型</li><li><em>项目经理</em>：负责驱动整个项目组的运转，制定项目计划、安排人力、管理进度、协调团队等</li><li><em>系统架构师</em>：负责设计满足需求的系统主体框架结构、系统模块设计、项目技术选型，指导程序员进行开发工作</li><li><strong>UI设计师/交互设计师</strong>：负责根据产品原型设计出符合要求界面设计稿、交互设计稿，提供给前端程序员进行界面开发</li><li><strong>前端开发工程师</strong>：负责前端界面编程开发工作，包括web端、安卓端、IOS端、PC桌面程序端</li><li><strong>后端开发工程师</strong>：负责后端逻辑编程开发工作，包括业务逻辑处理、数据增删改查、性能优化等</li><li><strong>测试工程师</strong>：负责测试软件的功能性、易用性、准确性等，发现软件的bug，推进bug解决，最终呈现出较完美的软件</li><li><em>运维</em>：负责将软件发布上线、监测管理服务器工作情况</li><li><em>DBA</em>：数据库管理员，负责各个环境的数据管理、制定数据库使用标准</li><li><p><em>运营</em>：负责软件日常线上运营，收集分析用户行为，根据用户情况调整项目运营策略，从而扩展用户群体和创收</p><h3 id="软件文档"><a href="#软件文档" class="headerlink" title="软件文档"></a>软件文档</h3><p>软件在研发过程中，会产生许多文档，用于推进项目开发上线</p></li><li><p>产品经理：《客户需求说明书》、《需求收集分析书》、《竞品分析》、《需求规格说明书》、<code>《原型稿》</code></p></li><li>项目经理：<code>《项目计划书（立项书）》</code>、《项目版本计划书》</li><li>系统架构师：《技术选型报告》、《概要设计说明书》</li><li>UI设计师/交互设计师：<code>《UI设计稿</code>》、《交互设计稿》</li><li>前端开发工程师：暂无</li><li>后端开发工程师：<code>《数据库设计说明书》</code>、<code>《接口设计说明书》</code></li><li>测试工程师：<code>《测试计划》</code>、《测试方案》、《测试需求分析》、<code>《测试用例》</code>、<code>《缺陷跟踪单》</code>、<code>《测试报告》</code></li><li>运维：暂无</li><li>DBA：暂无</li><li>运营：《运营方案说明书》</li></ol><h3 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a><a href="https://fshby.top/test_exam/templates/functional3.html">软件过程</a></h3><p><strong>概念：软件产品从最初构思到公开发行上线的过程，称为软件开发过程。通常会根据软件开发模型进行软件开发工作的推进。</strong><br>常见的软件开发模型：</p><ol><li>瀑布模型：最传统、最常规的模型，注重结构化和流程。</li><li>V模型：快速应用开发模型，每一个开发环节都有相对于的测试方案。</li><li>W模型：测试工作和开发工作同步并行，测试工作贯穿整个项目流程。</li><li>螺旋模型：在软件开发初期阶段需求不是很明确时，采用渐进式的开发模型，边摸索边前进。</li><li>X模型：对V模型的完善，更注重探索性测试</li><li>敏捷开发模型：以用户的需求为核心，快速进行项目迭代</li></ol><h3 id="软件生命周期"><a href="#软件生命周期" class="headerlink" title="软件生命周期"></a>软件生命周期</h3><p><strong>需求→设计→编码→测试→维护→升级→废弃</strong></p><h3 id="质量的六大特征"><a href="#质量的六大特征" class="headerlink" title="质量的六大特征"></a>质量的六大特征</h3><ol><li>功能性</li><li>可靠性</li><li>易用性</li><li>效率</li><li>维护性</li><li>可移植性</li></ol><h3 id="QA和QC"><a href="#QA和QC" class="headerlink" title="QA和QC"></a>QA和QC</h3><p>概念：</p><ul><li>QA：主要是事先的质量保证类活动，以预防为主。期望降低错误的发生几率。例如，提前指定质量规范、流程、标准等。</li><li>QC：主要是事后的质量检验类活动为主，默认错误是允许的。期望发现并选出错误、跟进错误解决。</li></ul><h3 id="真实项目开发流程"><a href="#真实项目开发流程" class="headerlink" title="真实项目开发流程"></a>真实项目开发流程</h3><p><strong>面试问答：*</strong>上家公司的项目流程是什么？*<br><code>答：</code><br>我上一家公司使用的是传统的项目流程，每次版本大约会经历2~3周左右的时间，流程大概是这样的：<br>①首先，产品经理会收集需求，需求可能来自于市场、领导、运营部门等。收集到需求后，会进行需求可行性分析，最终设计成原型图，并组织需求评审。需求评审通过的话，项目经理会进行立项；不通过的话，产品经理需要二改需求，再举行需求二审，直到需求评审通过。<br>②项目立项后，UI人员会根据原型图设计UI稿，并举行UI稿评审会，测试人员也需要参加会议，因为后续需要进行UI界面测试。<br>③同时，后端开发人员会根据需求原型设计数据表结构、接口设计，并出具相关的文档，也会举行评审会，测试人员也会参会，因为后续需要进行数据准确性校验、接口测试。<br>④与此同时，测试组长会编写测试计划，在计划当中规定好测试范围、测试策略、以及每个测试组员需要负责的模块等。<br>⑤测试人员接到分配的模块任务，开始对需求进行分解，一般会使用Excel表格、流程图或者xmind思维导图来分解需求，目的是为了更加透彻地理解需求。<br>⑥接下来，测试组员开始编写测试用例，功能测试用例一般会使用到等价类、边界值、判定表、场景法、错误推论等设计方法。编写完测试用例，会邀请对应的测试人员、开发人员、产品经理一同参与用例评审。若评审通过，用例就基本成型；若评审不通过，那么就需要二改，直到用例评审通过为止。<br>⑦等前后端开发人员完成编码后，会进行项目联调。联调完成，开发人员会先进行自测，自测用例由测试人员提供。自测通过，会正式进行提测。<br>⑧项目提测后，测试人员会进行一次冒烟测试，一般冒烟测试通过率达到90%，项目才可正式进入测试阶段。否则，会打回项目，重新进行项目调整后，再提测。<br>⑨正式进入测试阶段后，测试人员会逐条执行测试用例，记录下测试结果。若实际操作结果与预期结果不符合，则视为bug。就需要在bug管理工具上，如禅道上进行提bug、bug追踪。直到所有的用例都执行完毕，bug都解决完毕。但，偶尔也允许出现遗留bug，就算是遗留bug，也需要给出后续的解决方案，一般遗留bug数量不能超过2%。<br>⑩测试完成后，会编写测试报告，描述项目的测试结果、bug分布、遗留bug、风险、是否通过测试等。并让产品经理、UI设计人员进行验收，在必要情况下，会要求代表用户进行项目内测，有问题再及时修改。<br>⑪ 验收完成，运维就会安排项目上线。上线后，测试人员会使用专用的测试账号进行线上验收测试，验收完成进行线上脏数据处理。<br>⑫ 最终，会举行一个项目复盘会议，总结项目研发过程中的遇到的技术问题、协作问题等，后续要如何避免。<br>这样，一个版本的项目就完成了！</p><div class="mxgraph" style="max-width:100%;border:1px solid transparent;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;toolbar&quot;:&quot;zoom layers tags lightbox&quot;,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile pages=\&quot;1\&quot;&gt;&lt;diagram id=\&quot;Mfa5drCXC6esvAyqOZNi\&quot; name=\&quot;Page-1\&quot;&gt;&lt;mxGraphModel dx=\&quot;1842\&quot; dy=\&quot;865\&quot; grid=\&quot;0\&quot; gridSize=\&quot;10\&quot; guides=\&quot;1\&quot; tooltips=\&quot;1\&quot; connect=\&quot;1\&quot; arrows=\&quot;1\&quot; fold=\&quot;1\&quot; page=\&quot;0\&quot; pageScale=\&quot;1\&quot; pageWidth=\&quot;827\&quot; pageHeight=\&quot;1169\&quot; background=\&quot;#ffffff\&quot; math=\&quot;0\&quot; shadow=\&quot;0\&quot;&gt;&lt;root&gt;&lt;mxCell id=\&quot;0\&quot;/&gt;&lt;mxCell id=\&quot;1\&quot; parent=\&quot;0\&quot;/&gt;&lt;mxCell id=\&quot;173\&quot; value=\&quot;\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;strokeWidth=3;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1732\&quot; y=\&quot;211\&quot; width=\&quot;322\&quot; height=\&quot;4092\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;46\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.25;exitDx=0;exitDy=0;fontSize=29;\&quot; parent=\&quot;1\&quot; source=\&quot;2\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;468.7142857142858\&quot; y=\&quot;886\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;2\&quot; value=\&quot;\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;136\&quot; y=\&quot;200\&quot; width=\&quot;322\&quot; height=\&quot;4092\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;4\&quot; value=\&quot;\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;strokeWidth=3;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;458\&quot; y=\&quot;200\&quot; width=\&quot;322\&quot; height=\&quot;4092\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;5\&quot; value=\&quot;\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;strokeWidth=3;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;780\&quot; y=\&quot;200\&quot; width=\&quot;322\&quot; height=\&quot;4092\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;6\&quot; value=\&quot;\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1102\&quot; y=\&quot;200\&quot; width=\&quot;322\&quot; height=\&quot;4092\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;7\&quot; value=\&quot;\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;strokeWidth=3;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1424\&quot; y=\&quot;200\&quot; width=\&quot;322\&quot; height=\&quot;4092\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;9\&quot; value=\&quot;\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;strokeWidth=3;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2068\&quot; y=\&quot;200\&quot; width=\&quot;322\&quot; height=\&quot;4096\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;10\&quot; value=\&quot;\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;strokeWidth=3;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2390\&quot; y=\&quot;200\&quot; width=\&quot;322\&quot; height=\&quot;4096\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;11\&quot; value=\&quot;产品经理\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;fontSize=26;fontStyle=1\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;130\&quot; y=\&quot;200\&quot; width=\&quot;326\&quot; height=\&quot;74\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;13\&quot; value=\&quot;架构师\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fillColor=#b1ddf0;strokeColor=#10739e;fontSize=26;fontStyle=1;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;460\&quot; y=\&quot;200\&quot; width=\&quot;320\&quot; height=\&quot;74\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;14\&quot; value=\&quot;项目负责人\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fillColor=#ffe6cc;strokeColor=#d79b00;fontSize=26;fontStyle=1\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;782\&quot; y=\&quot;200\&quot; width=\&quot;320\&quot; height=\&quot;74\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;15\&quot; value=\&quot;设计师（UI+交互设计）\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fillColor=#e1d5e7;strokeColor=#9673a6;fontSize=26;fontStyle=1\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1103\&quot; y=\&quot;200\&quot; width=\&quot;320\&quot; height=\&quot;74\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;17\&quot; value=\&quot;前端开发\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;fontSize=26;fontStyle=1\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1425\&quot; y=\&quot;200\&quot; width=\&quot;320\&quot; height=\&quot;74\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;18\&quot; value=\&quot;后端开发\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fillColor=#ffcc99;strokeColor=#36393d;fontSize=26;fontStyle=1\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1748\&quot; y=\&quot;200\&quot; width=\&quot;320\&quot; height=\&quot;74\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;19\&quot; value=\&quot;测试人员\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fillColor=#cdeb8b;strokeColor=#36393d;fontSize=26;fontStyle=1;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2070\&quot; y=\&quot;200\&quot; width=\&quot;320\&quot; height=\&quot;74\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;20\&quot; value=\&quot;运维\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fillColor=#cce5ff;strokeColor=#36393d;fontSize=26;fontStyle=1\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2390\&quot; y=\&quot;200\&quot; width=\&quot;320\&quot; height=\&quot;74\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;24\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;fontSize=26;strokeWidth=3;\&quot; parent=\&quot;1\&quot; source=\&quot;21\&quot; target=\&quot;23\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;21\&quot; value=\&quot;收集需求\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;177\&quot; y=\&quot;344\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;26\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;fontSize=26;strokeWidth=3;\&quot; parent=\&quot;1\&quot; source=\&quot;23\&quot; target=\&quot;25\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;23\&quot; value=\&quot;分析需求&amp;lt;br&amp;gt;竞品分析\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;177\&quot; y=\&quot;484\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;28\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;fontSize=26;strokeWidth=3;\&quot; parent=\&quot;1\&quot; source=\&quot;25\&quot; target=\&quot;27\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;25\&quot; value=\&quot;设计原理&amp;lt;br&amp;gt;编写需求说明书\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=2;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;177\&quot; y=\&quot;624\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;27\&quot; value=\&quot;举行需求评审\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;fillColor=#b0e3e6;strokeColor=#0e8088;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;177\&quot; y=\&quot;764\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;31\&quot; value=\&quot;\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;strokeWidth=3;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;76\&quot; y=\&quot;200\&quot; width=\&quot;58\&quot; height=\&quot;4093\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;33\&quot; value=\&quot;\&quot; style=\&quot;endArrow=none;html=1;fontSize=26;entryX=1.014;entryY=0.168;entryDx=0;entryDy=0;entryPerimeter=0;\&quot; parent=\&quot;1\&quot; target=\&quot;10\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry width=\&quot;50\&quot; height=\&quot;50\&quot; relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;77\&quot; y=\&quot;893\&quot; as=\&quot;sourcePoint\&quot;/&gt;&lt;mxPoint x=\&quot;2747\&quot; y=\&quot;893\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;34\&quot; value=\&quot;&amp;lt;b style=&amp;quot;line-height: 300%&amp;quot;&amp;gt;&amp;lt;font style=&amp;quot;font-size: 30px&amp;quot;&amp;gt;需求分析阶段&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;\&quot; style=\&quot;text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=29;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;85\&quot; y=\&quot;524\&quot; width=\&quot;40\&quot; height=\&quot;20\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;40\&quot; value=\&quot;\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=29;fillColor=#f9f7ed;strokeColor=#36393d;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;76\&quot; y=\&quot;200\&quot; width=\&quot;60\&quot; height=\&quot;74\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;41\&quot; value=\&quot;需求分解&amp;lt;br&amp;gt;设计项目框架\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=2;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;492\&quot; y=\&quot;984\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;42\&quot; value=\&quot;人员排兵布阵\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;815\&quot; y=\&quot;984\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;43\&quot; value=\&quot;\&quot; style=\&quot;endArrow=classic;html=1;fontSize=29;exitX=1;exitY=0.5;exitDx=0;exitDy=0;strokeWidth=3;entryX=0.5;entryY=0;entryDx=0;entryDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;27\&quot; target=\&quot;61\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry width=\&quot;50\&quot; height=\&quot;50\&quot; relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;509\&quot; y=\&quot;825\&quot; as=\&quot;sourcePoint\&quot;/&gt;&lt;mxPoint x=\&quot;2044\&quot; y=\&quot;775\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;Array as=\&quot;points\&quot;&gt;&lt;mxPoint x=\&quot;2230\&quot; y=\&quot;800\&quot;/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;45\&quot; value=\&quot;\&quot; style=\&quot;endArrow=classic;html=1;fontSize=29;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.563;entryY=0.183;entryDx=0;entryDy=0;entryPerimeter=0;strokeWidth=4;\&quot; parent=\&quot;1\&quot; source=\&quot;27\&quot; target=\&quot;42\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry width=\&quot;50\&quot; height=\&quot;50\&quot; relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;264\&quot; y=\&quot;934\&quot; as=\&quot;sourcePoint\&quot;/&gt;&lt;mxPoint x=\&quot;314\&quot; y=\&quot;884\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;Array as=\&quot;points\&quot;&gt;&lt;mxPoint x=\&quot;304\&quot; y=\&quot;880\&quot;/&gt;&lt;mxPoint x=\&quot;958\&quot; y=\&quot;875\&quot;/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;50\&quot; value=\&quot;需求外审\&quot; style=\&quot;text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=30;fontStyle=1\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;540\&quot; y=\&quot;734\&quot; width=\&quot;159\&quot; height=\&quot;40\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;51\&quot; value=\&quot;需求内审\&quot; style=\&quot;text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=29;fontStyle=1\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;325.5\&quot; y=\&quot;852\&quot; width=\&quot;159\&quot; height=\&quot;20\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;53\&quot; value=\&quot;\&quot; style=\&quot;endArrow=classic;html=1;fontSize=29;strokeWidth=4;\&quot; parent=\&quot;1\&quot; target=\&quot;41\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry width=\&quot;50\&quot; height=\&quot;50\&quot; relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;618\&quot; y=\&quot;880\&quot; as=\&quot;sourcePoint\&quot;/&gt;&lt;mxPoint x=\&quot;643\&quot; y=\&quot;802\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;56\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; source=\&quot;54\&quot; target=\&quot;55\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;54\&quot; value=\&quot;设计UI稿和交互设计\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1119.5\&quot; y=\&quot;984\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;55\&quot; value=\&quot;UI评审\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;fillColor=#cce5ff;strokeColor=#36393d;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1119.5\&quot; y=\&quot;1124\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;68\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; source=\&quot;57\&quot; target=\&quot;67\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;57\&quot; value=\&quot;前端选型\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1458\&quot; y=\&quot;984\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;70\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; source=\&quot;67\&quot; target=\&quot;69\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;Array as=\&quot;points\&quot;&gt;&lt;mxPoint x=\&quot;1586\&quot; y=\&quot;1615\&quot;/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;67\&quot; value=\&quot;前端页面开发\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1458\&quot; y=\&quot;1327\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;75\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; source=\&quot;69\&quot; target=\&quot;74\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;69\&quot; value=\&quot;q前后端联调\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1619\&quot; y=\&quot;1575.5\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;175\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=none;html=1;\&quot; parent=\&quot;1\&quot; source=\&quot;74\&quot; target=\&quot;174\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;74\&quot; value=\&quot;开发自测\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1619\&quot; y=\&quot;1692.5\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;60\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; source=\&quot;58\&quot; target=\&quot;59\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;58\&quot; value=\&quot;数据库设计&amp;lt;br&amp;gt;接口设计\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1781\&quot; y=\&quot;984\&quot; width=\&quot;254\&quot; height=\&quot;68\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;72\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; source=\&quot;59\&quot; target=\&quot;71\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;59\&quot; value=\&quot;数据库设计评审&amp;lt;br&amp;gt;接口设计评审\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;fillColor=#cce5ff;strokeColor=#36393d;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1781\&quot; y=\&quot;1124\&quot; width=\&quot;254\&quot; height=\&quot;68\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;73\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; source=\&quot;71\&quot; target=\&quot;69\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;71\&quot; value=\&quot;接口开发\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1781\&quot; y=\&quot;1319\&quot; width=\&quot;254\&quot; height=\&quot;68\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;63\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; source=\&quot;61\&quot; target=\&quot;62\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;61\&quot; value=\&quot;需求分析\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2103\&quot; y=\&quot;984\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;79\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; source=\&quot;62\&quot; target=\&quot;78\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;62\&quot; value=\&quot;编写测试计划&amp;lt;br&amp;gt;编写测试方案\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2103\&quot; y=\&quot;1124\&quot; width=\&quot;254\&quot; height=\&quot;62\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;81\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; source=\&quot;78\&quot; target=\&quot;80\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;78\&quot; value=\&quot;需求分解\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2102\&quot; y=\&quot;1319\&quot; width=\&quot;254\&quot; height=\&quot;62\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;83\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; source=\&quot;80\&quot; target=\&quot;82\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;80\&quot; value=\&quot;编写测试用例\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2102\&quot; y=\&quot;1418\&quot; width=\&quot;254\&quot; height=\&quot;62\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;85\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; source=\&quot;82\&quot; target=\&quot;84\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;82\&quot; value=\&quot;测试用例评审\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;fillColor=#cce5ff;strokeColor=#36393d;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2102\&quot; y=\&quot;1513.5\&quot; width=\&quot;254\&quot; height=\&quot;62\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;96\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;84\&quot; target=\&quot;95\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;176\&quot; style=\&quot;edgeStyle=none;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;strokeWidth=3;entryX=0.75;entryY=0;entryDx=0;entryDy=0;\&quot; parent=\&quot;1\&quot; source=\&quot;84\&quot; target=\&quot;174\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;Array as=\&quot;points\&quot;&gt;&lt;mxPoint x=\&quot;1997\&quot; y=\&quot;1687\&quot;/&gt;&lt;mxPoint x=\&quot;1997\&quot; y=\&quot;1774\&quot;/&gt;&lt;mxPoint x=\&quot;1809\&quot; y=\&quot;1774\&quot;/&gt;&lt;/Array&gt;&lt;mxPoint x=\&quot;1746\&quot; y=\&quot;1774\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;84\&quot; value=\&quot;提供自测用例\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2102\&quot; y=\&quot;1655.5\&quot; width=\&quot;254\&quot; height=\&quot;62\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;98\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;95\&quot; target=\&quot;97\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;95\&quot; value=\&quot;冒烟测试\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2102\&quot; y=\&quot;1830.5\&quot; width=\&quot;254\&quot; height=\&quot;62\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;100\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;97\&quot; target=\&quot;99\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;97\&quot; value=\&quot;一轮功能测试\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2102\&quot; y=\&quot;1986\&quot; width=\&quot;254\&quot; height=\&quot;62\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;102\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;99\&quot; target=\&quot;101\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;99\&quot; value=\&quot;提交bug&amp;lt;br&amp;gt;指派bug给开发\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2102\&quot; y=\&quot;2128\&quot; width=\&quot;254\&quot; height=\&quot;82\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;104\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;101\&quot; target=\&quot;103\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;101\&quot; value=\&quot;指派bug给开发\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2102\&quot; y=\&quot;2290\&quot; width=\&quot;254\&quot; height=\&quot;82\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;106\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;103\&quot; target=\&quot;105\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;103\&quot; value=\&quot;认领确认bug\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1619\&quot; y=\&quot;2290\&quot; width=\&quot;254\&quot; height=\&quot;82\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;109\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;105\&quot; target=\&quot;108\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;105\&quot; value=\&quot;恢复bug\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1619\&quot; y=\&quot;2432\&quot; width=\&quot;254\&quot; height=\&quot;82\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;111\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;108\&quot; target=\&quot;110\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;108\&quot; value=\&quot;指派bug给测试\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1619\&quot; y=\&quot;2557.5\&quot; width=\&quot;254\&quot; height=\&quot;82\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;113\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;110\&quot; target=\&quot;112\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;110\&quot; value=\&quot;验证bug\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2103\&quot; y=\&quot;2557.5\&quot; width=\&quot;254\&quot; height=\&quot;82\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;119\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=30;entryX=0.5;entryY=0.008;entryDx=0;entryDy=0;entryPerimeter=0;\&quot; parent=\&quot;1\&quot; source=\&quot;112\&quot; target=\&quot;115\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;2230\&quot; y=\&quot;2867.9999999999995\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;112\&quot; value=\&quot;验证bug\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2103\&quot; y=\&quot;2720\&quot; width=\&quot;254\&quot; height=\&quot;68\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;64\&quot; value=\&quot;\&quot; style=\&quot;endArrow=none;html=1;strokeWidth=3;fontSize=29;exitX=-0.017;exitY=0.265;exitDx=0;exitDy=0;exitPerimeter=0;entryX=1.025;entryY=0.26;entryDx=0;entryDy=0;entryPerimeter=0;\&quot; parent=\&quot;1\&quot; source=\&quot;31\&quot; target=\&quot;10\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry width=\&quot;50\&quot; height=\&quot;50\&quot; relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;241\&quot; y=\&quot;1279\&quot; as=\&quot;sourcePoint\&quot;/&gt;&lt;mxPoint x=\&quot;291\&quot; y=\&quot;1229\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;65\&quot; value=\&quot;&amp;lt;span style=&amp;quot;font-size: 30px&amp;quot;&amp;gt;&amp;lt;b style=&amp;quot;line-height: 240%&amp;quot;&amp;gt;设计阶段&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;\&quot; style=\&quot;text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=29;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;90\&quot; y=\&quot;1079.5\&quot; width=\&quot;40\&quot; height=\&quot;20\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;66\&quot; value=\&quot;&amp;lt;span style=&amp;quot;font-size: 30px&amp;quot;&amp;gt;&amp;lt;b style=&amp;quot;line-height: 240%&amp;quot;&amp;gt;开发阶段&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;\&quot; style=\&quot;text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=29;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;85\&quot; y=\&quot;1469.5\&quot; width=\&quot;40\&quot; height=\&quot;20\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;86\&quot; value=\&quot;\&quot; style=\&quot;endArrow=none;html=1;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry width=\&quot;50\&quot; height=\&quot;50\&quot; relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;65\&quot; y=\&quot;1800\&quot; as=\&quot;sourcePoint\&quot;/&gt;&lt;mxPoint x=\&quot;2717\&quot; y=\&quot;1793\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;88\&quot; value=\&quot;\&quot; style=\&quot;endArrow=classic;html=1;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; target=\&quot;54\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry width=\&quot;50\&quot; height=\&quot;50\&quot; relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;1249\&quot; y=\&quot;792\&quot; as=\&quot;sourcePoint\&quot;/&gt;&lt;mxPoint x=\&quot;1273\&quot; y=\&quot;563\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;89\&quot; value=\&quot;\&quot; style=\&quot;endArrow=classic;html=1;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry width=\&quot;50\&quot; height=\&quot;50\&quot; relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;1587\&quot; y=\&quot;792\&quot; as=\&quot;sourcePoint\&quot;/&gt;&lt;mxPoint x=\&quot;1584.837837837838\&quot; y=\&quot;984\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;90\&quot; value=\&quot;\&quot; style=\&quot;endArrow=classic;html=1;strokeWidth=3;fontSize=29;\&quot; parent=\&quot;1\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry width=\&quot;50\&quot; height=\&quot;50\&quot; relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;1925\&quot; y=\&quot;794\&quot; as=\&quot;sourcePoint\&quot;/&gt;&lt;mxPoint x=\&quot;1922.837837837838\&quot; y=\&quot;986\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;94\&quot; value=\&quot;&amp;lt;span style=&amp;quot;font-size: 30px&amp;quot;&amp;gt;&amp;lt;b style=&amp;quot;line-height: 320%&amp;quot;&amp;gt;测试阶段&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;\&quot; style=\&quot;text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=29;direction=north;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;101\&quot; y=\&quot;2522\&quot; width=\&quot;8\&quot; height=\&quot;51\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;122\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;115\&quot; target=\&quot;101\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;124\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;115\&quot; target=\&quot;123\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;115\&quot; value=\&quot;bug是否修复\&quot; style=\&quot;rhombus;whiteSpace=wrap;html=1;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2102\&quot; y=\&quot;2876\&quot; width=\&quot;257\&quot; height=\&quot;117\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;126\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;123\&quot; target=\&quot;125\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;123\&quot; value=\&quot;关闭bug\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2105\&quot; y=\&quot;3026.5\&quot; width=\&quot;254\&quot; height=\&quot;68\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;128\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;125\&quot; target=\&quot;127\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;125\&quot; value=\&quot;第二轮功能测试\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;fillColor=#f5f5f5;strokeColor=#666666;fontColor=#333333;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2105\&quot; y=\&quot;3146\&quot; width=\&quot;254\&quot; height=\&quot;68\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;130\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;127\&quot; target=\&quot;129\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;127\&quot; value=\&quot;交叉测试\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2105\&quot; y=\&quot;3260.5\&quot; width=\&quot;254\&quot; height=\&quot;68\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;158\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;129\&quot; target=\&quot;143\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;129\&quot; value=\&quot;申请验收\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2105\&quot; y=\&quot;3367\&quot; width=\&quot;254\&quot; height=\&quot;68\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;131\&quot; value=\&quot;\&quot; style=\&quot;endArrow=none;html=1;strokeWidth=3;fontSize=30;entryX=1.035;entryY=0.8;entryDx=0;entryDy=0;entryPerimeter=0;\&quot; parent=\&quot;1\&quot; target=\&quot;10\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry width=\&quot;50\&quot; height=\&quot;50\&quot; relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;77\&quot; y=\&quot;3463\&quot; as=\&quot;sourcePoint\&quot;/&gt;&lt;mxPoint x=\&quot;2232\&quot; y=\&quot;3483\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;138\&quot; value=\&quot;&amp;lt;span style=&amp;quot;font-size: 30px&amp;quot;&amp;gt;&amp;lt;b style=&amp;quot;line-height: 290%&amp;quot;&amp;gt;验收阶段&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;\&quot; style=\&quot;text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=29;direction=north;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;102\&quot; y=\&quot;3686\&quot; width=\&quot;8\&quot; height=\&quot;51\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;142\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;139\&quot; target=\&quot;141\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;139\&quot; value=\&quot;产品功能验收\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;169\&quot; y=\&quot;3537\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;159\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;141\&quot; target=\&quot;145\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;141\&quot; value=\&quot;验收完成\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;169\&quot; y=\&quot;3626\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;147\&quot; value=\&quot;\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;143\&quot; target=\&quot;146\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;143\&quot; value=\&quot;UI验收\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1136\&quot; y=\&quot;3537\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;156\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;146\&quot; target=\&quot;155\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;146\&quot; value=\&quot;提交UI bug\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1136\&quot; y=\&quot;3626\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;152\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;148\&quot; target=\&quot;145\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;148\&quot; value=\&quot;验收完成\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1136\&quot; y=\&quot;3766\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;167\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;145\&quot; target=\&quot;162\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;145\&quot; value=\&quot;封板，申请上线\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;821\&quot; y=\&quot;3766\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;157\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;155\&quot; target=\&quot;148\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;155\&quot; value=\&quot;页面调整\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1458\&quot; y=\&quot;3626\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;160\&quot; value=\&quot;\&quot; style=\&quot;endArrow=none;html=1;strokeWidth=3;fontSize=30;exitX=0.026;exitY=0.909;exitDx=0;exitDy=0;exitPerimeter=0;\&quot; parent=\&quot;1\&quot; source=\&quot;31\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry width=\&quot;50\&quot; height=\&quot;50\&quot; relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;258\&quot; y=\&quot;4005\&quot; as=\&quot;sourcePoint\&quot;/&gt;&lt;mxPoint x=\&quot;2716\&quot; y=\&quot;3919\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;161\&quot; value=\&quot;&amp;lt;span style=&amp;quot;font-size: 30px&amp;quot;&amp;gt;&amp;lt;b style=&amp;quot;line-height: 170%&amp;quot;&amp;gt;上线&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;\&quot; style=\&quot;text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=29;direction=north;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;103.5\&quot; y=\&quot;3976\&quot; width=\&quot;11\&quot; height=\&quot;51\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;166\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;162\&quot; target=\&quot;164\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;162\&quot; value=\&quot;上线\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2423\&quot; y=\&quot;3967\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;171\&quot; style=\&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;strokeWidth=3;fontSize=30;\&quot; parent=\&quot;1\&quot; source=\&quot;164\&quot; target=\&quot;168\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;164\&quot; value=\&quot;线上验证\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;2113\&quot; y=\&quot;3967\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;168\&quot; value=\&quot;&amp;lt;div style=&amp;quot;text-align: justify&amp;quot;&amp;gt;&amp;lt;span&amp;gt;项目复盘&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;align=center;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;247\&quot; y=\&quot;4152\&quot; width=\&quot;2078\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;169\&quot; value=\&quot;\&quot; style=\&quot;endArrow=none;html=1;strokeWidth=3;fontSize=30;entryX=1.012;entryY=0.951;entryDx=0;entryDy=0;entryPerimeter=0;\&quot; parent=\&quot;1\&quot; target=\&quot;10\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry width=\&quot;50\&quot; height=\&quot;50\&quot; relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;76\&quot; y=\&quot;4104\&quot; as=\&quot;sourcePoint\&quot;/&gt;&lt;mxPoint x=\&quot;269\&quot; y=\&quot;4077\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;170\&quot; value=\&quot;&amp;lt;span style=&amp;quot;font-size: 30px&amp;quot;&amp;gt;&amp;lt;b style=&amp;quot;line-height: 230%&amp;quot;&amp;gt;复盘&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;\&quot; style=\&quot;text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=29;direction=north;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;95.5\&quot; y=\&quot;4161\&quot; width=\&quot;11\&quot; height=\&quot;51\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;172\&quot; value=\&quot;\&quot; style=\&quot;endArrow=none;html=1;strokeWidth=7;fontSize=30;\&quot; parent=\&quot;1\&quot; edge=\&quot;1\&quot;&gt;&lt;mxGeometry width=\&quot;50\&quot; height=\&quot;50\&quot; relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;78\&quot; y=\&quot;4298\&quot; as=\&quot;sourcePoint\&quot;/&gt;&lt;mxPoint x=\&quot;2720\&quot; y=\&quot;4298\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;177\&quot; style=\&quot;edgeStyle=none;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;strokeWidth=3;\&quot; edge=\&quot;1\&quot; parent=\&quot;1\&quot; source=\&quot;174\&quot; target=\&quot;95\&quot;&gt;&lt;mxGeometry relative=\&quot;1\&quot; as=\&quot;geometry\&quot;&gt;&lt;mxPoint x=\&quot;2108\&quot; y=\&quot;1875\&quot; as=\&quot;targetPoint\&quot;/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;mxCell id=\&quot;174\&quot; value=\&quot;提测\&quot; style=\&quot;rounded=0;whiteSpace=wrap;html=1;fontSize=26;fontStyle=1;strokeWidth=3;perimeterSpacing=0;\&quot; parent=\&quot;1\&quot; vertex=\&quot;1\&quot;&gt;&lt;mxGeometry x=\&quot;1619\&quot; y=\&quot;1832.5\&quot; width=\&quot;254\&quot; height=\&quot;60\&quot; as=\&quot;geometry\&quot;/&gt;&lt;/mxCell&gt;&lt;/root&gt;&lt;/mxGraphModel&gt;&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}"></div><p><script type="text/javascript" src="https://viewer.diagrams.net/js/viewer-static.min.js"></script></p><h2 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a><a href="https://fshby.top/test_exam/templates/functional4.html">软件测试</a></h2><p> <strong>在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的<span class='p red'>过程</span>。</strong></p><h3 id="软件测试分类"><a href="#软件测试分类" class="headerlink" title="软件测试分类"></a>软件测试分类</h3><h4 id="按阶段分类"><a href="#按阶段分类" class="headerlink" title="按阶段分类"></a>按阶段分类</h4><ol><li>单元测试<br>针对每一个方法代码测试，一般有后端工程师自测，或由专门的<code>白盒测试</code>人员测试</li><li>集成测试<br>对集成的子系统进行测试，一部分代码不可见，属于<code>灰盒测试</code></li><li>系统测试<br>将已经集成好的系统与计算机硬件、外设、网络等其他元素结合在一起，模拟实际使用环境下的测试工作，属于<code>黑盒测试</code>。</li><li>验收测试<ul><li><code>属于黑盒测试</code>，其主要目的是确保软件准备就绪，并且可以让最终用户将其用于执行软件的既定功能和任务</li><li>非正式验收测试：Alpha 测试（α测试）、Beta 测试（β测试）<br>1)    Alpha 测试（α测试）:由一个用户在开发环境下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的测试。俗称内测。<br>2)   Beta 测试（β测试）:开发给一部分用户进行真实使用场景测试，并要求用户报告异常情况、提出批评意见，然后软件开发公司再对β版本进行改错和完善。俗称公测。</li><li>正式验收测试：有正规的测试过程，需要制定测试计划、定义测试方案、选择测试用例，进行测试，结果提交。着重考虑软件是否满足合同规定的所有功能和性能，文档资料是否完整、准确，人机界面和其他方面</li></ul></li></ol><h3 id="按是否查看代码分类"><a href="#按是否查看代码分类" class="headerlink" title="按是否查看代码分类"></a>按是否查看代码分类</h3><ol><li>黑盒测试 </li><li>白盒测试</li></ol><h3 id="按功能作用分类"><a href="#按功能作用分类" class="headerlink" title="按功能作用分类"></a>按功能作用分类</h3><ol><li>兼容性测试<br>2.安全性测试</li><li>性能测试</li><li>接口测试</li><li>自动化测试</li><li>app测试</li><li>大数据测试</li></ol><h3 id="其他测试"><a href="#其他测试" class="headerlink" title="其他测试"></a>其他测试</h3><ol><li>冒烟测试</li><li>回归测试</li><li>随机测试</li><li>静态测试</li><li>动态测试</li></ol><h3 id="软件测试的基本流程"><a href="#软件测试的基本流程" class="headerlink" title="软件测试的基本流程"></a>软件测试的基本流程</h3><ol><li>需求分析<a href="/posts/4b54fda.html"></a></li><li>制定测试计划</li><li>制定测试方案</li><li>需求分解<a href=""></a></li><li>编写测试用例<a href="/posts/aae8f5fa.html"></a></li><li>测试用例评审</li><li>搭建测试环境</li><li>执行冒烟测试</li><li>执行测试用例</li><li>缺陷跟踪管理</li><li>回归测试</li><li>验收测试</li><li>出具测试报告</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git与SVN</title>
      <link href="/posts/38e2e82d.html"/>
      <url>/posts/38e2e82d.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git分布式开发工具"><a href="#Git分布式开发工具" class="headerlink" title="Git分布式开发工具"></a>Git分布式开发工具</h2><h3 id="Git分布式版本控制"><a href="#Git分布式版本控制" class="headerlink" title="Git分布式版本控制"></a>Git分布式版本控制</h3><ol><li>workspace：本地电脑</li><li>index/stage：暂存区</li><li>repository：本地仓库</li><li>remote：远程仓库  ，可以克隆到本地</li></ol><h3 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a><a href="https://fshby.top/test_exam/templates/functional1.html">文件状态</a></h3><ol><li>未被追踪：<strong>？？</strong> 在工作区创建文件，没有添加到暂存区</li><li>已添加到暂存区： <strong>绿色A</strong>   文件已被标识可追踪</li><li>已添加到暂存区，后修改过：<strong>红色M</strong>    修改文件件没有被追踪</li><li>已提交到仓库区： </li></ol><h3 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h3><ol><li>配置全局用户名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;zhengkunfeng&quot;</span><br></pre></td></tr></table></figure></li><li>配置全局邮箱<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;10053444+zheng-kunfeng@user.noreply.gitee.com&quot;</span><br></pre></td></tr></table></figure><h3 id="创建-git-仓库"><a href="#创建-git-仓库" class="headerlink" title="创建 git 仓库"></a>创建 git 仓库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir fshby</span><br><span class="line">cd fshby</span><br><span class="line">git init  <span class="comment">-- 初始化文件夹</span></span><br><span class="line">touch README.md <span class="comment">-- 新建注意文件</span></span><br><span class="line">git <span class="keyword">add</span> README.md <span class="comment">-- 将文件添加到暂存区</span></span><br><span class="line">git <span class="keyword">commit</span> <span class="operator">-</span>m &quot;first commit&quot; <span class="comment">-- 将文件提交到本地仓库（暂存区）</span></span><br><span class="line">git remote <span class="keyword">add</span> origin https:<span class="operator">/</span><span class="operator">/</span>gitee.com<span class="operator">/</span>zheng<span class="operator">-</span>kunfeng<span class="operator">/</span>fshby.git <span class="comment">--链接远程仓库，</span></span><br><span class="line">git push <span class="operator">-</span>u origin master <span class="comment">-- 将本地的文件推送到makter分支中</span></span><br></pre></td></tr></table></figure><h3 id="已有仓库"><a href="#已有仓库" class="headerlink" title="已有仓库"></a>已有仓库</h3></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd existing_git_repo <span class="comment">-- </span></span><br><span class="line">git remote <span class="keyword">add</span> origin https:<span class="operator">/</span><span class="operator">/</span>gitee.com<span class="operator">/</span>zheng<span class="operator">-</span>kunfeng<span class="operator">/</span>fshby.git</span><br><span class="line">git push <span class="operator">-</span>u origin master   <span class="comment">--推送到主分支</span></span><br></pre></td></tr></table></figure><p><code>提交失败时：</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="comment">--rebase origin master -- 提交失败时使用，拉取远程分支将远程库文件合并到本地</span></span><br></pre></td></tr></table></figure><br><code>重新推送</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push <span class="operator">-</span>u origin master </span><br></pre></td></tr></table></figure></p><h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a><a href="https://fshby.top/test_exam/templates/functional1.html">git常用命令</a></h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/db8f304d-c625-42fa-9307-227bf264654a.png" alt="常用命令速查表" style="width:800px;height:600px;"/></div><span class="image-caption">常用命令速查表</span></div><p>git version      —- 查看当前版本<br>git init           — 初始化<br>git config —global  user.email “ “    — 设置全局项<br>git config —global   user.name””    — 设置全局项<br>git config —list      — 查看仓库配置项<br>git clone             —  克隆仓库， 只能将远程文件克隆到本地仓库，不能增删，上传<br>git add 文件名 文件名……   —添加文件<br>git add.   — 添加所有文件到暂存区，追踪<br>git status -s  —查看简单文件状态<br>git status  — 查看详细文件状态<br>git diff  — 查看文件差异<br>git commit -m 文件名 文件名  — 提交多个文件<br>git commit -m “描述信息”  —将文件提交到本地仓仓库<br>git commit -am  — 已修改文件，跳过add命令，直接提交到仓库区（提交暂存区被追踪的所有文件）<br>git log — 查看历史提交记录<br>git remote add origin 仓库地址  —链接远程仓库,添加远程仓库<br>gti remote -v — 查看远程仓库地址<br>git pull origin master  — 将远程文件合并到本地<br>git pull —rebase origin master — 提交失败时使用，拉取远程分支将远程库文件合并到本地<br>git push origin master — 将本地master分支推送到origin主机分支<br>git push -u origin “master” — 将本地master分支推送到origin主机分支，同时设置可以直接使用git bush<br>git branch  — 查看分支<br>git branch 分支名— 创建分支<br>git checkout  分支名—切换分支，会将主分支内容copy到小分支上，用于测试<br>git push origin 分支名 —推送分支到云端仓库<br>git branch -d 分支名   —删除本地分支<br>git fetch origin 分支名  —远程<br>git remote remove  — 解除当前连接</p><h3 id="遇到问题："><a href="#遇到问题：" class="headerlink" title="遇到问题："></a>遇到问题：</h3><p><em>错误403</em>：无权访问<br>控制面板中，删除Windows凭证，有关did的凭证<br><em>推送遇到错误</em>：版本不一致<br>先拉取远程分支同步版本<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="comment">-- rebase origin master</span></span><br></pre></td></tr></table></figure></p><h2 id="SVN集中式开发工具"><a href="#SVN集中式开发工具" class="headerlink" title="SVN集中式开发工具"></a><a href="https://fshby.top/test_exam/templates/functional2.html">SVN集中式开发工具</a></h2><h3 id="svn与git的区别："><a href="#svn与git的区别：" class="headerlink" title="svn与git的区别："></a>svn与git的区别：</h3><p>git分布式：随地访问操作<br>svn集中式：在一个局域网下才可以访问操作</p><h3 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h3><p>checkout：检出<br>update：更新<br>commit：提交<br>所有文件在中心版本库<br>同一个局域网，图形化操作<br>流程：<br>运维搭建svn服务端<br>员工本地装svn客户端</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>问题客户端解决文件冲突，提取同一个版本，同时提交，晚提交的人会报错为：提交失败文件存在冲突</li><li>无法访问时，确定一下条件是否满足<br>1) 是在同一局域网下<br>2) 有访问权限<br>3) 不是是加密端口8040<br>4) 关闭防火墙</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/posts/fe4ef317.html"/>
      <url>/posts/fe4ef317.html</url>
      
        <content type="html"><![CDATA[<h2 id="linux-命令与Git和ADB命令的区别："><a href="#linux-命令与Git和ADB命令的区别：" class="headerlink" title="linux 命令与Git和ADB命令的区别："></a>linux 命令与Git和ADB命令的区别：</h2><p>Linux、Git和ADB是三个不同的命令，它们用于不同的用途。以下是它们之间的简要区别：</p><ol><li>Linux命令：Linux命令是指用于在Linux操作系统中执行特定任务的命令。Linux命令可以用于<code>文件和目录管理、软件安装和配置、系统监视等任务</code>。Linux命令可以通过终端或终端模拟器使用。</li><li><a href="/posts/38e2e82d.html">Git命令</a>：Git是一种版本控制系统，用于管理软件开发项目的源代码。Git命令用于在本地计算机和Git服务器之间进行源<code>代码的提交、拉取、合并和冲突解决等操作</code>。Git是一种非常流行的开源工具，广泛用于软件开发中。</li><li><a href="/posts/e0661c49.html"> ADB命令</a>：ADB是Android Debug Bridge的缩写，是一种用于与Android设备进行通信的命令行工具。ADB命令可以用于<code>安装应用程序、调试应用程序、备份和恢复数据等任务</code>。ADB命令可以通过终端或终端模拟器使用。</li></ol><h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h2><h3 id="选择驱动"><a href="#选择驱动" class="headerlink" title="选择驱动"></a>选择驱动</h3><ol><li><strong>使用物理默认驱动器</strong></li><li><strong>使用自定义的ISO映象文件</strong><br>在选择虚拟机驱动和ISO文件时，需要注意以下几点：<br>1) 虚拟机驱动和ISO文件应该与虚拟机软件版本相匹配。<br>2) 如果需要安装操作系统，则需要选择与操作系统版本和类型相匹配的ISO文件。<br>3) 如果使用虚拟机进行网络连接，则需要选择合适的网络适配器驱动。<br>4) 对于高性能虚拟机，建议选择支持硬件加速的虚拟机驱动。</li></ol><h3 id="添加连接"><a href="#添加连接" class="headerlink" title="添加连接"></a>添加连接</h3><p>虚拟机连接是指在主机和虚拟机之间建立网络连接的过程。选择虚拟机连接的方法取决于许多因素，例如网络类型、操作系统和使用场景等。<br>1) <strong>桥接连接</strong>（Bridged Connection）：此连接方法将虚拟机连接到物理网络上，虚拟机可以直接与物理网络中的其他设备通信。这种连接方法适用于需要<code>虚拟机与主机网络进行交互的场景</code>。<br>2)<strong> NAT连接</strong>（Network Address Translation）：此连接方法将虚拟机连接到主机的网络上，并使用主机的IP地址作为虚拟机的地址。这种连接方法适用于在主机上运行多个虚拟机的场景，以及需要将虚拟机隔离在主机网络之外的场景。<br>3) <strong>Host-only连接</strong>：此连接方法将虚拟机连接到主机上的虚拟网络中，虚拟机可以与主机和其他虚拟机通信，但无法访问外部网络。这种连接方法适用于需要隔离虚拟机和主机网络的场景，以及需要创建私有网络的场景。<br>4) <strong>内部连接</strong>（Internal Connection）：此连接方法将虚拟机连接到一个私有网络中，只有虚拟机之间可以通信，无法访问外部网络。这种连接方法适用于需要在虚拟机之间创建私有网络的场景。</p><h2 id="安装Xshell"><a href="#安装Xshell" class="headerlink" title="安装Xshell"></a>安装Xshell</h2><p>点击压缩包绿化，如果有报错运行’/Xshell6\缺dll文件报错请装这里面的程序’路径下的连个补丁程序</p><h3 id="连接虚拟机"><a href="#连接虚拟机" class="headerlink" title="连接虚拟机"></a>连接虚拟机</h3><ol><li><strong>目标虚拟机</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">运维人员给出  </span><br><span class="line">IP:192.168.25.142 </span><br><span class="line">账号 ：root</span><br><span class="line">密码：123456</span><br></pre></td></tr></table></figure></li><li><strong>对应连接</strong><br>对应操纵：<br>名字随机填写<br>填写虚拟机主机IP：192.168.25.142<br>信息接受保存<br>填写用户名<br>输入密码</li><li><strong>注意：</strong><br>使用root管理员权限时，<strong><code>#</code></strong>号开头</li></ol><h2 id="linux-常用命令"><a href="#linux-常用命令" class="headerlink" title="linux 常用命令"></a><a href="https://fshby.top/test_exam/templates/linux2.html">linux 常用命令</a></h2><h3 id="结束进程与tab补全"><a href="#结束进程与tab补全" class="headerlink" title="结束进程与tab补全"></a>结束进程与tab补全</h3><ol><li>ctrl+c： 结束进程</li><li>ctrl+z：挂起进程</li><li>tab：     补全名称</li></ol><h3 id="ls查看目录"><a href="#ls查看目录" class="headerlink" title="ls查看目录"></a>ls查看目录</h3><ol><li>ls： 查看文件夹文件夹</li><li>ls / ：查看指定路径文件夹</li><li>ls -a： 查看当前路径下全部文件（包含隐藏文件——隐藏文件在文1. 件名前有’.’文件引用符号）</li><li>ls -l：查看当前路径下文件的详细信息</li><li>ls：al： 查看全部文件详细信息</li></ol><h3 id="cd切换目录"><a href="#cd切换目录" class="headerlink" title="cd切换目录"></a>cd切换目录</h3><ol><li>cd： 切换目录</li><li>cd / :切换到根目录</li><li>cd / bin ：绝对路径，在任意目录下寻找文件bin</li><li>cd bin ： 相对路径，在当前目录下寻找文件bin</li><li>cd ~：快速切换到root目录</li><li>cd ..:回到上一级目录</li></ol><h3 id="查看当前目录路径"><a href="#查看当前目录路径" class="headerlink" title="查看当前目录路径"></a>查看当前目录路径</h3><p>pwd ：查看路径</p><h3 id="mkdir创建文件夹"><a href="#mkdir创建文件夹" class="headerlink" title="mkdir创建文件夹"></a>mkdir创建文件夹</h3><ol><li>mkdir 文件名：在当前路径下创建文件夹</li><li>mkdir /bin/test: 在指定路径下</li></ol><h3 id="rm删除文件夹"><a href="#rm删除文件夹" class="headerlink" title="rm删除文件夹"></a>rm删除文件夹</h3><ol><li>rm 文件名：删除当前目录下指定文件</li><li>rm -f 文件名：删除当前目录下指定文件，没有二次确认</li><li>rm -r 目录名：删除当前路径下的目录</li><li>rm -rf 目录名：删除当前路径下的目录，没有二次确认</li><li>rm -rf *:删除当前目录下所有文件和目录</li></ol><h3 id="mkdir创建文件夹-1"><a href="#mkdir创建文件夹-1" class="headerlink" title="mkdir创建文件夹"></a>mkdir创建文件夹</h3><ol><li>mv 老名称 新名称: 修改目录名</li><li>mv /usr/tool  /opt: 将tool文件剪切到opt目录下</li><li>mv -r/usr/tmp/tool  /opt:</li></ol><h3 id="touch新增文件与find查找文件"><a href="#touch新增文件与find查找文件" class="headerlink" title="touch新增文件与find查找文件"></a>touch新增文件与find查找文件</h3><ol><li>touch text.txt :新增文件</li><li>find /bin -name ‘a*’: 查找目录下a开头的目录</li></ol><h3 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h3><ol><li>vi 文件名： 打开文件</li><li>vim 文件名：打开文件</li></ol><h4 id="打开文件后，编辑文件有三种模式："><a href="#打开文件后，编辑文件有三种模式：" class="headerlink" title="打开文件后，编辑文件有三种模式："></a>打开文件后，编辑文件有三种模式：</h4><ol><li>命令模式：<br>1) 进入文件就是命令模式<br>2)  dd：删除当前行<br>3) i：光标在第一行<br>4) a: 光标在最后一行<br>5) o：光标在最后一行，且另起一行<br>6) ：：进入底行模式</li><li>插入模式：<br> 1) 此时可以修改文件内容<br> 2) esc：进入底行模式</li><li>底行模式：<br>1)  ：q  : 退出编辑<br>2)  ：q! :  强制退出<br>3)  :wq  :  退出保存命令</li></ol><h3 id="cat查看文件与tail实时监测日志文件"><a href="#cat查看文件与tail实时监测日志文件" class="headerlink" title="cat查看文件与tail实时监测日志文件"></a>cat查看文件与tail实时监测日志文件</h3><ol><li>cat test.log ：从第一行查看文件</li><li>tac test.log ： 从最后一行查看文件</li><li><strong>more test.log</strong>: 一页显示文件内容<br>1)  空格——下一页<br> 2) 回车——下一行<br>2)  Q——退出<br> 3) B——上一页</li><li>less test.log ：一页显示文件内容,可查关键字</li><li>head test.log :阅读前10行</li><li>head -n 200 test.log :阅读前前200行</li><li>tail test.log :阅读前10行</li><li>tail -n 200 test.log :阅读前前200行<br>9.<strong> <code>tail -f test.log:实时监测实时，动态打印</code></strong></li><li>tail -1000f test.log: 先监测最新的1000行内容，并实时监测实时，动态打印</li></ol><h3 id="chomd授权"><a href="#chomd授权" class="headerlink" title="chomd授权"></a>chomd授权</h3><p>chomd 777 test.log  授予最好权限，可读，可写，可执行</p><h3 id="tar-zxvf解压："><a href="#tar-zxvf解压：" class="headerlink" title="tar -zxvf解压："></a>tar -zxvf解压：</h3><ol><li>tar -zxvf test.tar  :解压文件到当前目录</li><li>tar -zxvf test.tar -C/usr/XXX：解压文件到指定文件夹</li><li>unzip test.zip :根据解压文件类型使用不同的解压方式</li></ol><h3 id="wget下载命令"><a href="#wget下载命令" class="headerlink" title="wget下载命令"></a>wget下载命令</h3><p>wget <a href="https://download.redis.io/releases/redis-6.2.6.tar.gz">https://download.redis.io/releases/redis-6.2.6.tar.gz</a></p><h3 id="make编译文件"><a href="#make编译文件" class="headerlink" title="make编译文件"></a>make编译文件</h3><p>make</p><h3 id="防火墙："><a href="#防火墙：" class="headerlink" title="防火墙："></a>防火墙：</h3><ol><li>service iptables status  查看防火墙的状态</li><li>service iptables status    查看iptables服务的状态</li><li>service iptables start    开启iptables服务</li><li>service iptables stop    停止iptables服务</li><li>service iptables restart    重启iptables服务</li><li>chkconfig iptables off    关闭iptables服务的开机自启动</li><li>chkconfig iptables on    开启iptables服务的开机自启动</li></ol><h3 id="centos-7-防火墙："><a href="#centos-7-防火墙：" class="headerlink" title="centos 7 防火墙："></a>centos 7 防火墙：</h3><ol><li>systemctl status firewalld.service    查看防火墙状态</li><li>systemctl stop firewalld.service    关闭运行的防火墙</li><li>systemctl disable firewalld.service    永久禁止防火墙服务</li></ol><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><ol><li>ifconfig: 查看ip</li><li>dhclient ens33: 重置ens33网络</li></ol><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ol><li>ps -ef：查看进程</li><li><strong>ps -ef | grep nginx:  筛选进程</strong></li><li>kill 1800: 终止进程</li><li>kill -9 1800: 强制终止进程</li></ol><h3 id="linux系统自带文件夹："><a href="#linux系统自带文件夹：" class="headerlink" title="linux系统自带文件夹："></a>linux系统自带文件夹：</h3><p><strong>bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</strong><br>用户文件一般存储在root目录下</p><h3 id="开机与用户选择"><a href="#开机与用户选择" class="headerlink" title="开机与用户选择"></a>开机与用户选择</h3><ol><li>reboot：重启</li><li>shutdown -r：关机</li><li>shutdown -h：睡眠</li><li>su +用户名 ： 切换用户</li></ol><h3 id="man帮助文档"><a href="#man帮助文档" class="headerlink" title="man帮助文档"></a>man帮助文档</h3><ol><li>man +命令：中文帮助文档；  按Q退出</li><li>ifconfig —help：提供帮助</li></ol><h3 id="exit退出账户"><a href="#exit退出账户" class="headerlink" title="exit退出账户"></a>exit退出账户</h3><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><p><em>问题1：解决服务冲突</em><br>查找相关线程<br>ps -ef | gerp nginx<br>kill 相关线程，重新运行服务<br><em>问题2： 文件处插入linux</em><br>使用Xftp文件传输工具<br>直接拖拽到终端命令文件夹下</p><h2 id="项目历程"><a href="#项目历程" class="headerlink" title="项目历程"></a>项目历程</h2><ol><li>实训云平台部署：</li><li>dev 开发  环境                        </li><li>test 测试    环境                    </li><li>灰度   环境</li><li>上线   </li></ol><h4 id="实训云部署"><a href="#实训云部署" class="headerlink" title="实训云部署"></a><a href="https://fshby.top/test_exam/templates/linux3.html">实训云部署</a></h4>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库练习</title>
      <link href="/posts/a49a5481.html"/>
      <url>/posts/a49a5481.html</url>
      
        <content type="html"><![CDATA[<h2 id="项目练习——成绩管理"><a href="#项目练习——成绩管理" class="headerlink" title="项目练习——成绩管理"></a>项目练习——成绩管理</h2><div class="hide-block"><button type="button" class="hide-button" style="background-color: orange;">查看表结构    </button><div class="hide-content"><div class="img-wrap"><div class="img-bg"><img class="img" src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/43da8024-c152-468a-a8e7-89b391ec01e9.png" alt="表结构" style="width: 800px;"/></div><span class="image-caption">表结构</span></div></div></div><p>— <strong>1.查询班级名称为WWT104的班级，在2023年2月1日未签到的学生名单【考勤、用户、班级】</strong><br>错误：内联丢失部分关键数据<br>解决：<br>使用左联联接，找到主表保留关键数据<br>链接时确定<code>主表为左表</code><br><code>主表的数据最全，例attention表包含user_id,与class_id</code><br>右表的部分数据会被抛弃</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> u.`Name` </span><br><span class="line"><span class="keyword">FROM</span> attendance a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> class c</span><br><span class="line"><span class="keyword">on</span> a.ClassId <span class="operator">=</span> c.Id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `<span class="keyword">user</span>` u</span><br><span class="line"><span class="keyword">on</span> a.UserId <span class="operator">=</span> u.Id</span><br><span class="line"><span class="keyword">WHERE</span> a.Date <span class="operator">=</span> <span class="string">&#x27;2023-02-01&#x27;</span></span><br><span class="line"><span class="keyword">and</span> a.SignIn <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">and</span> c.`Name` <span class="operator">=</span> <span class="string">&#x27;WWT104&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>— <strong>2.查询班级名称为WWT104的班级的男女比例</strong><br>计算男女比例：<br>sum(case when sex=1 then 1 else 0 end) /<br>sum(case when sex=1 then 1 else 0 end)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sex<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)<span class="operator">/</span><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sex<span class="operator">=</span><span class="number">0</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) </span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">user</span>` u, class c</span><br><span class="line"><span class="keyword">WHERE</span> u.ClassId <span class="operator">=</span> c.Id</span><br><span class="line"><span class="keyword">and</span> c.`Name` <span class="operator">=</span> <span class="string">&#x27;WWT104&#x27;</span>;</span><br></pre></td></tr></table></figure><p>— <strong>3.查询班级名称为WWT104的班级，在学习阶段为“功能测试阶段”，未参加考试的</strong>名单（即，分数=null）<br>查找主表为score表（socre包含其他两张表的id）<br>判断null<br>is null<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> u.`Name` </span><br><span class="line"><span class="keyword">FROM</span> score s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `<span class="keyword">user</span>` u</span><br><span class="line"><span class="keyword">on</span> s.UserId <span class="operator">=</span> u.Id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> class c</span><br><span class="line"><span class="keyword">ON</span> c.Id <span class="operator">=</span> s.ClassId</span><br><span class="line"><span class="keyword">WHERE</span> c.`Name` <span class="operator">=</span> <span class="string">&#x27;WWT104&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> s.Stage <span class="operator">=</span> <span class="string">&#x27;功能测试阶段&#x27;</span></span><br><span class="line"><span class="keyword">and</span> s.Score <span class="keyword">is</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure></p><p>— <strong>4.查询2023年2月1日，全员都签到的班级名称</strong><br>查询班级全员签到，因为每个班有多条数据，则对班级分组，<br>全员签到，分析条件为 ，<code>班级总人数=班级签到人数和</code><br>HAVING筛选条件中<br>COUNT(*) = COUNT(CASE WHEN a.SignIn = 1 THEN 1 END)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.ClassId, <span class="built_in">COUNT</span>(a.Id), c.`Name` </span><br><span class="line"><span class="keyword">FROM</span> attendance a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> class c</span><br><span class="line"><span class="keyword">on</span> c.Id <span class="operator">=</span> a.ClassId</span><br><span class="line"><span class="keyword">WHERE</span> a.Date <span class="operator">=</span> <span class="string">&#x27;2023-02-01&#x27;</span></span><br><span class="line"><span class="keyword">and</span> a.SignIn <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> a.ClassId</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">=</span> (<span class="keyword">select</span> Number <span class="keyword">FROM</span> class <span class="keyword">WHERE</span> Id <span class="operator">=</span> a.ClassId);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>— <strong>5.查询全校的男生平均年龄、女生平均年龄、全校平均年龄</strong></p><p>方法一：可以使用union将单个SLEECT查询的字段链接在一起<br>方法二：使用avg(case when then else end;)<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;男平均&#x27;</span> <span class="keyword">as</span> <span class="string">&#x27;分组&#x27;</span>, <span class="built_in">avg</span>(u.Age) <span class="keyword">as</span> <span class="string">&#x27;年龄&#x27;</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>` u <span class="keyword">where</span> u.Sex <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;女平均&#x27;</span>, <span class="built_in">avg</span>(u.Age) <span class="keyword">FROM</span> `<span class="keyword">user</span>` u <span class="keyword">where</span> u.Sex <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;校平均&#x27;</span>, <span class="built_in">avg</span>(u.Age) <span class="keyword">FROM</span> `<span class="keyword">user</span>` u;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>— <strong>6.查询班级名称为WWT104的班级，成绩ABCDE每个等级的人数分别有多少</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(U.Id), U.Grade </span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">user</span>` U</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> class c</span><br><span class="line"><span class="keyword">ON</span> U.ClassId <span class="operator">=</span> C.Id</span><br><span class="line"><span class="keyword">WHERE</span> c.`Name` <span class="operator">=</span> <span class="string">&#x27;WWT104&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> U.Grade;</span><br></pre></td></tr></table></figure></p><p>— <strong>7.查询班级名称WWT104班级里，名为“喵小米”的同学参加考试的所有成绩单平均分</strong><br>SELECT avg(s.score)<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> `<span class="keyword">user</span>` U</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> class C</span><br><span class="line"><span class="keyword">ON</span> U.ClassId <span class="operator">=</span> C.Id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> score s</span><br><span class="line"><span class="keyword">on</span> s.UserId <span class="operator">=</span> u.Id</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> C.`Name` <span class="operator">=</span> <span class="string">&#x27;WWT104&#x27;</span></span><br><span class="line"><span class="keyword">and</span> U.`Name` <span class="operator">=</span> <span class="string">&#x27;喵小米&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>— <strong>8. 录入成绩后，更新数据</strong></p><p>存储函数<br>call add_score ()调用存储函数<br>DROP PROCEDURE if exists add_score; — 删除存储函数<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> add_score(<span class="keyword">in</span> className <span class="type">VARCHAR</span>(<span class="number">50</span>), <span class="keyword">in</span> userName <span class="type">VARCHAR</span>(<span class="number">50</span>), <span class="keyword">in</span> StageName <span class="type">VARCHAR</span>(<span class="number">50</span>), <span class="keyword">in</span> addScore <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> cid <span class="type">int</span>;<span class="comment">-- 班级编号</span></span><br><span class="line"><span class="keyword">DECLARE</span> uid <span class="type">int</span>;<span class="comment">-- 用户编号</span></span><br><span class="line"><span class="keyword">set</span> cid <span class="operator">=</span> (<span class="keyword">SELECT</span> Id <span class="keyword">FROM</span> class C <span class="keyword">WHERE</span> C.`Name` <span class="operator">=</span> className);</span><br><span class="line"><span class="keyword">set</span> uid <span class="operator">=</span> (<span class="keyword">SELECT</span> u.Id <span class="keyword">FROM</span> class c, `<span class="keyword">user</span>` u <span class="keyword">where</span> c.Id <span class="operator">=</span> u.ClassId <span class="keyword">and</span> C.`Name` <span class="operator">=</span> className <span class="keyword">AND</span> u.`Name` <span class="operator">=</span> userName);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> score <span class="keyword">VALUES</span>(<span class="keyword">DEFAULT</span>, cid, uid, StageName, addScore, <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> `<span class="keyword">user</span>` <span class="keyword">SET</span> GRADE <span class="operator">=</span> </span><br><span class="line">(<span class="keyword">SELECT</span> <span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span> Score<span class="operator">&lt;=</span><span class="number">100</span> <span class="keyword">and</span> Score<span class="operator">&gt;=</span><span class="number">90</span> <span class="keyword">then</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">when</span> Score<span class="operator">&lt;=</span><span class="number">89</span> <span class="keyword">and</span> Score<span class="operator">&gt;=</span><span class="number">75</span> <span class="keyword">then</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">when</span> Score<span class="operator">&lt;=</span><span class="number">74</span> <span class="keyword">and</span> Score<span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">when</span> Score<span class="operator">&lt;=</span><span class="number">59</span> <span class="keyword">and</span> Score<span class="operator">&gt;=</span><span class="number">45</span> <span class="keyword">then</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">when</span> Score<span class="operator">&lt;=</span><span class="number">44</span> <span class="keyword">and</span> Score<span class="operator">&gt;=</span><span class="number">0</span> <span class="keyword">then</span> <span class="string">&#x27;E&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="string">&#x27;其他&#x27;</span></span><br><span class="line"><span class="keyword">END</span> <span class="string">&#x27;成绩等级&#x27;</span> <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> UserId <span class="operator">=</span> uid <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">desc</span> limit <span class="number">1</span> )</span><br><span class="line"> <span class="keyword">WHERE</span> id <span class="operator">=</span> uid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> class <span class="keyword">set</span> GRADE <span class="operator">=</span> </span><br><span class="line">(<span class="keyword">SELECT</span> <span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span> <span class="built_in">avg</span>(Score) <span class="operator">&gt;=</span><span class="number">90</span> <span class="keyword">then</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">when</span> <span class="built_in">avg</span>(Score) <span class="operator">&gt;=</span><span class="number">75</span> <span class="keyword">then</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">when</span> <span class="built_in">avg</span>(Score) <span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">when</span> <span class="built_in">avg</span>(Score) <span class="operator">&gt;=</span><span class="number">45</span> <span class="keyword">then</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">when</span> <span class="built_in">avg</span>(Score) <span class="operator">&gt;=</span><span class="number">0</span> <span class="keyword">then</span> <span class="string">&#x27;E&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;其他&#x27;</span></span><br><span class="line"><span class="keyword">END</span><span class="string">&#x27;平均分&#x27;</span> <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> ClassId <span class="operator">=</span> cid)</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> cid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line">delimiter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> add_score(<span class="string">&#x27;WWT104&#x27;</span>, <span class="string">&#x27;喵小米&#x27;</span>, <span class="string">&#x27;接口测试阶段&#x27;</span>, <span class="number">99</span>);</span><br></pre></td></tr></table></figure></p><h2 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a><a href="https://fshby.top/test_exam/templates/mysql10.html">项目实战</a></h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据查询SQL</title>
      <link href="/posts/6480e0f0.html"/>
      <url>/posts/6480e0f0.html</url>
      
        <content type="html"><![CDATA[<p>简介：查询表数据<br>字段名与表名不需要遵循数据类型，不需要加单引号‘’；</p><h2 id="查询指定字段数据"><a href="#查询指定字段数据" class="headerlink" title="查询指定字段数据"></a>查询指定字段数据</h2><p><strong>查询全部列的数据</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info ; <span class="comment">-- 查询全部列的数据</span></span><br></pre></td></tr></table></figure><br><strong>查询指定字段的数据</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_name <span class="keyword">FROM</span> user_info <span class="keyword">as</span> u; <span class="comment">-- 查询指定字段的数据</span></span><br></pre></td></tr></table></figure></p><h2 id="使用别名查询"><a href="#使用别名查询" class="headerlink" title="使用别名查询"></a>使用别名查询</h2><p><code>复杂数据表和字段</code>，可以使用 <strong><code>as</code></strong>起别名查询（as也可以省略）<br>别名可以用中文但是不建议用中文<br><code>字段别名并不排斥，可以用中文</code></p><p><strong>查询指定字段的数据</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_name <span class="keyword">FROM</span> user_info <span class="keyword">as</span> u; <span class="comment">-- 查询指定字段的数据</span></span><br></pre></td></tr></table></figure><br><strong>使用别名代替表名</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_name <span class="keyword">FROM</span> user_info  u; <span class="comment">-- 使用别名代替表名</span></span><br></pre></td></tr></table></figure><br><strong>使用别名代替字段名</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_name <span class="keyword">as</span> 姓名  <span class="keyword">FROM</span> user_info <span class="keyword">as</span> u; <span class="comment">-- 使用别名代替字段名</span></span><br></pre></td></tr></table></figure></p><h2 id="限制查询（分页查询）"><a href="#限制查询（分页查询）" class="headerlink" title="限制查询（分页查询）"></a>限制查询（分页查询）</h2><h3 id="限制查询"><a href="#限制查询" class="headerlink" title="限制查询"></a>限制查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info limit <span class="number">0</span> <span class="number">10</span>； <span class="comment">-- 从开始往后查10条数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info limit  <span class="number">10</span>； <span class="comment">-- 默认从0开始，效果相同</span></span><br></pre></td></tr></table></figure><h3 id="分页原理"><a href="#分页原理" class="headerlink" title="分页原理"></a>分页原理</h3><p>页码1 页容量10     数据1~10<br>页码2 页容量10     数据11~10<br>页码3 页容量10    数据21~10<br><strong>SELECT <em> FROM user_info limit  (页码-1)</em>页容量，叶容量；</strong></p><h2 id="排序查询语句"><a href="#排序查询语句" class="headerlink" title="排序查询语句"></a>排序查询语句</h2><h3 id="ASC与DESC"><a href="#ASC与DESC" class="headerlink" title="ASC与DESC"></a>ASC与DESC</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">ORDER</span> <span class="keyword">BY</span> user_age <span class="keyword">DESC</span>；</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">ORDER</span> <span class="keyword">BY</span> user_age <span class="keyword">ASC</span>；</span><br></pre></td></tr></table></figure><p><code>对字母排序、数字排序、汉字排序（不建议）、时间排序、</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">ORDER</span> <span class="keyword">BY</span> Grade <span class="keyword">DESC</span>；<span class="comment">-- Gread是字母字符</span></span><br></pre></td></tr></table></figure></p><h3 id="多列规则排序"><a href="#多列规则排序" class="headerlink" title="多列规则排序"></a>多列规则排序</h3><p><strong>按第一个规则排序，存在并排的数据会使用第二个规则排序</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">ORDER</span> <span class="keyword">BY</span> user_id <span class="keyword">DESC</span> ,user_age <span class="keyword">ASC</span>；</span><br></pre></td></tr></table></figure></p><h3 id="限制加排序"><a href="#限制加排序" class="headerlink" title="限制加排序"></a>限制加排序</h3><p><strong>查询年龄最大的五个人</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">ORDER</span> <span class="keyword">BY</span> user_age <span class="keyword">DESC</span> LIMIT <span class="number">5</span>；</span><br></pre></td></tr></table></figure></p><h2 id="条件查询语句"><a href="#条件查询语句" class="headerlink" title="条件查询语句"></a>条件查询语句</h2><h3 id="WHERE-筛选"><a href="#WHERE-筛选" class="headerlink" title="WHERE 筛选"></a>WHERE 筛选</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> user_id <span class="operator">!=</span><span class="number">2</span>；</span><br></pre></td></tr></table></figure><p><strong><code>逻辑运算符：and与or条件拼接、not 条件取反</code></strong></p><h2 id="去重查询-distinct"><a href="#去重查询-distinct" class="headerlink" title="去重查询 distinct"></a>去重查询 distinct</h2><p><code>distict后续字段拼接数据相同则去重</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> user_name   <span class="keyword">FROM</span> user_info；</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> user_name ,user_age   <span class="keyword">FROM</span> user_info； <span class="comment">-- 消除两个字段都相同的重复</span></span><br></pre></td></tr></table></figure></p><h3 id="like模糊查询"><a href="#like模糊查询" class="headerlink" title="like模糊查询"></a>like模糊查询</h3><p>关键字：like<br><code>通配符%：表示匹配任意字符</code><br><code>通配符_:表示匹配1个字符</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> user_name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span>；</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> user_name <span class="keyword">like</span> <span class="string">&#x27;%张&#x27;</span>；</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> user_name <span class="keyword">like</span> <span class="string">&#x27;张_&#x27;</span>；</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> user_name <span class="keyword">like</span> <span class="string">&#x27;___&#x27;</span>；<span class="comment">-- 查询名字占三个字的元组</span></span><br></pre></td></tr></table></figure></p><h3 id="between范围查询"><a href="#between范围查询" class="headerlink" title="between范围查询"></a>between范围查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> user_age <span class="keyword">BETWEEN</span> <span class="number">18</span> <span class="keyword">and</span> <span class="number">20</span>；</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> user_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2022-10-01 10:00:00&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2022-10-01 10:00:00&#x27;</span>；<span class="comment">-- 对日期查询，字段值要加单引号</span></span><br></pre></td></tr></table></figure><h3 id="null-查询（is-null与is-not-null）"><a href="#null-查询（is-null与is-not-null）" class="headerlink" title="null 查询（is null与is not null）"></a>null 查询（is null与is not null）</h3><p><code>is 比较的是身份，“=”比较的是值，如果内存空间为空没有办法进行比较</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> user_age <span class="keyword">is</span> <span class="keyword">not</span> mull；</span><br></pre></td></tr></table></figure></p><h3 id="枚举in"><a href="#枚举in" class="headerlink" title="枚举in"></a>枚举in</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> user_age <span class="keyword">in</span>( <span class="number">20</span>,<span class="number">18</span>,<span class="number">16</span>)；</span><br></pre></td></tr></table></figure><h3 id="条件优化"><a href="#条件优化" class="headerlink" title="条件优化"></a>条件优化</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> (user_age<span class="operator">&gt;</span><span class="number">10</span>,user_sex<span class="operator">=</span><span class="number">0</span>) <span class="keyword">and</span>( age<span class="operator">&lt;</span><span class="number">20</span> <span class="keyword">and</span> sex<span class="operator">=</span><span class="number">0</span>)；</span><br></pre></td></tr></table></figure><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><h3 id="group-by-分组"><a href="#group-by-分组" class="headerlink" title="group by 分组"></a>group by 分组</h3><p><strong>按字段分组</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_classid <span class="keyword">FROM</span> user_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> user_classid；</span><br><span class="line"><span class="keyword">SELECT</span> user_classid ,user_name <span class="keyword">FROM</span> user_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> user_classid ,user_sex； <span class="comment">--按两个字段内容和分组</span></span><br></pre></td></tr></table></figure></p><h3 id="group-by-group-concat"><a href="#group-by-group-concat" class="headerlink" title="group by +group_concat()"></a>group by +group_concat()</h3><p><strong>将分组后的数据拼接</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_classid ,GROUP_CONCAT(user_name ) <span class="keyword">AS</span> 名单 <span class="keyword">FROM</span> user_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> user_classid；</span><br></pre></td></tr></table></figure></p><h3 id="group-by-聚合函数"><a href="#group-by-聚合函数" class="headerlink" title="group by + 聚合函数"></a>group by + 聚合函数</h3><h4 id="count-统计行数"><a href="#count-统计行数" class="headerlink" title="count( )统计行数"></a>count( )统计行数</h4><p><code>count(*)统计所有值，count(user_age)统计去除null的字段列</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> user_info ；<span class="comment">--统计所有元素个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(user_age) <span class="keyword">FROM</span> user_info ； <span class="comment">--统计字段为空的元组个数</span></span><br></pre></td></tr></table></figure></p><h4 id="sum-统计"><a href="#sum-统计" class="headerlink" title="sum() 统计"></a>sum() 统计</h4><p><strong>数字类型、字符类新、字符串类型均可求和，不会报错，但是字符求和后数据为<code>0</code></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(user_age) <span class="keyword">FROM</span> user_info ；<span class="comment">-- 数字求和</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(user_date) <span class="keyword">FROM</span> user_info ； <span class="comment">-- 时间求和</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(user_name) <span class="keyword">FROM</span> user_info ；<span class="comment">-- 不会报错，字符串 = 0</span></span><br></pre></td></tr></table></figure></p><h4 id="avg-平均值"><a href="#avg-平均值" class="headerlink" title="avg()平均值"></a>avg()平均值</h4><p><strong>类似SUM</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(user_age) <span class="keyword">FROM</span> user_info ；<span class="comment">-- 数字求和</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(user_date) <span class="keyword">FROM</span> user_info ； <span class="comment">-- 时间求和</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(user_name) <span class="keyword">FROM</span> user_info ；<span class="comment">-- 不会报错，字符串 = 0</span></span><br></pre></td></tr></table></figure></p><h4 id="最大值max"><a href="#最大值max" class="headerlink" title="最大值max()"></a>最大值max()</h4><p>SELECT MAX(user_age) FROM user_info </p><h4 id="最小值min"><a href="#最小值min" class="headerlink" title="最小值min()"></a>最小值min()</h4><p>SELECT MIN(user_age) FROM user_info </p><h3 id="group-by-having"><a href="#group-by-having" class="headerlink" title="group by + having"></a>group by + having</h3><p>having 与where都是过滤数据的筛选条件，<code>但是having只能写在group分组后</code>;<br>在<code>原表中存在的字段</code>可以将筛选条件写在where中，如果要筛选<code>原表中没有的字段</code>且需要<code>经过计算后得到的字段</code>则筛选条件需要放在HAVING中<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> user_classid <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure></p><h2 id="子查询与主查询的关系"><a href="#子查询与主查询的关系" class="headerlink" title="子查询与主查询的关系"></a>子查询与主查询的关系</h2><p>1) 子查询语句<code>是嵌入</code>到主查询中<br>2) 子查询是可以独立存在的语句，是<code>完整的select语句</code><br>3) 子查询一般充当主查询的<code>数据或条件</code></p><p><strong>充当数据</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> user_age <span class="operator">&gt;</span> （平均年龄子查询）；主查询</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(user_age) <span class="keyword">FROM</span> user_info ;<span class="comment">-- 平均年龄</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> user_age <span class="operator">&gt;</span> （<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(user_age) <span class="keyword">FROM</span> user_info ;）；  <span class="comment">-- 嵌入后</span></span><br></pre></td></tr></table></figure></p><h2 id="联合查寻"><a href="#联合查寻" class="headerlink" title="联合查寻"></a>联合查寻</h2><h3 id="内联接查询-inner-join"><a href="#内联接查询-inner-join" class="headerlink" title="内联接查询 inner join"></a>内联接查询 inner join</h3><p>连接两个表中数据<code>消除两个表内多余的数据</code>，<br><strong>inner join中inner可以省略</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> S,C <span class="keyword">where</span>  S.classId <span class="operator">=</span>C.classId ;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> S <span class="keyword">inner</span> <span class="keyword">join</span> C <span class="keyword">on</span>  S.classId <span class="operator">=</span>C.classId ;</span><br></pre></td></tr></table></figure></p><h3 id="左联查寻"><a href="#左联查寻" class="headerlink" title="左联查寻"></a>左联查寻</h3><p><code>先判断where条件数据</code>，再匹配右表数据，左边没有匹配到的数据用null代替<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> S <span class="keyword">left</span> <span class="keyword">join</span> C <span class="keyword">on</span>  S.classId <span class="operator">=</span>C.classId  <span class="keyword">where</span> user_age<span class="operator">&gt;</span><span class="number">20</span>;</span><br></pre></td></tr></table></figure></p><h3 id="右联查寻"><a href="#右联查寻" class="headerlink" title="右联查寻"></a>右联查寻</h3><p>先判断where条件数据，再匹配右表数据，左边没有匹配的数据用null代替<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> S <span class="keyword">right</span> <span class="keyword">join</span> C <span class="keyword">on</span>  S.classId <span class="operator">=</span>C.classId  <span class="keyword">where</span> user_age<span class="operator">&gt;</span><span class="number">20</span>;</span><br></pre></td></tr></table></figure></p><h3 id="自联查寻"><a href="#自联查寻" class="headerlink" title="自联查寻"></a>自联查寻</h3><p><strong>自己关联自己</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 员工表 A <span class="keyword">INNER</span> <span class="keyword">JOIN</span>  员工表 B <span class="keyword">ON</span> A.上级编号 <span class="operator">=</span> B.编号；</span><br></pre></td></tr></table></figure></p><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a><a href="https://fshby.top/test_exam/templates/mysql9.html">内置函数</a></h2><h3 id="常用字符串函数"><a href="#常用字符串函数" class="headerlink" title="常用字符串函数"></a>常用字符串函数</h3><h4 id="char-length-s"><a href="#char-length-s" class="headerlink" title="char_length(s)"></a>char_length(s)</h4><h4 id="SELECT-CHAR-LENGTH-列名"><a href="#SELECT-CHAR-LENGTH-列名" class="headerlink" title="SELECT CHAR_LENGTH(列名):"></a>SELECT CHAR_LENGTH(列名):</h4><h4 id="concat（s1-s1……）-拼接字符无逗号"><a href="#concat（s1-s1……）-拼接字符无逗号" class="headerlink" title="concat（s1,s1……）:拼接字符无逗号"></a>concat（s1,s1……）:拼接字符无逗号</h4><h4 id="format-x-n-保留小数位数"><a href="#format-x-n-保留小数位数" class="headerlink" title="format(x,n):保留小数位数"></a>format(x,n):保留小数位数</h4><h4 id="lower-s-转小写"><a href="#lower-s-转小写" class="headerlink" title="lower(s):转小写"></a>lower(s):转小写</h4><h4 id="upper-s-转大写"><a href="#upper-s-转大写" class="headerlink" title="upper(s):转大写"></a>upper(s):转大写</h4><h4 id="查寻并不改变元数据"><a href="#查寻并不改变元数据" class="headerlink" title="查寻并不改变元数据"></a>查寻并不改变元数据</h4><h4 id="substr-s-start-length-：从1开始"><a href="#substr-s-start-length-：从1开始" class="headerlink" title="substr(s,start,length)：从1开始"></a>substr(s,start,length)：从1开始</h4><h4 id="trim-s-：去除空格"><a href="#trim-s-：去除空格" class="headerlink" title="trim(s)：去除空格"></a>trim(s)：去除空格</h4><h3 id="数学相关函数"><a href="#数学相关函数" class="headerlink" title="数学相关函数"></a>数学相关函数</h3><p>RAND()：返回随机数</p><h3 id="日期相关函数"><a href="#日期相关函数" class="headerlink" title="日期相关函数"></a>日期相关函数</h3><h4 id="curdate"><a href="#curdate" class="headerlink" title="curdate()"></a>curdate()</h4><p>返回当前日期</p><h4 id="curtime"><a href="#curtime" class="headerlink" title="curtime()"></a>curtime()</h4><p>返回当前时间</p><h4 id="adddate-d-t"><a href="#adddate-d-t" class="headerlink" title="adddate(d,t)"></a>adddate(d,t)</h4><p>给日期添加天数<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> addtime(d,t)</span><br></pre></td></tr></table></figure></p><h4 id="addtime-d-t"><a href="#addtime-d-t" class="headerlink" title="addtime(d,t)"></a>addtime(d,t)</h4><p>给日期添加时间<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> addtime(d,t)</span><br></pre></td></tr></table></figure></p><h4 id="date-add（’2001-01-03’-interval-10-day）"><a href="#date-add（’2001-01-03’-interval-10-day）" class="headerlink" title="date_add（’2001-01-03’,interval 10 day）"></a>date_add（’2001-01-03’,interval 10 day）</h4><p>给指定定日期添加一个时间段的日期<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> date_add（<span class="string">&#x27;2001-01-03&#x27;</span>,<span class="type">interval</span> <span class="number">10</span> <span class="keyword">day</span>）、</span><br></pre></td></tr></table></figure><br>type的类型可以是：<br>microsecond（微秒）<br>second（秒）<br>minute（分钟）<br>hour（小时）<br>day（天）<br>week（周）<br>month（月）<br>quarter（季度）<br>year（年）</p><h4 id="date-sub（’2001-01-03’-interval-10-day）"><a href="#date-sub（’2001-01-03’-interval-10-day）" class="headerlink" title="date_sub（’2001-01-03’,interval 10 day）"></a>date_sub（’2001-01-03’,interval 10 day）</h4><p>给定指定日期日减一个时间段的日期<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> date_sub（<span class="string">&#x27;2001-01-03&#x27;</span>,<span class="type">interval</span> <span class="number">10</span> <span class="keyword">day</span>）、</span><br></pre></td></tr></table></figure></p><h4 id="datediff-d1-d2"><a href="#datediff-d1-d2" class="headerlink" title="datediff(d1,d2)"></a>datediff(d1,d2)</h4><p>返回两个日期之间相隔天数<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> datediff(d1,d2)</span><br></pre></td></tr></table></figure></p><h4 id="date-format（’20010103’-’-y-m-d-r’）"><a href="#date-format（’20010103’-’-y-m-d-r’）" class="headerlink" title="date_format（’20010103’,’%y-%m-%d  %r’）"></a>date_format（’20010103’,’%y-%m-%d  %r’）</h4><p>按表达式f要求显示日期d<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> date_format（<span class="string">&#x27;20010103&#x27;</span>,<span class="string">&#x27;%y-%m-%d  %r&#x27;</span>）</span><br></pre></td></tr></table></figure></p><h4 id="day-d"><a href="#day-d" class="headerlink" title="day(d)"></a>day(d)</h4><p>返回日期值天的部分</p><h4 id="month-d"><a href="#month-d" class="headerlink" title="month(d)"></a>month(d)</h4><p>返回日期值月的部分</p><h4 id="now"><a href="#now" class="headerlink" title="now()"></a>now()</h4><p>返回当前日期和时间</p><h4 id="sysdate"><a href="#sysdate" class="headerlink" title="sysdate()"></a>sysdate()</h4><p>返回当前日期和时间</p><h4 id="time-expression"><a href="#time-expression" class="headerlink" title="time(expression)"></a>time(expression)</h4><p>提取传入表达式的时间部分</p><h4 id="year"><a href="#year" class="headerlink" title="year()"></a>year()</h4><p>返回年份</p><h3 id="其他常用函数"><a href="#其他常用函数" class="headerlink" title="其他常用函数"></a>其他常用函数</h3><h4 id="case函数"><a href="#case函数" class="headerlink" title="case函数"></a>case函数</h4><p><code>when后可以添加表达式，先满足先返回</code>。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user_name，</span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">when</span> <span class="number">0</span> <span class="keyword">then</span> <span class="string">&#x27;女&#x27;</span></span><br><span class="line"><span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="keyword">else</span> <span class="string">&#x27; 未知&#x27;</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">as</span> ‘性别’</span><br><span class="line"><span class="keyword">from</span> user_info</span><br></pre></td></tr></table></figure></p><h4 id="if函数"><a href="#if函数" class="headerlink" title="if函数"></a>if函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> if（age <span class="operator">&gt;=</span><span class="number">18</span>,<span class="string">&#x27;成立返回值&#x27;</span>,<span class="string">&#x27;不满足返回值&#x27;</span>）</span><br><span class="line"><span class="keyword">from</span> user_info</span><br></pre></td></tr></table></figure><h4 id="ifnull函数（空判断）"><a href="#ifnull函数（空判断）" class="headerlink" title="ifnull函数（空判断）"></a>ifnull函数（空判断）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user_name ifnull(user_age,<span class="string">&#x27;未填写年龄&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> user_info</span><br></pre></td></tr></table></figure><h4 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> database()</span><br></pre></td></tr></table></figure><h3 id="不相关表链接union"><a href="#不相关表链接union" class="headerlink" title="不相关表链接union"></a>不相关表链接union</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> user_info</span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> user_info02</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识归纳</title>
      <link href="/posts/9f91e740.html"/>
      <url>/posts/9f91e740.html</url>
      
        <content type="html"><![CDATA[<h2 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h2><h3 id="HTTP-HTML-浏览器"><a href="#HTTP-HTML-浏览器" class="headerlink" title="HTTP/HTML/浏览器"></a>HTTP/HTML/浏览器</h3><ol><li><strong> http 和 https</strong><br>&ensp; &ensp; https 的 SSL 加密是在传输层实现的。<br>(1)http 和 https 的基本概念<br><strong>http:</strong> 超文本传输协议，是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从 WWW 服务器传输超文本到本地浏览器的传 输协议，它可以使浏览器更加高效，使网络传输减少。<br><strong>https:</strong> 是以安全为目标的 HTTP 通道，简单讲是 HTTP 的安全版，即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。<br><strong>https 协议的主要作用是</strong>：建立一个信息安全通道，来确保数组的传输，确保网站的真实性。<br><strong>https 协议的缺点：</strong> https 握手阶段比较费时，会使页面加载时间延长 50%，增加 10%~20%的耗电。 https 缓存不如 http 高效，会增加数据开销。 SSL 证书也需要钱，功能越强大的证书费用越高。 SSL 证书需要绑定 IP，不能再同一个 ip 上绑定多个域名，ipv4 资源支持不了这种消耗。 </li><li><strong>tcp三次握手</strong><br><img width="300" height="250" alt="三次握手图" src="https://user-images.githubusercontent.com/17233651/42496289-1c6d668a-8458-11e8-98b3-65db50f64d48.png"><br>&ensp;&ensp;从图片可以得到三次握手可以简化为：C 发起请求连接 S 确认，S也发起连接 C 确认我们 再看看每次握手的作用：第一次握手：S 只可以确认 自己可以接受 C 发送的报文段第 二次握手：C 可以确认 S 收到了自己发送的报文段，并且可以确认 自己可以接受 S 发 送的报文段<strong>第三次握手：S 可以确认 C 收到了自己发送的报文段</strong></li><li><strong> TCP 和 UDP 的区别</strong><br>（1）TCP 是面向连接的，udp 是无连接的即发送数据前不需要先建立链接。<br>（2）TCP 提供可靠的服务。也就是说，通过 TCP 连接传送的数据，无差错，不丢失， 不重复，且按序到达;UDP 尽最大努力交付，即不保证可靠交付。 并且因为 tcp 可靠， 面向连接，不会丢失数据因此适合大数据量的交换。<br>（3）TCP 是面向字节流，UDP 面向报文，并且网络出现拥塞不会使得发送速率降低（因 此会出现丢包，对实时的应用比如 IP 电话和视频会议等）。<br>（4）TCP 只能是 1 对 1 的，UDP 支持 1 对 1,1 对多。 m<br>（5）TCP 的首部较大为 20 字节，而 UDP 只有 8 字节。 （6）TCP 是面向连接的可靠性传输，而 UDP 是不可靠的。</li><li><strong>HTTP 请求的方式，HEAD 方式</strong><br>head：类似于 get 请求，只不过返回的响应中没有具体的内容，用户获取报头 options：允许客户端查看服务器的性能，比如说服务器支持的请求方式等等。</li><li><p><strong>一个图片 url 访问后直接下载怎样实现？</strong><br>请求的返回头里面，用于浏览器解析的重要参数就是 OSS 的 API 文档里面的返回 http 头，决定用户下载行为的参数。 </p><blockquote><p>下载的情况下：<br>1) x-oss-object-type: Normal<br>2)  x-oss-request-id: 598D5ED34F29D01FE2925F41<br>3)  x-oss-storage-class: Standard</p></blockquote></li><li><p><strong>web Quality（无障碍）</strong><br>能够被残障人士使用的网站才能称得上一个易用的（易访问的）网站。 残障人士指的是那些带有残疾或者身体不健康的用户。 使用 alt 属性： &lt; img src=”person.jpg” alt=”this is a person”/ &gt; 有时候浏览器会无法显示图像。具体的原因有： 用户关闭了图像显示 浏览器是不支持图形显示的迷你浏览器 浏览器是语音浏览器（供盲人和弱视人群使用） <code>如果您使用了 alt 属性，那么浏览器至少可以显示或读出有关图像的描述。</code></p></li><li><strong>实用的 BOM 属性对象方法?</strong><br>什么是 Bom? Bom 是浏览器对象。有哪些常用的 Bom 属性呢？<br>(1)location 对象<br><em>location.href</em>— 返回或设置当前文档的 URL<br><em>location.search</em> — 返回 URL 中的查询字符串部分。<br>例 如 <a href="http://www.dreamdu.com/dreamdu.php?id=5&amp;name=dreamdu">http://www.dreamdu.com/dreamdu.php?id=5&amp;name=dreamdu</a> 返回包括(?)后面的内 容?id=5&amp;name=dreamdu<br><em>location.hash</em> — 返回 URL#后面的内容，如果没有#，返回空<br><em>location.host</em> — 返回 URL 中的域名部分，例如 www.dreamdu.com <em>location.hostname</em> — 返回 URL 中的主域名部分，例如 dreamdu.com <em>location.pathname</em> — 返回 URL 的域名后的部分。例如 <a href="http://www.dreamdu.com/xhtml/">http://www.dreamdu.com/xhtml/</a> 返 回/xhtml/<br><em>location.port</em> — 返回 URL 中的端口部分。例如 <a href="http://www.dreamdu.com:8080/xhtml/">http://www.dreamdu.com:8080/xhtml/</a> 返回 8080<br><em>location.protocol</em> — 返回 URL 中的协议部分。<br>例如 <a href="http://www.dreamdu.com:8080/xhtml/">http://www.dreamdu.com:8080/xhtml/</a> 返 回(//)前面的内容 http: location.assign — 设置当前文档的 URL<br><em>location.replace() </em>— 设置当前文档的 URL，并且在 history 对象的地址列表中移除这个 URL<br><em>location.replace(url); </em><br><em>location.reload() </em>— 重载当前页面<br>(2)history 对象<br><em>history.go()</em> — 前进或后退指定的页面数 history.go(num);<br><em>history.back()</em> — 后退一页<br><em>history.forward()</em> — 前进一页<br>(3)Navigator 对象<br><em>navigator.userAgent</em> — 返回用户代理头的字符串表示(就是包括浏览器版本信息等的字 符串)<br><em>navigator.cookieEnabled</em> — 返回浏览器是否支持(启用)cookie</li><li><strong>HTML5 drag api</strong><br>dragstart：事件主体是被<code>拖放</code>元素，在<code>开始</code>拖放被拖放元素时触发，。<br>darg：事件主体是被<code>拖放</code>元素，在<code>正在</code>拖放被拖放元素时触发。<br>dragenter：事件主体是目标元素，在被拖放元素<code>进入</code>某元素时触发。<br>dragover：事件主体是目标元素，在被拖放在某元素内<code>移动</code>时触发。<br>dragleave：事件主体是目标元素，在被拖放元素<code>移出</code>目标元素是触发。<br>drop：事件主体是目标元素，在目标元素完全<code>接受</code>被拖放元素时触发。<br>dragend：事件主体是被拖放元素，在整个拖放操作<code>结束时</code>触发</li><li><strong>http2.0</strong><br>&ensp;&ensp;提升访问速度（可以对于，请求资源所需时间更少，访问速度更快，相比 http1.0） 允许<code>多路复用</code>：多路复用允许同时通过单一的 HTTP/2 连接发送多重请求-响应信息。改 善了：在 http1.1 中，浏览器客户端在同一时间，针对同一域名下的请求有一定数量限 制（连接数量），超过限制会被阻塞。<br><code>二进制分帧</code>：HTTP2.0 会将所有的传输信息分割为更小的信息或者帧，并对他们进行二 进制编码 首部压缩 服务器端推送</li><li><strong>400 和 401、403 状态码</strong><br>(1)400 状态码：<code>请求无效</code><br>产生原因:<br>前端提交数据的字段名称和字段类型与后台的实体<code>没有保持一致</code> 前端提交到后台的数据应该是 <code>json</code>字符串类型，但是前端没有将对象 JSON.stringify 转 化成字符串。<br><strong><code>解决方法：</code></strong> 对照字段的名称，保持一致性 将 obj 对象通过 JSON.stringify 实现<code>序列化</code><br>(2)401 状态码：当前请求需要<code>用户验证</code><br>(3)403 状态码：<code>服务器已经得到请求，但是拒绝执行</code><br>(4)404状态码是一种HTTP（超文本传输协议）状态码，表示客户端请求的资源在服务器上未找到</li><li><strong>fetch 发送 2 次请求的原因</strong><br>&ensp;&ensp;fetch 发送 post 请求的时候，总是发送 2 次，第一次状态码是 <code>204</code>，第二次才成功？ 原因很简单，因为你用 fetch 的 post 请求的时候，导致 fetch 第一次发送了一个<code>Options</code>请求，询问服务器<code>是否支持</code>修改的请求头，如果服务器<code>支持</code>，则在第二次中发送真正的 请求。</li><li><strong>Cookie、sessionStorage、localStorage 的区别</strong><br>共同点：<code>都是保存在浏览器端，并且是同源的</code><br>Cookie：cookie 数据始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器 和服务器间来回传递。而 sessionStorage 和 localStorage 不会自动把数据发给服务器，仅 在本地保存。cookie 数据还有路径（path）的概念，可以限制 cookie 只属于某个路径下, 存储的大小很小只有<code>4K</code> 左右。 （<code>key：可以在浏览器和服务器端来回传递，存储容量 小，只有大约 4K 左右</code>）<br>sessionStorage：仅在当<code>前浏览器窗口关闭前有效</code>，自然也就不可能持久保持，localStorage： 始终有效，窗口或浏览器关闭也一直保存，因此用作<code>持久数据</code>；cookie 只在设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭。（key：本身就是一个回话过程，关 闭浏览器后消失，session <code>为一个回话，当页面不同即使是同一页面打开两次，也被视为 同一次回话</code>）<br>localStorage：localStorage 在所有同<code>源窗口中都是共享的</code>；<br>cookie 也是在所有同源窗口中 都是共享的。（key：同源窗口都会共享，并且不会失效，不管窗口或者浏览器关闭与 否都会始终生效）<br>补充说明一下 cookie 的作用： 保存用户登录状态。例如将用户 id 存储于一个 cookie 内，这样当用户下次访问该页面 时就不需要重新登录了，现在很多论坛和社区都提供这样的功能。 cookie 还可以设置 过期时间，当超过时间期限后，cookie 就会自动消失。因此，系统往往可以提示用户保 持登录状态的时间：常见选项有一个月、三个 月、一年等。 跟踪用户行为。例如一个天气预报网站，能够根据用户选择的地区显示当地的天气情况。 如果每次都需要选择所在地是烦琐的，当利用了 cookie 后就会显得很人性化了，系统能 够记住上一次访问的地区，当下次再打开该页面时，它就会自动显示上次用户所在地区 的天气情况。因为一切都是在后 台完成，所以这样的页面就像为某个用户所定制的一样，使用起来非常方便定制页面。如果网站提供了换肤或更换布局的功能，那么可以使 用 cookie 来记录用户的选项，例如：背景色、分辨率等。当用户下次访问时，仍然可以 保存上一次访问的界面风格。</li><li><strong> Doctype 作用?严格模式与混杂模式如何区分？它们有何意义?</strong><br>&ensp;&ensp;Doctype 声明于文档最前面，告诉浏览器以何种方式来<code>渲染页面</code>，这里有两种模式，<code>严 格模式和混杂模式</code>。 严格模式的排版和 JS 运作模式是 以该浏览器支持的<code>最高标准</code>运行。 <code>混杂模式</code>，向后兼容，模拟老式浏览器，防止浏览器无法<code>兼容页面</code>。</li><li><strong>Cookie 如何防范 XSS 攻击</strong><br>&ensp;&ensp;XSS（跨站脚本攻击）是指攻击者在返回的 HTML 中嵌入 javascript 脚本，为了减轻这些 攻击，需要在 HTTP 头部配上，<br>set-cookie：<br><code>httponly</code>-这个属性可以防止 XSS,它会禁止 javascript 脚本来访问 cookie。 <code>secure</code>- 这个属性告诉浏览器仅在请求为 https 的时候发送 cookie。 结果应该是这样的：<strong>Set-Cookie=&lt; cookie-value &gt;</strong>…</li><li><strong>click 在 ios 上有 300ms 延迟，原因及如何解决？</strong><br>(1)粗暴型，禁用缩放 <meta name="viewport" content="width=device-width, user-scalable=no"><br>(2)利用 FastClick，其原理是： 检测到 touchend 事件后，立刻出发模拟 click 事件，并且把浏览器 300 毫秒之后真正出 发的事件给阻断掉</li><li><strong> addEventListener 参数</strong><br>addEventListener(event, function, useCapture)<br>其中，event 指定事件名；function 指定要事件触发时执行的函数；useCapture 指定事件 是否在捕获或冒泡阶段执行。</li><li><strong>强缓存、协商缓存什么时候用哪个</strong><br>&ensp;&ensp;因为服务器上的资源不是一直固定不变的，大多数情况下它会更新，这个时候如果我们 还访问本地缓存，那么对用户来说，那就相当于资源没有更新，用户看到的还是旧的资 源；所以我们希望服务器上的资源更新了浏览器就请求新的资源，没有更新就使用本地 的缓存，以最大程度的减少因网络请求而产生的资源浪费。</li><li><strong>前端优化</strong><br><code>降低请求量</code>：合并资源，减少 HTTP 请求数，minify / gzip 压缩，webP，lazyLoad。<br><code>加快请求速度</code>：预解析 DNS，减少域名数，并行加载，CDN 分发。<br><code>缓存</code>：HTTP 协议缓存请求，离线缓存 manifest，离线数据缓存 localStorage。<br><code>渲染</code>：JS/CSS 优化，加载顺序，服务端渲染，pipeline。</li><li><strong>HTTP 支持的方法</strong><br>GET, POST, HEAD, OPTIONS, PUT, DELETE, TRACE,</li><li><strong>如何画一个三角形</strong><br>三角形原理：边框的均分原理 </li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">0px</span>; </span><br><span class="line"><span class="attribute">height</span>:<span class="number">0px</span>; </span><br><span class="line"><span class="attribute">border-top</span>:<span class="number">10px</span> solid red; </span><br><span class="line"><span class="attribute">border-right</span>:<span class="number">10px</span> solid transparent; </span><br><span class="line"><span class="attribute">border-bottom</span>:<span class="number">10px</span> solid transparent; </span><br><span class="line"><span class="attribute">border-left</span>:<span class="number">10px</span> solid transparent; &#125;</span><br></pre></td></tr></table></figure><ol><li><strong> HTML5 新增的元素</strong><br>&ensp;&ensp;首先 html5 为了更好的实践 web 语义化，增加了 <code>header，footer，nav,aside,section</code> 等语义 化标签，在表单方面，为了<code>增强表单</code>，为 input 增加了 <code>color，emial,data ,range</code> 等类型， 在存储方面，提供了 <code>sessionStorage，localStorage,和离线存储</code>，通过这些存储方式方便数 据在客户端的存储和获取，在多媒体方面规定了音频和视频元素 <code>audio</code>和 <code>vedio</code>，另外还 有<code>地理定位</code>，<code>canvas 画布</code>，<code>拖放</code>，<code>多线程编程的 web worker</code> 和 <code>websocket</code>协议。</li><li><strong>Cookie 和 Session 的认知，Cookie 有哪些限制？</strong><br>1) cookie 数据存放在客户的浏览器上，session 数据放在服务器上。<br>2) cookie 不是很安全，别人可以分析存放在本地的 COOKIE 并进行 COOKIE 欺骗 考虑到安全应当使用 session。<br>3) session 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能 考虑到减轻服务器性能方面，应当使用 COOKIE。<br>4) 单个 cookie 保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 20 个 cookie。</li></ol><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ol><li><strong>css 盒模型</strong><br>简介：就是用来装页面上的元素的矩形区域。CSS 中的盒子模型包括 IE 盒子模型和标 准的 W3C 盒子模型。<br>box-sizing(有 3 个值哦)：border-box,padding-box,content-box. 标准盒子模型<br><img width="600" height="250" alt="W3C盒子模型" src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/2d3020b9-6c60-4d32-b3fb-1116087a4ed5.jpg"><br><img width="600" height="250" alt="IE盒子模型" src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/1be7efd3-d6a9-4043-8f7c-a54c5b785c45.png"><br><strong><code>区别：</code></strong>从图中我们可以看出，这两种盒子模型最主要的区别就是<code>width 的包含范围</code>，在 标准的盒子模型中，width 指 <code>content 部分的宽度</code>，在 IE 盒子模型中，width 表示 content+padding+border 这三个部分的宽度，故这使得在计算整个盒子的宽度时存在着差 异：<br>标准盒子模型的盒子宽度：左右 border+左右 padding+width<br>IE 盒子模型的盒子宽度：width<br>在 CSS3 中引入了 box-sizing 属性，box-sizing:content-box;表示标准的盒子模型box-sizing:border-box 表示的是 IE 盒子模型<br>&ensp;&ensp;最后，前面我们还提到了，box-sizing:padding-box,这个属性值的宽度包含了左右 padding+width 也很好理解性记忆，包含什么，width 就从什么开始算起。</li><li><strong>画一条 0.5px 的线</strong><br>采用 meta viewport 的方式<br>&lt; meta name=”viewport” content=”initial-scale=1.0, maximum-scale=1.0, user-scalable=no” / &gt;<br>采用 border-image 的方式<br>采用 &lt; div style=”height: 1px; border-top: 0.5px solid red;”&gt;&lt; /div &gt;<br>采用 transform: scaleY(0.5);的方式</li><li><strong>link 标签和 import 标签的区别</strong><br>link 属于 html 标签，而@import 是 css 提供的 页面被加载时，link 会<code>同时被加载</code>，而@import 引用的 css 会等到<code>页面加载结束后加载</code>。<br>link 是 html 标签，因此没有兼容性，而@import 只有 IE5 以上才能识别。 <code>link 方式样式的权重高于@import 的</code></li><li><strong>Flex 布局</strong><br>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。 布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它 对于<code>那些特殊布局非常不方便，比如，垂直居中就不容易实现</code>。 简单的分为容器属性和元素属性<br>容器的属性：<br><code>flex-direction</code>：决定主轴的方向（即子 item 的排列方法）<br>.box { flex-direction: row | row-reverse | column | column-reverse;<br>}<br><code>flex-wrap</code>：决定换行规则<br>.box{ flex-wrap: nowrap | wrap | wrap-reverse; }<br><code>flex-flow</code>：<br>.box { flex-flow: &lt; flex-direction&gt; || &lt; flex-wrap&gt;; }<code>justify-content</code>：对其方式，水平主轴对齐方式<br><code>align-items</code>：对齐方式，竖直轴线方向<br>项目的属性（元素的属性）：<br><code>order 属性</code>：定义项目的排列顺序，顺序越小，排列越靠前，默认为 0 <code>flex-grow 属性</code>：定义项目的放大比例，即使存在空间，也不会放大<br><code>flex-shrink 属性</code>：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果 定义个 item 的 flow-shrink 为 0，则为不缩小<br><code>flex-basis 属性</code>：定义了在分配多余的空间，项目占据的空间。<br><code>flex</code>：是 flex-grow 和 flex-shrink、flex-basis 的简写，默认值为 0 1 auto。<br><code>align-self</code>：允许单个项目与其他项目不一样的对齐方式，可以覆盖 <code>align-items</code>，默认属 性为 auto，表示继承父元素的 align-items 比如说，用 flex 实现圣杯布局</li><li><strong>BFC（块级格式化上下文，用于清楚浮动，防止 margin 重叠等）</strong><br>&ensp;&ensp;直译成：<code>块级格式化上下文</code>，是一个<code>独立的渲染区域</code>，并且有一定的布局规则。 BFC 区域不会与 float box 重叠<br>BFC 是页面上的一个独立容器，子元素不会影响到外面<br>计算 BFC 的高度时，浮动元素也会参与计算 那些元素会生成 BFC：<br>根元素<br>float 不为 none 的元素<br>position 为 fixed 和 absolute 的元素<br>display 为 inline-block、table-cell、table-caption，flex，inline-flex 的元素<br>overflow 不为 visible 的元素</li><li><strong>垂直居中的方法</strong><br>1) margin:auto 法 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> div&#123; </span><br><span class="line">    width: 400px; height: 400px; </span><br><span class="line">    position: relative; </span><br><span class="line">    border: 1px solid #465468; </span><br><span class="line">    &#125;</span><br><span class="line">    img&#123;</span><br><span class="line">         position: absolute; </span><br><span class="line">         margin: auto; top: 0; </span><br><span class="line">         left: 0; right: 0; </span><br><span class="line">         bottom: 0; </span><br><span class="line">         &#125;</span><br><span class="line"> &lt; div&gt;</span><br><span class="line">&lt; img src=&quot;mm.jpg&quot;&gt; </span><br><span class="line">&lt; /div&gt; 定位为上下左右为 0，margin：0 可以实现脱离文档流的居中</span><br></pre></td></tr></table></figure>2)margin 负值法<br>.container{<br> width: 500px; height: 400px;<br>  border: 2px solid #379;<br>   position: relative;<pre><code>&#125;.inner&#123;  width: 480px;  height: 380px;  background-color: #746;  position: absolute;  top: 50%; left: 50%;  margin-top: -190px; /*height 的一半*/   margin-left: -240px; /*width 的一半*/ &#125;</code></pre>补充：其实这里也可以将 marin-top 和 margin-left 负值替换成， transform：translateX(-50%)和 transform：translateY(-50%)<br>3)table-cell（未脱离文档流的） 设置父元素的 display:table-cell,并且 vertical-align:middle，这样子元素可以实现垂直居中。 css: div{ width: 300px; height: 300px; border: 3px solid #555; display: table-cell; vertical-align: middle; text-align: center; }img{ vertical-align: middle; }<br>4)利用 flex 将父元素设置为 display:flex，并且设置 align-items:center;justify-content:center;<br>1css: 2.container{ 3width: 300px; 4height: 200px; 5border: 3px solid #546461; 6display: -webkit-flex; 7display: flex; 8-webkit-align-items: center; 9align-items: center; 10-webkit-justify-content: center; 11justify-content: center; 12} 13.inner{ 14border: 3px solid #458761; 15padding: 20px; 16}</li><li><p><strong>使用CSS实现硬币翻转效果</strong>  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/* 硬币容器样式 */</span></span><br><span class="line"><span class="selector-class">.coin</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">1000px</span>; <span class="comment">/* 透视距离 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 硬币正面样式 */</span></span><br><span class="line"><span class="selector-class">.front</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 硬币背面样式 */</span></span><br><span class="line"><span class="selector-class">.back</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: silver;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">180deg</span>); <span class="comment">/* 初始为反面朝上 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动画效果 */</span></span><br><span class="line"><span class="selector-class">.coin</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.front</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: flip-coin <span class="number">0.8s</span> forwards;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> flip-coin &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">180deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.coin</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.back</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: flip-coin-back <span class="number">0.8s</span> forwards;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> flip-coin-back &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">180deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过定义两个 @keyframes 规则分别 表示正面翻转和背面翻转的动画，使用 <code>transform: rotateY()</code> 来实现翻转的效果。<br>需要注意的是，在动画效果中，我们使用了 forwards 关键字，使得动画结束后保持最终状态。此外，为了避免鼠标快速移动时动画效果重复触发，我们可以使用 transition-delay 属性为鼠标悬停状态添加一个延迟效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;coin&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;front&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>em、deg和px都是在前端开发中常用的单位</strong><br>它们之间的区别如下：<br>1) px（像素）是一个<code>绝对单位</code>，它在所有设备上的显示效果相同。例如，10px 的文本在所有设备上看起来都是一样大小的。<br>2) em 是一个<code>相对单位</code>，它基于当前元素的字体大小进行计算。例如，如果一个元素的字体大小为16px，那么 1em 就等于16px。如果在一个元素内部设置字体大小为 0.5em，那么它的大小将会是当前元素字体大小的一半。<br>因此，em 和 px 的主要区别在于它们的大小计算方式不同。px 是一个绝对单位，而 em 是一个相对单位。在设置文本大小时，使用 em 可以让你的文本大小根据父元素的大小进行缩放，而不是在不同的设备上显示不同的大小。<br>1) deg是一个角度单位，用于表示旋转角度。在CSS中，它通常用于设置CSS3的旋转属性，如<code>transform: rotate(45deg)</code>。</p></li><li>画一个3D正方形<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.cube</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">4em</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">1.5em</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">30deg</span>) <span class="built_in">rotateY</span>(<span class="number">32deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.side</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">0.6</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.front</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">1em</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bottom</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">1em</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.top</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">1em</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">1em</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">1em</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.back</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">1em</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper w1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cube&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;side front&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;side back&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;side right&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;side left&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;side top&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;side bottom&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper w2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cube&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;side front&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;side back&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;side right&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;side left&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;side top&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;side bottom&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>calc 属性</strong><br>Calc 用户动态计算长度值，任何长度值都可以使用 calc()函数计算，需要注意的是，运 算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；</li><li><strong>隐藏页面中某个元素的方法</strong><br>display:none; visibility:hidden; opacity: 0; position 移到外部，z-index 涂层遮盖等等<br>1) visibility：hidden，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已 经绑定的事件<br>2)  display：none，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元 素删除掉</li><li><strong>line-height 和 height 的区别</strong><br>line-height 一般是指布局里面一段文字上下行之间的高度，是针对字体来设置的，height 一般是指容器的整体高度。</li><li><strong>相对布局和绝对布局，position:relative 和 obsolute。</strong><br>相对定位 relative：<br>如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直 或水平位置，``。 在使用相对定位时，无论是 否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。<br>绝对定位 absolute：<br>绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<html>。absolute 定位使元素的位置与文档流无关，因此不占据空间。 absolute 定位的元素和其他元素重叠。</li><li>css 布局<br>六种布局方式总结：<br><code>圣杯布局、双飞翼布局、Flex 布局、绝对定位布局、表格布局、网 格布局</code>。<br>圣杯布局是指布局从上到下分为 header、container、footer，然后 container 部分定为三栏 布局。这种布局方式同样分为 header、container、footer。<br>圣杯布局的缺陷在于 center 是 在 container 的 padding 中的，因此宽度小的时候会出现混乱。<br>双飞翼布局给 center 部分包裹了一个 main 通过设置 margin 主动地把页面撑开。<br>Flex 布局是由 CSS3 提供的一种方便的布局方式。<br>绝对定位布局是给 container 设置 position: relative 和 overflow: hidden，因为绝对定位的元 素的参照物为第一个 postion 不为 static 的祖先元素。 left 向左浮动，right 向右浮动。 center 使用绝对定位，通过设置 left 和 right 并把两边撑开。 center 设置 top: 0 和 bottom: 0 使其高度撑开。 表格布局的好处是能使三栏的高度统一。 网格布局可能是最强大的布局方式了，使用起来极其方便，但目前而言，兼容性并不好。 网格布局，可以将页面分割成多个区域，或者用来定义内部元素的大小，位置，图层关 系</li><li><strong>css 预处理器有什么</strong><br>less，sass 等</li></ol><h3 id="javaScript"><a href="#javaScript" class="headerlink" title="javaScript"></a>javaScript</h3><ol><li><strong>闭包</strong><br>一句话可以概括：闭包就是能够读取其他函数内部变量的函数，或者子函数在外调用， 子函数所在的父函数的作用域不会被释放。</li><li><strong>图片的懒加载和预加载</strong><br>预加载：提前加载图片，当用户需要查看时可直接从本地缓存中渲染。 懒加载：懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。 两种技术的本质：两者的行为是相反的，一个是提前加载，一个是迟缓甚至不加载。 懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力</li><li><strong>JS 实现跨域</strong><br>JSONP：通过动态创建 script，再请求一个带参网址实现跨域通信。document.domain + iframe<br>跨域：两个页面都通过 js 强制设置 document.domain 为基础主域，就实现了同域。<br>location.hash + iframe 跨域：a 欲与 b 跨域相互通信，通过中间页 c 来实现。 三个页面， 不同域之间利用 iframe 的 location.hash 传值，相同域之间直接 js 访问来通信。 window.name + iframe跨域：通过iframe的src属性由外域转向本地域，跨域数据即由iframe 的 window.name 从外域传递到本地域。 postMessage 跨域：可以跨域操作的 window 属性之一。 CORS：服务端设置 Access-Control-Allow-Origin 即可，前端无须设置，若要带 cookie 请 求，前后端都需要设置。 代理跨域：启一个代理服务器，实现数据的转发</li><li><strong>JS 基本数据类型</strong><br>基本数据类型：undefined、null、number、boolean、string、symbol</li><li><strong>跨域的原理</strong><br>跨域，是指浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览 器对 JavaScript 实施的安全限制，那么只要协议、域名、端口有任何一个不同，都被当 作是不同的域。跨域原理，即是通过各种方式，避开浏览器的安全限制。</li><li>写一个函数，第一秒打印 1，第二秒打印 2<br>两个方法，第一个是用 let 块级作用域<br>for(let i=0;i&lt;5;i++){<br>setTimeout(function(){<br> console.log(i)<br>  },1000*i)<br>  }<br>第二个方法闭包<br>for(var i=0;i&lt;5;i++){<br> (function(i){ <pre><code> setTimeout(function()&#123;</code></pre>console.log(i)<br>},1000*i) })(i)<br>}</li></ol><h2 id="前端核心"><a href="#前端核心" class="headerlink" title="前端核心"></a>前端核心</h2><h3 id="服务端编程"><a href="#服务端编程" class="headerlink" title="服务端编程"></a>服务端编程</h3><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><h3 id="移动Web端"><a href="#移动Web端" class="headerlink" title="移动Web端"></a>移动Web端</h3><h2 id="前端进阶"><a href="#前端进阶" class="headerlink" title="前端进阶"></a>前端进阶</h2><h3 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h3><h3 id="Vue框架"><a href="#Vue框架" class="headerlink" title="Vue框架"></a>Vue框架</h3><h3 id="React框架"><a href="#React框架" class="headerlink" title="React框架"></a>React框架</h3><h3 id="Angular框架"><a href="#Angular框架" class="headerlink" title="Angular框架"></a>Angular框架</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN内容分发网络</title>
      <link href="/posts/912c4bbc.html"/>
      <url>/posts/912c4bbc.html</url>
      
        <content type="html"><![CDATA[<h1 id="免费CDN"><a href="#免费CDN" class="headerlink" title="免费CDN"></a>免费CDN</h1><p>CDN（内容分发网络）是一种在全球各地部署服务器，通过就近访问提高网站或应用程序的速度和可靠性的技术。然而，大多数CDN服务都需要付费。</p><p>不过，也有一些提供免费CDN服务的供应商。以下是一些免费CDN服务的例子：</p><ul><li>Cloudflare：Cloudflare是一个免费的CDN供应商，可以加速您的网站并提供安全性和防御攻击的功能。</li><li>jsDelivr：jsDelivr是一个免费的开源CDN供应商，提供JavaScript、CSS、图像和其他文件的分发服务。</li><li>BootstrapCDN：BootstrapCDN是一个免费的CDN供应商，提供Bootstrap和Font Awesome等前端框架和图标的分发服务。</li><li>CoralCDN：CoralCDN是一个免费的开源CDN供应商，旨在提高动态Web内容的可用性。</li></ul><p>这些免费CDN供应商可能不如付费的CDN服务提供商那样强大或灵活，但是它们可以提供一定程度的加速和性能提升，特别是对于小型网站或项目。</p><h1 id="Cloudflare与jsDelivr的区别"><a href="#Cloudflare与jsDelivr的区别" class="headerlink" title="Cloudflare与jsDelivr的区别"></a>Cloudflare与jsDelivr的区别</h1><p>Cloudflare和jsDelivr都是免费的CDN供应商，但它们在一些方面存在一些区别。</p><ol><li>功能<br>Cloudflare提供比jsDelivr更广泛的功能，包括防止DDoS攻击、SSL证书、安全防护等。jsDelivr的功能主要是提供JavaScript、CSS、图像和其他文件的分发服务，但是它也提供了一些附加功能，如版本控制和压缩。</li><li>性能<br>Cloudflare的全球网络更加庞大，能够提供更广泛的覆盖范围和更快的加载速度。然而，jsDelivr也拥有相当快的加载速度，并且其开源软件支持跨国边缘缓存，能够更好地支持某些特定的项目。</li><li>用户界面<br>Cloudflare提供一个复杂的仪表板，可以自定义各种设置，包括缓存规则、防火墙规则等等。jsDelivr则提供了一个简单的界面，更适合于小型网站和个人项目。</li><li>支持<br>Cloudflare提供广泛的支持，包括在线帮助中心、社区支持和专业支持服务。jsDelivr则主要通过GitHub仓库和开发者社区提供支持。<br>总的来说，Cloudflare和jsDelivr都是出色的免费CDN供应商，但它们的功能和重点略有不同。如果您需要更广泛的功能和更好的支持，Cloudflare可能是更好</li></ol><h1 id="使用jsDelivr的全部步骤及示例代码："><a href="#使用jsDelivr的全部步骤及示例代码：" class="headerlink" title="使用jsDelivr的全部步骤及示例代码："></a>使用jsDelivr的全部步骤及示例代码：</h1><ol><li><p>选择需要托管的文件。</p></li><li><p>在HTML文档中添加jsDelivr的链接。将您要托管的文件的链接替换为jsDelivr提供的链接，这样就可以从CDN中加载这些文件。例如，如果您要使用jQuery，您可以将以下代码添加到您的HTML文档中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>确定要使用的版本。jsDelivr提供了很多不同的版本和CDN链接。您可以在jsDelivr的网站上找到特定版本的链接，也可以使用@latest关键字来自动加载最新版本的文件。</p></li><li><p>确定要使用的CDN。jsDelivr提供了多个CDN，以确保高可用性和性能。您可以使用cdn.jsdelivr.net或cdn.jsdelivr.com来访问jsDelivr的CDN。</p></li><li>部署您的网站或应用程序。一旦您完成了上述步骤，您就可以部署您的网站或应用程序，并使用jsDelivr提供的CDN来分发文件。您的文件现在将从jsDelivr的CDN中加载，从而提高了加载速度和性能。</li></ol><p>请注意，jsDelivr是一个开源项目，您可以通过其GitHub仓库获取更多信息并为其做出贡献</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>影刀RPA应用</title>
      <link href="/posts/5289c1ca.html"/>
      <url>/posts/5289c1ca.html</url>
      
        <content type="html"><![CDATA[<p>简介：每一个人都会用的RPA， 让人不必像机器一样工作<br>下载<a href="https://www.winrobot360.com/">影刀RPA</a><br>使用参见Blibli视频教程</p><h2 id="Selenium-IDE脚本录制"><a href="#Selenium-IDE脚本录制" class="headerlink" title="Selenium-IDE脚本录制"></a>Selenium-IDE脚本录制</h2><p>IE浏览器扩展，通过脚本实现网页操作自动化，简化网页重复工作<br><a href="https://www.selenium.dev/selenium-ide/docs/en/introduction/control-flow#looping">官网介绍</a><a href="https://blog.csdn.net/luanpeng825485697/article/details/83574989">参考链接</a></p><h3 id="times循环"><a href="#times循环" class="headerlink" title="times循环"></a>times循环</h3><div class="table-container"><table><thead><tr><th>Command</th><th>Target</th><th>Value</th></tr></thead><tbody><tr><td>execute script</td><td>return <code>返回到首行执行</code></td><td>check</td></tr><tr><td>time</td><td>n<code>循环次数</code></td><td></td></tr><tr><td>execute script</td><td>return ${check} + 1</td><td>check</td></tr><tr><td>中间运行代码部分</td><td></td><td></td></tr><tr><td>end</td><td></td><td></td></tr><tr><td>assert  <code>断言</code></td><td>check</td><td>循环次数n<code>判断是否完成最后一次循环</code></td></tr></tbody></table></div><h3 id="do循环"><a href="#do循环" class="headerlink" title="do循环"></a>do循环</h3><div class="table-container"><table><thead><tr><th>Command</th><th>Target</th><th>Value</th></tr></thead><tbody><tr><td>execute script</td><td>return <code>返回到首行执行</code></td><td>check</td></tr><tr><td>do</td><td></td><td></td></tr><tr><td>execute script</td><td>return ${check} + 1</td><td>check</td></tr><tr><td>中间运行代码部分</td><td></td><td></td></tr><tr><td>repeat if</td><td>${check}&lt; n<code>循环次数</code></td><td></td></tr><tr><td>assert  <code>断言</code></td><td>check</td><td>循环次数n<code>判断是否完成最后一次循环</code></td></tr></tbody></table></div>]]></content>
      
      
      
        <tags>
            
            <tag> RPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java知识点回顾</title>
      <link href="/posts/7e287b3.html"/>
      <url>/posts/7e287b3.html</url>
      
        <content type="html"><![CDATA[<span class='p green center'>简介：</span><p>&ensp;&ensp;&ensp;<span class='p green'>在java编程的学习过程中要建立编程思想，通过化繁为简、先死后活、过关斩将的方式提升编程能力。通过分析需求，锻炼代码实现的能力，多练习代码程序达到唯手熟尔！</span><br>SSM包括：spring(轻量级容器框架)、springMVC(分层的Web开发框架)、MyBatis(持久化框架)<br>重要特点:面向对象(OOP)、健壮性(强类型机制异常处理)、java语言跨平台多系统运行、解释型语言(C++为编译型语言)<br>JVM：因为有JVM,java程序可以在不同的操作系统中进行，虚拟计算机包含在JDK中,不同平台有不同的虚拟机,JVM屏蔽了底层平台的差异，实现一次编译到处运行。<br>JDK(java开发工具集): <code>JDK = JRE(java运行环境) + Java的开发工具集</code><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;<code>JRE(java运行环境) = JVM + Java核心类库</code></p><hr><h2 id="IDE使用"><a href="#IDE使用" class="headerlink" title="IDE使用"></a>IDE使用</h2><h3 id="设置的快捷键"><a href="#设置的快捷键" class="headerlink" title="设置的快捷键"></a>设置的快捷键</h3><p>根据编程习惯设置自己的模板省缺以及快捷键<br><details class="folding-tag" green><summary> 查看快捷键 </summary>              <div class='content'>              <p><kbd>.var</kbd>&ensp;&ensp;&ensp;  new对象时的快捷键<br><kbd>main</kbd>&ensp;&ensp;&ensp;  快速创建主函数<br><kbd>fori</kbd>&ensp;&ensp;&ensp;  快速创建for循环<br><kbd>sout</kbd>&ensp;&ensp;&ensp;  快速创建print语句<br><kbd>itit</kbd>&ensp;&ensp;&ensp;  快速创建迭代循环<br><kbd>ctrl</kbd>+<kbd>j</kbd>&ensp;&ensp;&ensp;  显示模板快捷键<br><kbd>ctrl</kbd>+<kbd>B</kbd>&ensp;&ensp;&ensp;  定位源码<br><kbd>ctrl</kbd>+<kbd>H</kbd>&ensp;&ensp;&ensp;  层级关系<br><kbd>ctrl</kbd>+<kbd>R</kbd>&ensp;&ensp;&ensp;  快速运行<br><kbd>ctrl</kbd>+<kbd>Y</kbd>&ensp;&ensp;&ensp;  删除行<br><kbd>ctrl</kbd>+<kbd>D</kbd>&ensp;&ensp;&ensp;  向下复制<br><kbd>ctrl</kbd>+<kbd>O</kbd>&ensp;&ensp;&ensp;  构造函数快捷键<br><kbd>ctrl</kbd>+<kbd>Alt</kbd>&ensp;&ensp;&ensp;  光标<br><kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>t</kbd>&ensp;&ensp;&ensp;  快速包围异常<br><kbd>ctrl</kbd>+<kbd>Alt</kbd>+<kbd>R</kbd>&ensp;&ensp;&ensp;  格式化代码<br><kbd>Alt</kbd>+<kbd>insert</kbd>&ensp;&ensp;&ensp;  重写toString方法<br><kbd>Alt</kbd>+<kbd>Enter</kbd>&ensp;&ensp;&ensp;  导入包</p>              </div>            </details></p><h3 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h3><blockquote><p>命名规范</p><ol><li><code>包</code>名使用全小写格式</li><li><code>类名</code>使用大驼峰格式</li><li><code>方法</code>名使用小驼峰格式</li><li><code>变量名</code>使用全小写格式</li><li><code>常量名</code>使用全大写格式</li></ol></blockquote><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><h3 id="运算符优先级排序"><a href="#运算符优先级排序" class="headerlink" title="运算符优先级排序"></a>运算符优先级排序</h3><ol><li>后缀运算符（如 x++、x- -）</li><li>一元运算符（如 ++x、- -x、+x、-x、!、~）</li><li>乘法运算符（如 *、/、%）</li><li>加法运算符（如 +、-）</li><li>移位运算符（如 &lt;&lt;、&gt;&gt;、&gt;&gt;&gt;）</li><li>比较运算符（如 &lt;、&lt;=、&gt;、&gt;=、instanceof）</li><li>相等运算符（如 ==、!=）</li><li>按位与运算符（如 &amp;）</li><li>按位异或运算符（如 ^）</li><li>按位或运算符（如 |）</li><li>逻辑与运算符（如 &amp;&amp;） 逻辑运算符也叫<code>短路运算符</code></li><li>逻辑或运算符（如 ||）</li><li>条件运算符（如 ? :）</li><li>赋值运算符（如 =、+=、-=、*=、/=、%=、&amp;=、^=、|=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=</li></ol><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><ol><li><strong>switch语句</strong><br>switch语句的表达式可以是<code>char、byte、short、int</code>或者枚举类型。<code>计算结果</code>是整型（<code>int</code>）或者字符型（<code>char</code>）</li><li><strong>while循环语句</strong><br>1) 先判断表达式的真假，为真执行循环体，为假循环体结束，<code>假时一次也不执行</code><br>2) do语句在执行一次循环体后，再判断条件表达式真假，为真是再执行循环体，为假时结束，不论初始条件表达式为何值，循环体都至少执行一次</li><li><strong>for语句</strong><br>for(i=0,j=0;i&lt; arr.length;i++,j++){}</li><li><strong>break语句与continue语句</strong><br>1) <code>break</code>语句用于结束当前循环（包括for、while、do-while等循环），并<code>跳出该循环外执行下一条语句</code>。<br>通常情况下，break语句的执行是有条件的，即在满足一定的条件时才执行break语句。例如，当找到了需要的结果时，可以使用break语句结束循环，以提高程序的效率。<br>2) <code>continue</code>语句用于<code>终止当前循环中的当前迭代，跳过剩下的循环语句</code>，直接开始下一次迭代。<br>通常情况下，continue语句的执行也是有条件的，即在满足一定的条件时才执行continue语句。<br>例如，在遍历一个数组或集合时，可以使用continue语句跳过一些元素，只处理需要的元素，以提高程序的效率。</li></ol><h2 id="数组和字符串"><a href="#数组和字符串" class="headerlink" title="数组和字符串"></a>数组和字符串</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ol><li>初始化<br>分为静态初始化与动态初始化<br>1) 静态初始化是在创建数组时<code>直接为数组分配空间，指定数组元素的初始值</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayName = &#123;value1, value2, ..., valueN&#125;;</span><br></pre></td></tr></table></figure>2) 动态初始化是指在创建数组时，先为数组<code>分配空间</code>。然后再为<code>每一个数组元素</code>制定初始值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayName = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize];</span><br></pre></td></tr></table></figure></li><li>数组的长度<br>1) 在Java中，一维数组的长度是数组元素的数量，可以通过数组名.length获取。<br>如，<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; <span class="comment">//这个数组的长度为3，即arr.length的值为3。</span></span><br></pre></td></tr></table></figure>2) 二维数组的长度包括它的行数和列数，可以使用数组名.length获取行数，使用数组名[0].length获取列数。<br>例如，<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;; <span class="comment">//这个二维数组的行数为2，列数为2，即arr.length的值为2，arr[0].length的值为2。</span></span><br></pre></td></tr></table></figure>注意，这种方法只适用于所有行的列数都相同的情况，否则需要遍历整个二维数组来获取行数和列数。</li></ol><h2 id="继承与多态"><a href="#继承与多态" class="headerlink" title="继承与多态"></a>继承与多态</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ol><li>成员变量必须是 <code>public、static 和 final</code>类型的，也就是常量，因为接口中不能包含可变状态。</li><li><code>成员变量的值必须在定义时就确定，并且不能再被修改</code>。</li><li>在接口中定义方法时，需要满足以下要求：<br>1) 方法必须是 <code>public</code> 和 <code>abstract</code>类型的，因为接口中的方法没有实现，只有定义。<br>2) 方法不能包含<code>方法体</code>。<br>3) 接口中可以定<code>义默认方法和静态方法</code>。默认方法是指已经有默认实现的方法，可以被实现该接口的类覆盖，也可以使用默认实现。静态方法是指不依赖于实例而存在的方法，可以通过接口名调用。</li></ol><p>总之，在接口中定义的成员变量和方法都必须是公共的，并且不允许有实现。成员变量必须是常量，方法必须是抽象的或者默认方法或者静态方法。接口可以看做是一种约定或者协议，定义了实现该接口的类需要实现哪些方法，并且保证这些方法的调用方式和参数类型是一致的。</p><h2 id="输入流与输出流"><a href="#输入流与输出流" class="headerlink" title="输入流与输出流"></a>输入流与输出流</h2><h3 id="数据流的基本概念"><a href="#数据流的基本概念" class="headerlink" title="数据流的基本概念"></a>数据流的基本概念</h3><p>&ensp;&ensp;<code>数据流</code>是指一组有顺序的，有起点和终点的字节集合。</p><ol><li>java.io包中提供了表示数据流的4个基本抽象类，分别是：<br>1) InputStream<br>2) OutputStream<br>3) Reader<br>4) Writer</li><li>java.io包中所有输入数据流都是从抽象类InputStream继承而来<br>输入数据提供的主要数据操作方法：<br>1) int read():从输入流中读取一个字节的二进制数据，当读取数据结束时，返回值为<code>-1</code>，需要使用<code>close()</code>方法关闭数据流，以免数据丢失。<br>2) int read(byte[]b)将多个字节渎到数组中，填满整个数组<br>3) int read(byte[]b,int off,int len)从输入流中下标为off处读取长度为len的数据，返回读取字节数。<br>4) void close()关闭数据流<br>5) void available() 返回可已读取的字节数（但是实际读取中可能大于这个值）<br>6) long skip(long 1) 跳过数据流中制定数量的自己不读取  </li><li>对数流中字节的读取通常按照从头到尾书序进行，如果想要从反方向读取，则需要使用回推（Push Back）。经常用到的方法：<br>1) boolean markSupported() 用于测试数据是否支持回推操作，当一个数据流支持mark()和reset()方法返回true,f否则返回false<br>2) void mark(intnarkarea)用于标记数据流当前位置，并划出一个缓冲区末其大小至少为指定参数的大小<br>3) void reset() 将输入流重新定位到对比此流最后调用mark方法时的位置。  </li><li>java.io包中所有输出数据流都是从抽象类OutputStream继承而来<br>1) int write():从输入流中读取一个字节的二进制数据<br>2) int write(byte[]b)将多个字节渎到数组中，填满整个数组<br>3) int write(byte[]b,int off,int len)从输入流中下标为off处读取长度为len的数据，返回读取字节数。<br>4) void close()<code>当结束对输出数据流的操作时应该将其关闭</code><br>5) void flush()·刷新此输出流并强制写出所有缓冲的输出字节·</li></ol><h3 id="基本字节数据流"><a href="#基本字节数据流" class="headerlink" title="基本字节数据流"></a>基本字节数据流</h3><p>文件数据流包括FileInputStreaam与FileOutputStream其数据源与数据终点都应当是文件。通过所提供的方法可以对本机文件进行操作，但是不支持mark()和reset()方法。<br>如果FileOutputStream所指文件不存在，则系统会创建一个新文件。如果你只是想在当前项目目录下创建这些文件，可以将它们放在与Java源代码相同的目录中。如果你希望将它们保存在不同的目录中，你可以指定文件路径，  </p><blockquote><blockquote><p>File inputFile = new File(“C:/myfiles/input.txt”);<br>File outputFile = new File(“C:/myfiles/output.txt”);</p></blockquote></blockquote><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>能够记录自己的状态以便将来得到复原的能力，称为对象持久性。</p><ol><li><strong><code>Serializable</code></strong>接口中没有定义任何方法，只是作为一个标记来指示实现该接口类可以进行序列化，而没有实现该接口类的对象不能长期保存期状态。</li><li>对象结构表<br>序列化只能保存对象的<code>非静态成员变量</code>，而不能保存任何<code>成员方法和静态成员变量</code>，并且保存的只是变量的值，对于变量的<code>任何修饰符都不能保存</code>。</li></ol><ul><li>写入对象文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Date d=<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 一个对象d</span></span><br><span class="line">FileOutpuStream f= <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;date.ser&quot;</span>);</span><br><span class="line"><span class="comment">// 输出文件 ObjectOutputStream s=new ObjectOutputStream(f);</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">s.writeObject(d);</span><br><span class="line">s.close();  <span class="comment">//将对象d写入文件，关闭文件</span></span><br><span class="line">c.atch(IOExetion e)|</span><br><span class="line">e.pinStackTrace();</span><br></pre></td></tr></table></figure></li><li>渎对象输入流<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ate d= <span class="literal">null</span>;</span><br><span class="line">FilelnputStream f= <span class="keyword">new</span> <span class="title class_">FilelnputStream</span>(<span class="string">&quot;date.ser &quot;</span>);</span><br><span class="line">ObjectInputStream s=<span class="keyword">new</span> <span class="title class_">ObjectInpuStream</span>(f);</span><br><span class="line">y</span><br><span class="line">d=(Date)s. readObject(d);</span><br><span class="line">s. lose();</span><br><span class="line"><span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">e.prinStackTace);</span><br><span class="line">System out. println(<span class="string">&quot;Date serialized at&quot;</span>+d);</span><br></pre></td></tr></table></figure></li></ul><h3 id="基本字符流"><a href="#基本字符流" class="headerlink" title="基本字符流"></a>基本字符流</h3><ol><li>Java中的字符流以字符为单位进行操作。Java中提供了两个基本的字符流类：Reader和Writer。它们的子类包括InputStreamReader、FileReader、OutputStreamWriter和FileWriter等，这些类提供了读取和写入字符的基本操作。</li><li>缓冲区读者和缓冲区写者是对基本字符流的一种包装。这些类提供了缓冲功能，可以提高读取和写入数据的效率。例如，BufferedReader和BufferedWriter可以分别读取和写入一个字符或一行字符。当读取或写入大量数据时，使用缓冲区读者和缓冲区写者可以减少I/O操作，从而提高效率。<br>缓冲区读者和缓冲区写者都是通过将数据缓存在内存中，从而减少访问硬盘或网络的次数，提高读写的效率。它们提供了很多便捷的方法，比如BufferedReader提供了readLine()方法，可以方便地读取一行字符。BufferedWriter提供了write()方法，可以方便地写入字符。</li><li>在Java IO中，Reader和Writer是基本字符流，BufferedReader和BufferedWriter是缓冲区读者和缓冲区写者，它们提供了不同的方法。</li></ol><p>Reader和Writer提供了以下方法：</p><p>read()：读取一个字符，返回字符的ASCII码或Unicode码。<br>read(char[] cbuf)：将字符读入到指定的字符数组中。<br>read(char[] cbuf, int off, int len)：将字符读入到指定的字符数组中的某个范围内。<br>skip(long n)：跳过n个字符。<br>ready()：返回是否已准备好读取数据。<br>close()：关闭流。<br>BufferedReader和BufferedWriter提供了以下方法：</p><p>readLine()：读取一行文本，返回一个字符串。<br>newLine()：写入一个换行符。<br>write(char[] cbuf)：将字符写入流中。<br>write(char[] cbuf, int off, int len)：将字符写入到指定的字符数组中的某个范围内。<br>write(int c)：写入单个字符。<br>flush()：将缓冲区内容写入目标流中。<br>close()：关闭流。</p><p>需要注意的是，当使用缓冲区读者和缓冲区写者时，必须使用close()方法关闭流。关闭流会将缓冲区中的数据写入目标设备，如果不关闭流，可能会导致数据丢失。</p><h3 id="文件处理流"><a href="#文件处理流" class="headerlink" title="文件处理流"></a>文件处理流</h3><h2 id="图形界面设计"><a href="#图形界面设计" class="headerlink" title="图形界面设计"></a>图形界面设计</h2><h3 id="AWT与swing"><a href="#AWT与swing" class="headerlink" title="AWT与swing"></a>AWT与swing</h3><p>&ensp;&ensp;图形用户界(GUI)面是大多数程序不可缺少的部分,java图形用户界面由各种组件构成，在java.awt与javax.swing包中定义了多种图形用户组件。Swing与AWT的最大区别在于，Swing组件的实现不包含任何本地代码，不受硬件平台限制。Swing被称为是<code>轻量级</code>组件，AWT被称为<code>重量级</code>组件.<br>轻量级组件与重量级组件同时使用时，重量级组件<code>总是会显示在前面</code>。</p><blockquote><p>注意:</p><blockquote><p>组件是构成图形用户界面的的<code>基本元素</code>。<br>组件可以分为<code>容器组件</code>和<code>非容器组件</code>。</p></blockquote></blockquote><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>&ensp;&ensp;容器组件是指可以包含其他组件的组件。可以分为顶层容器与一般用途容器。</p><blockquote><p>Swing中提供了4种顶层容器：</p><ol><li>JFrame  &ensp;&ensp; 框架</li><li>JApplet &ensp;&ensp; 小应用程序</li><li>JDialog &ensp;&ensp; 对话框  </li><li>JWindows &ensp;&ensp; 窗口   </li></ol><p>JFrame中常用的构造方法</p></blockquote><details class="folding-tag" green><summary> 查看代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 图形用户界面;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;s</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑堃逢</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JFrameDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;JFrameDemo&quot;</span>);</span><br><span class="line">        <span class="comment">//创建一个JFrame的实例，有标题</span></span><br><span class="line">        JButton button= <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;Press me&quot;</span>);</span><br><span class="line">        <span class="comment">//创建一个JButton的实例，按钮上有文字</span></span><br><span class="line">        frame.setBounds(<span class="number">200</span> ,<span class="number">150</span>,<span class="number">1000</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//移动并调整框架大小</span></span><br><span class="line">        frame.setBackground(Color.red); <span class="comment">//设置背景颜色</span></span><br><span class="line"><span class="comment">//         frame.setLayout();  //设置布局管理器</span></span><br><span class="line">        button.setSize(<span class="number">50</span>,<span class="number">30</span>);</span><br><span class="line">        frame.getContentPane().add(button, BorderLayout.CENTER);</span><br><span class="line">         <span class="comment">//  返回内容窗体对象</span></span><br><span class="line">        <span class="comment">//   将按钮放在JFrame中央</span></span><br><span class="line"><span class="comment">//        frame.pack();//将JFrame设置为适当大小</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);<span class="comment">//显示JFrame</span></span><br><span class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<span class="comment">//退出时关闭窗口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>内容窗格JPanel<br>4个顶层容器每一个都有一个内容窗格，除菜单之外顶层容器中的组件都放在内容窗格中。</p><blockquote><blockquote><p>一种方法是通过顶层容器的getContentPane()获得默认内容窗格<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Container</span> <span class="variable">contentPane</span> <span class="operator">=</span> frame.getComtentPane();</span><br><span class="line">contentPane.add(button,BorderLayout.CENTER);</span><br></pre></td></tr></table></figure><br>另一种方法是创建一个新的内容窗格JPanel实例.<br><details class="folding-tag" green><summary> 查看代码 </summary>              <div class='content'>              <div class="tabs" id="实例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#实例-1">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="实例-1"><p>因为顶层容器的布局管理器是<code>BorderLayout</code>，而JPanel的默认管理器是FlowLayout，因此要为JPanel设置一个<code>BorderLayout</code>布局管理器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 图形用户界面;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑堃逢</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JFrameDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;JFrameDemo2&quot;</span>);</span><br><span class="line">        JButton button= <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;Press me&quot;</span>);</span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">contentPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();<span class="comment">//创建一个JPanel实例</span></span><br><span class="line">        contentPane.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        <span class="comment">// 为JPanes设置BorderLayout布局管理器</span></span><br><span class="line">        contentPane.add(button,BorderLayout.CENTER);</span><br><span class="line">        <span class="comment">//将JBotton放在JPane中间</span></span><br><span class="line">        frame.setContentPane(contentPane);</span><br><span class="line">        <span class="comment">//为JFrame设置新的内容窗格</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details></p></blockquote></blockquote><p>面板<br>面板不能独立存在必须添加到其他容器内部，尤其普通面板(JPanel)和滚动面板(JScrollPane)的用途最为广泛。<br><details class="folding-tag" green><summary> 查看代码 </summary>              <div class='content'>              <div class="tabs" id="实例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#实例-1">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="实例-1"><p>因为顶层容器的布局管理器是<code>BorderLayout</code>，而JPanel的默认管理器是FlowLayout，因此要为JPanel设置一个<code>BorderLayout</code>布局管理器。<br>jPanel.setLayout(new BorderLayout());<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 图形用户界面;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑堃逢</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FrameWithPanel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;浮生何必言&quot;</span>);</span><br><span class="line">        <span class="type">Container</span> <span class="variable">contentPane</span> <span class="operator">=</span> frame.getContentPane();</span><br><span class="line">        <span class="comment">//获取内容窗格（面板）</span></span><br><span class="line">        contentPane.setBackground(Color.GREEN);</span><br><span class="line">        <span class="comment">//为面板设置背景颜色、</span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">jPanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        <span class="comment">//创建面板实例</span></span><br><span class="line">        jPanel.setBackground(Color.YELLOW);</span><br><span class="line">        <span class="comment">//为JPanel实例设置背景颜色</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;press &quot;</span>);</span><br><span class="line">        jPanel.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        <span class="comment">//为JPanel设置布局管理器</span></span><br><span class="line">        jPanel.add(button,BorderLayout.SOUTH);</span><br><span class="line">        <span class="comment">//将Button添加到JPanel实例中</span></span><br><span class="line"><span class="comment">//        contentPane.add(button,BorderLayout.SOUTH);</span></span><br><span class="line">        <span class="comment">//将JPanel实例放在JFrame的南侧</span></span><br><span class="line">        frame.setSize(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">        frame.add(jPanel);</span><br><span class="line">        <span class="comment">//将实例化的新面板添加到JFrame中可以覆盖顶层容器默认的内容窗格（面板）</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details></p><h3 id="容器标签及按钮"><a href="#容器标签及按钮" class="headerlink" title="容器标签及按钮"></a>容器标签及按钮</h3><details class="folding-tag" green><summary> 查看教程 </summary>              <div class='content'>              <p><details class="folding-tag" green><summary> 示例代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 图形用户界面;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JButtonExample 是一个 Java Swing 应用程序，它演示了如何在窗口中创建一个带有文本字段和按钮的用户界面。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JButtonExample</span> <span class="keyword">extends</span> <span class="title class_">WindowAdapter</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    JFrame f; <span class="comment">// 声明 JFrame 类型的变量 f，用于创建应用程序的窗口</span></span><br><span class="line">    JButton b; <span class="comment">// 声明 JButton 类型的变量 b，用于创建按钮</span></span><br><span class="line">    JTextField tf; <span class="comment">// 声明 JTextField 类型的变量 tf，用于创建文本字段</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">tag</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 用于切换文本字段中的文本</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JButtonExample</span> <span class="variable">be</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButtonExample</span>(); <span class="comment">// 创建 JButtonExample 对象</span></span><br><span class="line">        be.go(); <span class="comment">// 调用 go 方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * go 方法创建了应用程序的用户界面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>&#123;</span><br><span class="line">        f = <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;JButton Example&quot;</span>); <span class="comment">// 创建 JFrame 对象</span></span><br><span class="line">        b = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;Sample&quot;</span>); <span class="comment">// 创建 JButton 对象</span></span><br><span class="line">        b.addActionListener(<span class="built_in">this</span>); <span class="comment">// 添加事件监听器，监听器实现为类本身</span></span><br><span class="line">        f.getContentPane().add(b,<span class="string">&quot;South&quot;</span>); <span class="comment">// 将按钮添加到窗口底部</span></span><br><span class="line">        tf = <span class="keyword">new</span> <span class="title class_">JTextField</span>(); <span class="comment">// 创建文本字段对象</span></span><br><span class="line">        f.getContentPane().add(tf,<span class="string">&quot;Center&quot;</span>); <span class="comment">// 将文本字段添加到窗口中央</span></span><br><span class="line">        f.addWindowListener(<span class="built_in">this</span>); <span class="comment">// 添加窗口事件监听器，监听器实现为类本身</span></span><br><span class="line">        f.setBounds(<span class="number">150</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">150</span>); <span class="comment">// 设置窗口的位置和大小</span></span><br><span class="line">        f.setVisible(<span class="literal">true</span>); <span class="comment">// 显示窗口</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * actionPerformed 方法用于处理按钮的单击事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;you have pressed the button!&quot;</span>; <span class="comment">// 按钮第一次单击时显示的文本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;you do another time!&quot;</span>; <span class="comment">// 按钮第二次单击时显示的文本</span></span><br><span class="line">        <span class="keyword">if</span> (tag == <span class="number">0</span>)&#123; <span class="comment">// 如果标签为 0，则将文本字段的文本设置为 s1，并将标签设置为 1</span></span><br><span class="line">            tf.setText(s1);</span><br><span class="line">            tag = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">// 如果标签不为 0，则将文本字段的文本设置为 s2，并将标签设置为 0</span></span><br><span class="line">            tf.setText(s2);</span><br><span class="line">            tag =<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * windowClosing 方法用于处理窗口关闭事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">        System.exit(<span class="number">0</span>); <span class="comment">// 退出应用程序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details></p><p><h3 id="WindowListener"><a href="#WindowListener" class="headerlink" title="WindowListener"></a>WindowListener</h3><p><code>WindowListener</code> 接口提供了处理与窗口相关的事件的方法。</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WindowListener</span> <span class="keyword">extends</span> <span class="title class_">EventListener</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">windowOpened</span><span class="params">(WindowEvent e)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">windowClosed</span><span class="params">(WindowEvent e)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">windowIconified</span><span class="params">(WindowEvent e)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">windowDeiconified</span><span class="params">(WindowEvent e)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">windowActivated</span><span class="params">(WindowEvent e)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">windowDeactivated</span><span class="params">(WindowEvent e)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><p>下面是每个方法的简要描述：</p></p><p><p>windowOpened(e:WindowEvent):void - 当窗口第一次打开时调用。<br>windowClosing(e:WindowEvent):void - 当窗口关闭时调用。<br>windowClosed(e:WindowEvent):void - 当窗口已经关闭时调用。<br>windowIconified(e:WindowEvent):void - 当窗口被最小化时调用。<br>windowDeiconified(e:WindowEvent):void - 当窗口从最小化状态恢复时调用。<br>windowActivated(e:WindowEvent):void - 当窗口变为活动状态时调用（即在其他窗口之上）。<br>windowDeactivated(e:WindowEvent):void - 当窗口失去活动状态时调用（即在其他窗口之后）。<br></p>              </div>            </details></p><h3 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h3><p>在Java中，有四种主要的布局方式，分别是BorderLayout、FlowLayout、GridLayout和GridBagLayout。</p><ol><li>BorderLayout 是一种将容器划分为五个区域的布局方式，它们分别是东、南、西、北和中间区域。可以通过指定组件的位置来放置组件，若未指定，则会放置到中间区域。</li><li>FlowLayout 是一种流式布局方式，它按照添加组件的顺序依次布局，如果一个组件放不下，则自动换行，如果设置了对齐方式，则会按照对齐方式对齐组件。</li><li>GridLayout 是一种网格布局方式，它将容器划分为多个单元格，每个单元格可以放置一个组件。可以通过指定行数和列数来确定单元格的数量，组件按照添加的顺序从左到右、从上到下的填充单元格。</li><li>CardLayout 卡片式布局管理器，它将容器中的卡片处理为一系列卡片，</li></ol><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>在 Java 中，事件监听器（Listener）是一种可以对组件事件做出响应的机制，常见的事件包括鼠标事件、键盘事件、窗口事件、组件事件等等。事件监听器通过在特定事件发生时调用特定方法来处理事件。</p><ol><li>Java 为每种事件类型都提供了对应的监听器接口，并且提供了相应的方法来添加、删除、触发事件。<br><img width="800px" heigh="500px" alt="事件监听"  src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/efee3b1b-797f-4f32-b13c-f54a223a340a.png"><br><img width="800px" heigh="500px" alt="事件监听"  src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/6d31996d-4d14-4c87-9562-88bdfe9b1573.png"></li><li>事件适配器 Adapter<br>事件监听模式允许为一个组件设置多个监听程序，通常的做法是在该事件的处理程序中进行编写需要的响应。<code>Adapter适配器将Listener接口替换为抽象类，解决了调用全响应，难以分清同一事件监听次序的问题</code>。</li></ol><h3 id="绘图基础"><a href="#绘图基础" class="headerlink" title="绘图基础"></a>绘图基础</h3><p>所有绘画都必须通过一个图形完成，可以直接在JFrame中显示文本信息，也可以直接在框架中绘图。在某个组件中绘图一般要为这个组件所属的子类重写<code>print（）</code>方法，在该重写的方法中进行绘画，但要在JCompoent子类组件中绘画，应重写<code>printComponent()</code>方法。<br>使用Graphics的基本格式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DrawingPanel</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">paintComponent</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.paintComponent(g);<span class="comment">//调用画笔</span></span><br><span class="line">        <span class="type">Graphics2D</span> <span class="variable">g2d</span> <span class="operator">=</span> (Graphics2D) g;<span class="comment">//设置2d画笔</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制线段</span></span><br><span class="line">        g2d.setColor(Color.RED);<span class="comment">//设置画笔颜色</span></span><br><span class="line">        g2d.drawLine(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">50</span>);&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h4 id="Graphics类"><a href="#Graphics类" class="headerlink" title="Graphics类"></a>Graphics类</h4><p>1) <code>drawLine(int x1, int y1, int x2, int y2)</code>：绘制一条直线，起点为(x1, y1)，终点为(x2, y2)。<br>2) <code>drawRect(int x, int y, int width, int height)</code>：绘制一个矩形，左上角坐标为(x, y)，宽度为width，高度为height。<br>3) <code>drawOval(int x, int y, int width, int height)</code>：绘制一个椭圆形，左上角坐标为(x, y)，宽度为width，高度为height。<br>4) <code>drawPolygon(int[] xPoints, int[] yPoints, int nPoints)</code>：绘制一个多边形，多边形的各个点的坐标分别存储在xPoints和yPoints数组中，nPoints表示点的数量。<br>5) <code>drawString(String str, int x, int y)</code>：绘制一个字符串，字符串的左下角坐标为(x, y)。<br>6) setColor(Color c)：设置绘图颜色。<br>7) setFont(Font font)：设置绘图字体。<br>8) <code>fillRect(int x, int y, int width, int height)</code>：绘制一个填充的矩形，左上角坐标为(x, y)，宽度为width，高度为height。<br>9)  fillOval(int x, int y, int width, int height)：绘制一个填充的椭圆形，左上角坐标为(x, y)，宽度为width，高度为height。<br>10) fillPolygon(int[] xPoints, int[] yPoints, int nPoints)：绘制一个填充的多边形，多边形的各个点的坐标分别存储在xPoints和yPoints数组中，nPoints表示点的数量。<br>11) <code>clearRect(int x, int y, int width, int height)</code>：清除指定区域内的内容，左上角坐标为(x, y)，宽度为width，高度为height。<br>12) drawImage(Image img, int x, int y, ImageObserver observer)：绘制一张图片，左上角坐标为(x, y)，observer为ImageObserver对象。<br>13) drawRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)：绘制一个圆角矩形，左上角坐标为(x, y)，宽度为width，高度为height，arcWidth和arcHeight表示圆角的大小。<br>14) <code>fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)</code>：绘制一个填充的圆角矩形，左上角坐标为(x, y)，宽度为width，高度为height，arcWidth和arcHeight表示圆角的大小。<br>drawArc(int x, int y, int width, int height, int startAngle, int arcAngle)：绘制一段圆弧，左上角坐标为(x</p><h4 id="Graphics2D-API扩展的绘图方法"><a href="#Graphics2D-API扩展的绘图方法" class="headerlink" title="Graphics2D API扩展的绘图方法"></a>Graphics2D API扩展的绘图方法</h4><p>raphics2D类仍然保留了 Graphics类的绘图方法，同时增加了许多新方法。<br>这些类主要有;<code>Line2D线段类</code>、<code>RoundRectangle2D 圆角矩形类``、Ellipse2D椭圆类</code>、<code>Arc2D圆弧类</code>、<code>QuadCurve2D三次曲线类</code>和 <code>CubicCurve2D 三次曲线类</code>。<br>1) 声明并创建线段对象，起点是（2，3），终点是（200，300）∶<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Line2D</span> <span class="variable">line</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Line2D</span>.Double(<span class="number">2</span>,<span class="number">3</span>,<span class="number">200</span>,<span class="number">300</span>);</span><br></pre></td></tr></table></figure><br>2) 声明并创建矩形对象，矩形的左上角是（20，30），宽是300，高是40;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rtectangle2Dret =<span class="keyword">new</span> <span class="title class_">Rectangle2D</span>.Double(<span class="number">20</span>,<span class="number">30</span>,<span class="number">80</span>,<span class="number">40</span>)</span><br></pre></td></tr></table></figure><br>3) 声明并创建圆角矩形，左上角是（20，30），宽是130，高是 100，圆角的长轴是18，短轴是15∶<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RoundRectangle2D rectRound=<span class="keyword">new</span> <span class="title class_">RoundRectangle2D</span>.Double(<span class="number">20</span>,<span class="number">30</span>,<span class="number">130</span>,<span class="number">100</span>,<span class="number">18</span>,<span class="number">15</span>);</span><br></pre></td></tr></table></figure><br>4) 声明并创建椭圆，左上角（20，30），宽是100，高是50∶<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Elipse2D</span> <span class="variable">llipse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Elipse2D</span>.Double(<span class="number">20</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure><br>5) 声明并创建圆弧，外接矩形的左上角是（8，30），宽是85，高是60，起始角是5度，终止角是90度，Arc2D.OPEN 表示是一个开弧∶<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re2D arcl=<span class="keyword">new</span> <span class="title class_">Are2D</span>. Double(<span class="number">8</span>,<span class="number">30</span>,<span class="number">85</span>,<span class="number">60</span>,<span class="number">5</span>,<span class="number">90</span>,Are2D.OPEN);</span><br></pre></td></tr></table></figure><br>6) 类似地，可以创建弓弧（Arc2D.CHORD）和饼弧（Arc2D.PIE）∶<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rc2D arc2=<span class="keyword">new</span> <span class="title class_">Arc2D</span>.Double(<span class="number">20</span>,<span class="number">65</span>,<span class="number">90</span>,<span class="number">70</span>,<span class="number">0</span>,<span class="number">180</span>,Are2D. CHORD);<span class="comment">//弓图</span></span><br><span class="line">Arc2D are3=<span class="keyword">new</span> <span class="title class_">Are2D</span>.Double(<span class="number">40</span>,<span class="number">110</span>,<span class="number">50</span>,<span class="number">90</span>,<span class="number">0</span>,<span class="number">270</span>,Arc2D.PIE);<span class="comment">//饼弧 </span></span><br></pre></td></tr></table></figure><br>7) 在数学上，二次曲线用二阶多项式表示∶y（x）=ax2＋bx+c<br>绘制一条二次曲线时需要确定3个点，分别是始点、控制点和终点。方法 Double（）<br>中的6个参数分别是二次曲线的始点、控制点和终点。下面3条二次曲线有相同的始点和相<br>同的终点，控制点均不同∶<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">QuadCurve2D</span> <span class="variable">curve1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">QuadCurver2D</span>.Double(<span class="number">20</span>,<span class="number">10</span>,<span class="number">90</span>,<span class="number">65</span>,<span class="number">55</span>,<span class="number">115</span>);</span><br><span class="line">QuadCurve2D curve2=<span class="keyword">new</span> <span class="title class_">QuadCurver2D</span>.Double(<span class="number">20</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">63</span>,<span class="number">55</span>,<span class="number">115</span>);</span><br><span class="line">QuadCurve2D curve3=<span class="keyword">new</span> <span class="title class_">QuadCurver2D</span>.Double(<span class="number">20</span>,<span class="number">10</span>,<span class="number">54</span>,<span class="number">64</span>,<span class="number">55</span>, <span class="number">115</span>);</span><br></pre></td></tr></table></figure><br>8) y（x）= ax2 ＋bx2+cx+d<br>绘制一条三次曲线时需要确定4个点，分别是始点、两个控制点和终点。方法 Double（）<br>中的8个参数分别是三次曲线的始点、两个控制点和终点。下面3条三次曲线有相同的始<br>点，不同的终点，而控制点不完全相同∶<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CubicCurve2D</span> <span class="variable">curvel</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">CubicCurve2D</span>.Double(<span class="number">12</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">75</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="number">115</span>,<span class="number">93</span>);</span><br><span class="line">CubicCurve2D curve2=<span class="keyword">new</span> <span class="title class_">CubicCurve2D</span>.Double(<span class="number">12</span>,<span class="number">30</span>,<span class="number">15</span>,<span class="number">70</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">35</span>,<span class="number">94</span>);</span><br><span class="line">CubicCurve2D curve3=<span class="keyword">new</span> <span class="title class_">CubicCurve2D</span>.Double(<span class="number">12</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">75</span>,<span class="number">20</span>,<span class="number">95</span>,<span class="number">95</span>,<span class="number">95</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="Swing组件"><a href="#Swing组件" class="headerlink" title="Swing组件"></a>Swing组件</h2><h3 id="组合框与列表"><a href="#组合框与列表" class="headerlink" title="组合框与列表"></a>组合框与列表</h3><p>&ensp;&ensp;&ensp;&ensp;组合框包括可编辑组合框与不可编辑组合框<br>nonEditableComboBox = new JComboBox&lt;&gt;(new String[]{“Item A”, “Item B”, “Item C”}); // 设置为不可编辑<br><details class="folding-tag" green><summary> 组合框示例代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JComboBoxExample</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> JComboBox&lt;String&gt; editableComboBox; <span class="comment">// 可编辑组合框</span></span><br><span class="line">    <span class="keyword">private</span> JComboBox&lt;String&gt; nonEditableComboBox; <span class="comment">// 不可编辑组合框</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JComboBoxExample</span><span class="params">()</span> &#123;</span><br><span class="line">        setTitle(<span class="string">&quot;JComboBox Example&quot;</span>);</span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可编辑组合框</span></span><br><span class="line">        editableComboBox = <span class="keyword">new</span> <span class="title class_">JComboBox</span>&lt;&gt;();</span><br><span class="line">        editableComboBox.setEditable(<span class="literal">true</span>); <span class="comment">// 设置为可编辑</span></span><br><span class="line">        editableComboBox.addItem(<span class="string">&quot;Item 1&quot;</span>);</span><br><span class="line">        editableComboBox.addItem(<span class="string">&quot;Item 2&quot;</span>);</span><br><span class="line">        editableComboBox.addItem(<span class="string">&quot;Item 3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不可编辑组合框</span></span><br><span class="line">        nonEditableComboBox = <span class="keyword">new</span> <span class="title class_">JComboBox</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;Item A&quot;</span>, <span class="string">&quot;Item B&quot;</span>, <span class="string">&quot;Item C&quot;</span>&#125;); <span class="comment">// 设置为不可编辑</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将组合框添加到面板</span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        panel.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line">        panel.add(editableComboBox);</span><br><span class="line">        panel.add(nonEditableComboBox);</span><br><span class="line"></span><br><span class="line">        setContentPane(panel);</span><br><span class="line">        pack();</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JComboBoxExample</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><br><details class="folding-tag" green><summary> 组合框示例代码2 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JComboBoxTest</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> JComboBox&lt;String&gt; editableComboBox, nonEditableComboBox;</span><br><span class="line">    <span class="keyword">private</span> JButton addButton, removeButton, removeAllButton, getItemButton;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JComboBoxTest</span><span class="params">()</span> &#123;</span><br><span class="line">        setTitle(<span class="string">&quot;JComboBox Test&quot;</span>);</span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建可编辑的组合框</span></span><br><span class="line">        editableComboBox = <span class="keyword">new</span> <span class="title class_">JComboBox</span>&lt;&gt;();</span><br><span class="line">        editableComboBox.setEditable(<span class="literal">true</span>);</span><br><span class="line">        editableComboBox.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建不可编辑的组合框</span></span><br><span class="line">        nonEditableComboBox = <span class="keyword">new</span> <span class="title class_">JComboBox</span>&lt;&gt;();</span><br><span class="line">        nonEditableComboBox.addItem(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">        nonEditableComboBox.addItem(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">        nonEditableComboBox.addItem(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">        nonEditableComboBox.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建操作按钮</span></span><br><span class="line">        addButton = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;Add Item&quot;</span>);</span><br><span class="line">        addButton.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        removeButton = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;Remove Selected Item&quot;</span>);</span><br><span class="line">        removeButton.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        removeAllButton = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;Remove All Items&quot;</span>);</span><br><span class="line">        removeAllButton.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        getItemButton = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;Get Selected Item&quot;</span>);</span><br><span class="line">        getItemButton.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建面板，添加组件</span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">5</span>, <span class="number">1</span>));</span><br><span class="line">        panel.add(editableComboBox);</span><br><span class="line">        panel.add(nonEditableComboBox);</span><br><span class="line">        panel.add(addButton);</span><br><span class="line">        panel.add(removeButton);</span><br><span class="line">        panel.add(removeAllButton);</span><br><span class="line">        panel.add(getItemButton);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加面板到窗口</span></span><br><span class="line">        add(panel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置窗口大小并显示</span></span><br><span class="line">        setSize(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听器实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.getSource() == addButton) &#123;</span><br><span class="line">            <span class="comment">// 添加一个新的选项到可编辑的组合框中</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">newItem</span> <span class="operator">=</span> JOptionPane.showInputDialog(<span class="built_in">this</span>, <span class="string">&quot;Enter a new item:&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (newItem != <span class="literal">null</span> &amp;&amp; !newItem.isEmpty()) &#123;</span><br><span class="line">                editableComboBox.addItem(newItem);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getSource() == removeButton) &#123;</span><br><span class="line">            <span class="comment">// 移除当前选中的项</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">selectedItem</span> <span class="operator">=</span> editableComboBox.getSelectedItem();</span><br><span class="line">            <span class="keyword">if</span> (selectedItem != <span class="literal">null</span>) &#123;</span><br><span class="line">                editableComboBox.removeItem(selectedItem);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                JOptionPane.showMessageDialog(<span class="built_in">this</span>, <span class="string">&quot;Please select an item to remove.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getSource() == removeAllButton) &#123;</span><br><span class="line">            <span class="comment">// 移除所有项</span></span><br><span class="line">            editableComboBox.removeAllItems();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getSource() == getItemButton) &#123;</span><br><span class="line">            <span class="comment">// 获取当前选中的项</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">selectedItem</span> <span class="operator">=</span> editableComboBox.getSelectedItem();</span><br><span class="line">            <span class="keyword">if</span> (selectedItem != <span class="literal">null</span>) &#123;</span><br><span class="line">                JOptionPane.showMessageDialog(<span class="built_in">this</span>, <span class="string">&quot;Selected item: &quot;</span> + selectedItem);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                JOptionPane.showMessageDialog(<span class="built_in">this</span>, <span class="string">&quot;No item selected.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getSource() == editableComboBox || e.getSource() == nonEditableComboBox) &#123;</span><br><span class="line">            <span class="comment">// 当前选中项发生变化时触发</span></span><br><span class="line">            JComboBox&lt;String&gt; comboBox = (JComboBox&lt;String&gt;) e.getSource();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">selectedItem</span> <span class="operator">=</span> comboBox.getSelectedItem();</span><br><span class="line">            <span class="keyword">if</span> (selectedItem != <span class="literal">null</span>) &#123;</span><br><span class="line">                JOptionPane.showMessageDialog(<span class="built_in">this</span>, <span class="string">&quot;Selected item: &quot;</span> + selectedItem);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JComboBoxTest</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details></p><h3 id="文本组件"><a href="#文本组件" class="headerlink" title="文本组件"></a>文本组件</h3><details class="folding-tag" green><summary> 文本组件示例代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JTextFieldExample</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> JTextField textField;</span><br><span class="line">    <span class="keyword">private</span> JPasswordField passwordField;</span><br><span class="line">    <span class="keyword">private</span> JTextArea textArea;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JTextFieldExample</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置窗口标题和大小</span></span><br><span class="line">        setTitle(<span class="string">&quot;Text Field Example&quot;</span>);</span><br><span class="line">        setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建面板</span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">3</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文本框组件</span></span><br><span class="line">        textField = <span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="string">&quot;This is a text field&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        panel.add(textField);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建密码框组件</span></span><br><span class="line">        passwordField = <span class="keyword">new</span> <span class="title class_">JPasswordField</span>(<span class="string">&quot;password&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        panel.add(passwordField);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文本区组件</span></span><br><span class="line">        textArea = <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="string">&quot;This is a text area&quot;</span>, <span class="number">5</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">JScrollPane</span> <span class="variable">scrollPane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(textArea);</span><br><span class="line">        panel.add(scrollPane);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将面板添加到窗口中</span></span><br><span class="line">        add(panel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置窗口可见，并且当窗口关闭时退出程序</span></span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JTextFieldExample</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="菜单组件"><a href="#菜单组件" class="headerlink" title="菜单组件"></a>菜单组件</h3><details class="folding-tag" green><summary> 菜单组件示例代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> JMenuBar menuBar; <span class="comment">//声明菜单条</span></span><br><span class="line">    <span class="keyword">private</span> JMenu fileMenu, editMenu;<span class="comment">//声明菜单</span></span><br><span class="line">    <span class="keyword">private</span> JMenuItem newFile, openFile, saveFile, copy, paste, cut;<span class="comment">//声明子菜单项</span></span><br><span class="line">    <span class="keyword">private</span> JCheckBoxMenuItem checkItem;<span class="comment">//声明复合菜单</span></span><br><span class="line">    <span class="keyword">private</span> JPopupMenu popupMenu;<span class="comment">//声明右键弹出菜单</span></span><br><span class="line">    <span class="keyword">private</span> JRadioButtonMenuItem radio1, radio2, radio3;<span class="comment">//声明单元菜单</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Menu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 设置窗口标题和大小</span></span><br><span class="line">        setTitle(<span class="string">&quot;Menu Example&quot;</span>);</span><br><span class="line">        setSize(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建菜单栏和菜单项</span></span><br><span class="line">        menuBar = <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line">        fileMenu = <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;File&quot;</span>);</span><br><span class="line">        editMenu = <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;Edit&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建菜单项</span></span><br><span class="line">        newFile = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;New&quot;</span>);</span><br><span class="line">        openFile = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;Open&quot;</span>);</span><br><span class="line">        saveFile = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;Save&quot;</span>);</span><br><span class="line">        copy = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;Copy&quot;</span>);</span><br><span class="line">        paste = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;Paste&quot;</span>);</span><br><span class="line">        cut = <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;Cut&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加菜单项到菜单</span></span><br><span class="line">        fileMenu.add(newFile);</span><br><span class="line">        fileMenu.add(openFile);</span><br><span class="line">        fileMenu.add(saveFile);</span><br><span class="line">        editMenu.add(copy);</span><br><span class="line">        editMenu.add(paste);</span><br><span class="line">        editMenu.add(cut);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建复选框菜单项</span></span><br><span class="line">        checkItem = <span class="keyword">new</span> <span class="title class_">JCheckBoxMenuItem</span>(<span class="string">&quot;Check Item&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加菜单项到菜单</span></span><br><span class="line">        editMenu.add(checkItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建弹出菜单</span></span><br><span class="line">        popupMenu = <span class="keyword">new</span> <span class="title class_">JPopupMenu</span>(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">        radio1 = <span class="keyword">new</span> <span class="title class_">JRadioButtonMenuItem</span>(<span class="string">&quot;Radio 1&quot;</span>);</span><br><span class="line">        radio2 = <span class="keyword">new</span> <span class="title class_">JRadioButtonMenuItem</span>(<span class="string">&quot;Radio 2&quot;</span>);</span><br><span class="line">        radio3 = <span class="keyword">new</span> <span class="title class_">JRadioButtonMenuItem</span>(<span class="string">&quot;Radio 3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将单选按钮组合起来</span></span><br><span class="line">        <span class="type">ButtonGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ButtonGroup</span>();</span><br><span class="line">        group.add(radio1);</span><br><span class="line">        group.add(radio2);</span><br><span class="line">        group.add(radio3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将单选按钮添加到弹出菜单</span></span><br><span class="line">        popupMenu.add(radio1);</span><br><span class="line">        popupMenu.add(radio2);</span><br><span class="line">        popupMenu.add(radio3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将菜单添加到菜单栏</span></span><br><span class="line">        menuBar.add(fileMenu);</span><br><span class="line">        menuBar.add(editMenu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将菜单栏添加到窗口</span></span><br><span class="line">        setJMenuBar(menuBar);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为弹出菜单添加事件监听器</span></span><br><span class="line">        addMouseListener(<span class="keyword">new</span> <span class="title class_">MouseAdapter</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mousePressed</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">                showPopup(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseReleased</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">                showPopup(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showPopup</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.isPopupTrigger()) &#123;</span><br><span class="line">                    popupMenu.show(e.getComponent(), e.getX(), e.getY());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为菜单项添加事件监听器</span></span><br><span class="line">        newFile.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        openFile.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        saveFile.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        copy.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        paste.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        cut.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        checkItem.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        radio1.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        radio2.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        radio3.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取事件的命令字符串并弹出消息对话框显示</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> e.getActionCommand();</span><br><span class="line">        JOptionPane.showMessageDialog(<span class="literal">null</span>, command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Menu</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h3><h4 id="标准对话框"><a href="#标准对话框" class="headerlink" title="标准对话框"></a>标准对话框</h4><p>标准对话框是Java Swing提供的<code>JOptionPane</code>类，其中包括4种主要类型：</p><ol><li>消息对话框(MessageDialog)：用于向用户显示一条信息或者询问一个简单的问题。消息对话框通常包括一个或多个按钮，用户可以选择按下其中的一个按钮来做出反应。</li><li>确认对话框(ConfirmationDialog)：与消息对话框类似，但通常用于向用户确认某个重要的操作。确认对话框通常包括两个或三个按钮，例如“确定”、“取消”、“是”、“否”。</li><li>输入对话框(InputDialog)：用于接收用户输入的数据，例如用户的姓名、地址或密码等。输入对话框通常包括一个或多个文本框和一个或多个按钮。</li><li>选项对话框(OptionDialog)：显示选项，要求用户尽行选择</li></ol><h4 id="JDialog的基本常用方法介绍"><a href="#JDialog的基本常用方法介绍" class="headerlink" title="JDialog的基本常用方法介绍"></a>JDialog的基本常用方法介绍</h4><p>构造方法<br>JDialog()<br>创建一个没有父窗口的 JDialog，具有默认的模态行为和空字符串标题。<br><code>JDialog(Dialog owner)</code><br>创建一个具有指定所有者和默认模态行为的 JDialog，使用空字符串作为标题。<br><code>JDialog(Dialog owner, boolean modal)</code><br>创建一个具有指定所有者和指定模态性的 JDialog，使用空字符串作为标题。<br>JDialog(Dialog owner, String title)<br>创建一个具有指定所有者和默认模态行为的 JDialog，具有指定的标题。<br>JDialog(Dialog owner, String title, boolean modal)<br>创建具有指定所有者、指定模态性和指定标题的 JDialog。<br>JDialog(Frame owner)<br>创建一个具有指定所有者和默认模态行为的 JDialog，使用空字符串作为标题。<br>JDialog(Frame owner, boolean modal)<br>创建一个具有指定所有者和指定模态性的 JDialog，使用空字符串作为标题。<br>JDialog(Frame owner, String title)<br>创建一个具有指定所有者和默认模态行为的 JDialog，具有指定的标题。<br>JDialog(Frame owner, String title, boolean modal)<br>创建具有指定所有者、指定模态性和指定标题的 JDialog。<br>JDialog(Window owner)<br>创建一个具有指定所有者和默认模态行为的 JDialog，使用空字符串作为标题。<br>JDialog(Window owner, ModalityType modalityType)<br>创建具有指定所有者和指定模态类型的 JDialog，使用空字符串作为标题。<br>JDialog(Window owner, String title)<br>创建一个具有指定所有者和默认模态行为的 JDialog，具有指定的标题。<br>JDialog(Window owner, String title, ModalityType modalityType)<br>创建具有指定所有者、指定模态类型和指定标题的 JDialog。<br>常用方法<br>setVisible(boolean visible)<br>设置 JDialog 的可见性。<br>setModalityType(ModalityType modalityType)<br>设置 JDialog 的模态类型。<br>setTitle(String title)<br>设置 JDialog 的标题。<br>setDefaultCloseOperation(int operation)<br>设置关闭 JDialog 时的操作。<br>setLocationRelativeTo(Component c)<br>设置 JDialog 的位置相对于指定组件的位置。<br>add(Component comp)<br>将指定组件添加到 JDialog 中。<br>pack()<br>调整 JDialog 的大小，以适应其内容。<br>dispose()<br>释放 JDialog 使用的所有资源，并关闭 JDialog。<br>getContentPane()<br>返回 JDialog 的内容面板。<br>getOwner()<br>返回 JDialog 的所有者。<br>getRootPane()<br>返回 JDialog 的根面板。<br>setResizable(boolean resizable)<br>设置 JDialog 是否可以调整大小。<br>setSize(int width, int height)<br>设置 JDialog 的大小。<br>setLocation(int x, int y)<br>设置 JDialog 的位置。<br>setModal(boolean modal)<br>设置 JDialog 是否为模态对话框。<br>setDefaultCloseOperation(int operation)<br>设置 JDialog 关闭时的操作。<br><details class="folding-tag" green><summary> 对话框示例代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDdialog</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> JButton standardButton, fileButton; <span class="comment">// 声明标准对话框和文件对话框按钮</span></span><br><span class="line">    <span class="keyword">private</span> JLabel standardLabel, fileLabel; <span class="comment">// 声明标准对话框和文件对话框标签</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JDdialog</span><span class="params">()</span> &#123;</span><br><span class="line">        setTitle(<span class="string">&quot;Dialog Example&quot;</span>); <span class="comment">// 设置窗口标题</span></span><br><span class="line">        setSize(<span class="number">300</span>, <span class="number">200</span>); <span class="comment">// 设置窗口大小</span></span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <span class="comment">// 设置窗口关闭操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建面板</span></span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        panel.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>, <span class="number">2</span>)); <span class="comment">// 设置面板布局为网格布局</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建标准对话框按钮和标签</span></span><br><span class="line">        standardButton = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;Standard Dialog&quot;</span>);</span><br><span class="line">        standardButton.addActionListener(<span class="built_in">this</span>); <span class="comment">// 给按钮添加事件监听器</span></span><br><span class="line">        standardLabel = <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;No dialog has been opened yet.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文件对话框按钮和标签</span></span><br><span class="line">        fileButton = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;File Dialog&quot;</span>);</span><br><span class="line">        fileButton.addActionListener(<span class="built_in">this</span>); <span class="comment">// 给按钮添加事件监听器</span></span><br><span class="line">        fileLabel = <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;No file has been selected yet.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将组件添加到面板</span></span><br><span class="line">        panel.add(standardButton);</span><br><span class="line">        panel.add(standardLabel);</span><br><span class="line">        panel.add(fileButton);</span><br><span class="line">        panel.add(fileLabel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将面板添加到窗口</span></span><br><span class="line">        add(panel);</span><br><span class="line"></span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.getSource() == standardButton) &#123;</span><br><span class="line">            <span class="comment">// 显示标准对话框</span></span><br><span class="line">            String[] options = &#123;<span class="string">&quot;Option 1&quot;</span>, <span class="string">&quot;Option 2&quot;</span>, <span class="string">&quot;Option 3&quot;</span>&#125;;</span><br><span class="line">            <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> JOptionPane.showOptionDialog(<span class="built_in">this</span>, <span class="string">&quot;Choose an option.&quot;</span>, <span class="string">&quot;Standard Dialog&quot;</span>, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, <span class="literal">null</span>, options, options[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (choice != JOptionPane.CLOSED_OPTION) &#123;</span><br><span class="line">                standardLabel.setText(<span class="string">&quot;You selected &quot;</span> + options[choice] + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getSource() == fileButton) &#123;</span><br><span class="line">            <span class="comment">// 显示文件对话框</span></span><br><span class="line">            <span class="type">JFileChooser</span> <span class="variable">fileChooser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFileChooser</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> fileChooser.showOpenDialog(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (result == JFileChooser.APPROVE_OPTION) &#123;</span><br><span class="line">                <span class="type">File</span> <span class="variable">selectedFile</span> <span class="operator">=</span> fileChooser.getSelectedFile();</span><br><span class="line">                fileLabel.setText(<span class="string">&quot;You selected &quot;</span> + selectedFile.getName() + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JDdialog</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details></p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="线程和多线程"><a href="#线程和多线程" class="headerlink" title="线程和多线程"></a>线程和多线程</h3><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><h3 id="线程的基本控制"><a href="#线程的基本控制" class="headerlink" title="线程的基本控制"></a>线程的基本控制</h3><h4 id="线程启动"><a href="#线程启动" class="headerlink" title="线程启动"></a>线程启动</h4><p> API中提供了以下有关线程的操作方法;</p><ul><li><code>start（</code>）;启动线程对象，让线程从新建状态转为就绪状态。</li><li><code>run（）</code>;用来定义线程对象被调度之后所执行的操作，用户必须重写run（）方法。</li><li><code>yield（）</code>∶强制终止线程的执行。</li><li><code>isAlive（）</code>∶测试当前线程是否在活动。</li><li><code>sleep（int millsecond）</code>∶使线程休眠一段时间，时间长短由 millsecond决定，单位为 ms。</li><li><code>void wait（）</code>∶使线程处于等待状态。</li><li>wait（和 notify（）/notifyAll（））<br>wait（）方法导致当前的线程签待，直到其他线程调用此对象的 notify（）方法或 notifyAll（） 方法—才能唤醒线程。</li></ul><h4 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h4><p>线程调度方式：<code>抢占式</code><br><strong>优先级策略：</strong></p><ul><li>优先级<code>高</code>先执行，优先级<code>低</code>后执行</li><li>每个线程创建时都会被自动分配一个优先级，<code>默认时，继承父类</code>优先级</li><li>任务<code>紧急</code>的线程优先级较高</li><li>通优先级的线程按“<code>先进先出</code>”的调度原则</li></ul><p>Thread类有3个与线程优先级有关的静态量，分别如下。<br>· MAX_PRIORITY∶最高优先级，值为10。<br>· MIN_PRIORITY;最低优先级，值为1。<br>· NORM_PRIORITY∶默认优先级，值为5。</p><h3 id="线程的互斥"><a href="#线程的互斥" class="headerlink" title="线程的互斥"></a>线程的互斥</h3><h3 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用格式</title>
      <link href="/posts/73a3105b.html"/>
      <url>/posts/73a3105b.html</url>
      
        <content type="html"><![CDATA[<h2 id="post文章头部设定格式"><a href="#post文章头部设定格式" class="headerlink" title="post文章头部设定格式"></a>post文章头部设定格式</h2><p>1、 一般格式<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">swiper_index:</span> <span class="number">2</span>  <span class="comment">#文章置顶优先级</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="attr">description:</span> </span><br><span class="line"><span class="attr">hidden:</span> <span class="literal">true</span>    <span class="comment">#隐藏显示，不再主页分类中展示</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">&#x27;https://npm.elemecdn.com/akilar-candyassets/image/20201115152231.png&#x27;</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">&#x27;url(https://fshby.top/bg/bg06.jpg)&#x27;</span></span><br></pre></td></tr></table></figure><br>2、其他格式<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">updated:</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">top_img:</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line"><span class="attr">katex:</span></span><br><span class="line"><span class="attr">aside:</span></span><br><span class="line"><span class="attr">aplayer:</span></span><br><span class="line"><span class="attr">highlight_shrink:</span></span><br><span class="line"><span class="attr">post_copyright:</span> </span><br></pre></td></tr></table></figure><br>3、设置为隐私格式<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">password:</span> <span class="number">156</span></span><br><span class="line"><span class="attr">abstract:</span> <span class="string">&#x27;有东西被加密了, 请输入密码查看.&#x27;</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">&#x27;您好, 这里需要密码.&#x27;</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">xray</span></span><br><span class="line"><span class="attr">wrong_pass_message:</span> <span class="string">&#x27;抱歉, 这个密码看着不太对, 请再试试.&#x27;</span></span><br><span class="line"><span class="attr">wrong_hash_message:</span> <span class="string">&#x27;抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.&#x27;</span></span><br></pre></td></tr></table></figure><br>4、常用图库链接<br><details class="folding-tag" green><summary> 查看链接 </summary>              <div class='content'>              <ul><li><a href="https://fshby.top/bg/草原日落.jpg">https://fshby.top/bg/草原日落.jpg</a></li><li><a href="https://fshby.top/bg/城市日落.jpg">https://fshby.top/bg/城市日落.jpg</a></li><li><a href="https://fshby.top/bg/机器女警.jpg">https://fshby.top/bg/机器女警.jpg</a></li><li><a href="https://fshby.top/bg/天空之境.jpg">https://fshby.top/bg/天空之境.jpg</a></li><li><a href="https://fshby.top/bg/小镇天空.jpg">https://fshby.top/bg/小镇天空.jpg</a></li><li><a href="https://fshby.top/bg/晚雪.jpg">https://fshby.top/bg/晚雪.jpg</a></li><li><a href="https://fshby.top/bg/小镇天空.jpg">https://fshby.top/bg/小镇天空.jpg</a></li><li><a href="https://fshby.top/bg/木桥秋.jpg">https://fshby.top/bg/木桥秋.jpg</a></li><li><a href="https://fshby.top/bg/房屋隧道.jpg">https://fshby.top/bg/房屋隧道.jpg</a></li><li><a href="https://fshby.top/bg/bg01.jpg">https://fshby.top/bg/bg01.jpg</a></li><li><a href="https://fshby.top/bg/bg02.jpg">https://fshby.top/bg/bg02.jpg</a></li><li><a href="https://fshby.top/bg/bg03.jpg">https://fshby.top/bg/bg03.jpg</a></li><li><a href="https://fshby.top/bg/bg04.jpg">https://fshby.top/bg/bg04.jpg</a></li><li><a href="https://fshby.top/bg/bg05.jpg">https://fshby.top/bg/bg05.jpg</a></li><li><a href="https://fshby.top/bg/bg06.jpg">https://fshby.top/bg/bg06.jpg</a></li><li><a href="https://fshby.top/bg/bg07.jpg">https://fshby.top/bg/bg07.jpg</a></li><li><a href="https://fshby.top/bg/bg08.jpg">https://fshby.top/bg/bg08.jpg</a></li></ul>              </div>            </details></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> post </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见Error处理与处理办法</title>
      <link href="/posts/64207f9c.html"/>
      <url>/posts/64207f9c.html</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-deply问题"><a href="#hexo-deply问题" class="headerlink" title="hexo deply问题"></a>hexo deply问题</h2><p>针对此方面问题首先确定是否是因为github或者Vercel被墙了,使用电脑cmd命令ping一下网站，如果没有问题继续下面步骤：</p><p>终端提示：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (E:\hexo-zkf2.0\Hexo-zkf-2.0\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (node:events:527:28)</span><br><span class="line">      at ChildProcess.cp.emit (E:\hexo-zkf2.0\Hexo-zkf-2.0\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/trouble</span><br><span class="line">shooting.html</span><br></pre></td></tr></table></figure><br>解决办法:<br>出现这种错误，可能是.deploy_git文件出现变动或者误删改造成的，可以采用如下解决办法：<br><a href="https://blog.csdn.net/qq_28919533/article/details/124338891">参考文献</a></p><ol><li>进入hexo根目</li><li>直接暴力删除 .deploy_git和public文件</li><li>暴力三连 hexo c  hexo g  hexo d</li></ol><div class="tip warning"><p>提示:部分地区可能由于使用5G网络原因造成错误，建议更滑网络重新三连</p></div>]]></content>
      
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows技巧</title>
      <link href="/posts/761adea4.html"/>
      <url>/posts/761adea4.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用注册表添Windows桌面右键菜单快捷键"><a href="#使用注册表添Windows桌面右键菜单快捷键" class="headerlink" title="使用注册表添Windows桌面右键菜单快捷键"></a>使用注册表添Windows桌面右键菜单快捷键</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <p>说明：当使用方法1时,可以右键点击桌面菜单打开；使用方法2，可以右键点击文件夹打开菜单<br>方法1：<br><a href="https://jingyan.baidu.com/article/7e440953dc0f6e2fc0e2ef00.html">参考链接</a>  </p><ol><li>使用快捷键<kbd>windows</kbd>+<kbd>R</kbd>运行<code>regedit</code>打开注册表</li><li>找到<code>HKEY_CLASSES_ROOT/Directory/Background/shell</code> 右键新建<code>项</code> 更改默认右键菜单名</li><li>打开新建的项，新建command文件夹中更改默认源程序路径<br>  <span class='p red'>例：E:\小程序\Microsoft VS Code\Code.exe</span>  </li></ol><p>方法2：</p><ol><li>使用快捷键<kbd>windows</kbd>+<kbd>R</kbd>运行<code>regedit</code>打开注册表</li><li>找到<code>HKEY_CLASSES_ROOT/Directory/shell</code> 右键新建<code>项</code> 更改默认右键菜单名</li><li>打开新建的项，新建command文件夹中更改默认源程序完整路径<br>  <span class='p red'>例：E:\小程序\Microsoft VS Code\Code.exe</span>  </li></ol><p>为右键菜单选项添加ioc图标:</p><ol><li>使用快捷键<kbd>windows</kbd>+<kbd>R</kbd>运行<code>regedit</code>打开注册表</li><li>找到<code>HKEY_CLASSES_ROOT/Directory/shell</code> 右键新建<code>项</code> 更改默认右键菜单名</li><li>打开新建的项，新建<span class='nota' data-nota='REG_SZ'>字符串值</span>文件,并重命名为<code>Icon</code> </li><li>添加ico文件路径即可   </li></ol>              </div>            </details><h2 id="关闭笔记本电脑原装键盘"><a href="#关闭笔记本电脑原装键盘" class="headerlink" title="关闭笔记本电脑原装键盘"></a>关闭笔记本电脑原装键盘</h2><p>在使用外接假盘是，将笔记本原装键盘关闭会更加边界，以免误操作。<br><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <p><a href="https://www.xuezuzhuang.com/yjzs/20270.html">参考链接</a> </p><ol><li>使用快捷键<kbd>windows</kbd>+<kbd>R</kbd>    <code>以管理员身份运行</code></li><li>关闭原装键盘：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc config i8042prt start= disabled</span><br></pre></td></tr></table></figure></li><li>打开原装键盘：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc config i8042prt start= auto</span><br></pre></td></tr></table></figure></li><li>重启电脑生效</li><li>华硕电脑键盘灯可以通过<kbd>fn</kbd>加上下调节键调节亮度</li></ol>              </div>            </details></p><h2 id="启动系统休眠功能"><a href="#启动系统休眠功能" class="headerlink" title="启动系统休眠功能"></a>启动系统休眠功能</h2><ul><li>启动系统休眠<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powercfg -h on   -- 启动休眠</span><br><span class="line">powercfg -h on   -- 关闭休眠</span><br></pre></td></tr></table></figure></li><li>启动后可以运行休眠命令检验休眠功能是否启用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rundll32.exe powrprof.dll,SetSuspendState 0,1,0</span><br><span class="line">或者</span><br><span class="line">shutdown -h</span><br></pre></td></tr></table></figure></li><li>powercfg 命令是 Windows 操作系统中一个非常有用的工具，它可以用来管理计算机的电源选项和节能设置。以下是一些 powercfg 命令的示例：<br>powercfg -a：查看系统支持的电源睡眠状态。<br>powercfg -devicequery wake_armed：查看可以唤醒系统的设备列表。<br>powercfg -lastwake：查看最后一次唤醒系统的事件信息。<br><code>powercfg -energy</code>：运行系统的<code>能量诊断</code>，以检查有哪些设置会影响电池寿命。</li></ul><h2 id="查看端口进程并终止"><a href="#查看端口进程并终止" class="headerlink" title="查看端口进程并终止"></a>查看端口进程并终止</h2><ol><li>查看全部端口<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure></li><li>查看指定端口<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -aon|findstr &quot;9050&quot;</span><br></pre></td></tr></table></figure></li><li>查看端口对应进程号PID<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist|findstr &quot;2016&quot;</span><br></pre></td></tr></table></figure></li><li>终止进程<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /f /t /im 进程名</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Windows技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记(二)</title>
      <link href="/posts/5a8a6c8d.html"/>
      <url>/posts/5a8a6c8d.html</url>
      
        <content type="html"><![CDATA[<a href="/posts/ad4f1e09.html" title="🍉C++学习笔记(一)">🍉C++学习笔记(一)</a><a href="/posts/5a8a6c8d.html" title="🍊C++学习笔记(二)">🍊C++学习笔记(二)</a><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="运算符重载的概念"><a href="#运算符重载的概念" class="headerlink" title="运算符重载的概念"></a>运算符重载的概念</h3><blockquote><p>概念</p><blockquote><p>运算符重载：给已有的运算符赋予多重含义，使同一个运算符作用于不同类型的数据时产生不同行为。</p></blockquote><p>目的</p><blockquote><p>使得C++中的运算符也能够来操作<code>对象</code></p><blockquote><p>绝大多数运算符可以重载,除下表的7种：</p></blockquote></blockquote></blockquote><div class="table-container"><table><thead><tr><th>名称</th><th>符号</th></tr></thead><tbody><tr><td>成员访问运算符</td><td>.</td></tr><tr><td>成员指针访问运算符</td><td>.<em> , -&gt;</em></td></tr><tr><td>域运算符</td><td>::</td></tr><tr><td>长度运算符</td><td>sizeof</td></tr><tr><td>条件运算符</td><td>？:</td></tr><tr><td>预处理运算符</td><td>#</td></tr></tbody></table></div><blockquote><p>实质</p><blockquote><p>编写以运算符为名称的函数，使用运算符的表达式就被解释为对重载函数的调用</p></blockquote><p>规则</p><blockquote><p>1) 重载运算符应符合原有用法习惯。<br>2) 运算符重载，不能改变运算符原有的语义，包括运算符的优先级和结和性<br>3) 不能改变运算操作数的个数及语法结构，及超出c++语言允许重载范围。<br>4) 重载运算符“()” “ [] ”  “ -&gt; ”或者赋值运算符“ = ”时，只能将他们重载为成员函数，<code>不能重载为全局函数</code>。<br>5) 运算符重载不能改变运算符用于基本数据类型对象的含义。可以用于自定义类型对象与基本数据类型对象之间的混合运算。</p></blockquote><p>运算符函数的格式</p><blockquote><p>返回值类型  <span class='nota' data-nota='函数名'>operator</span>运算符（形参表）{函数体···}</p></blockquote></blockquote><p>例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myComplex <span class="keyword">operator</span>-(<span class="type">const</span> myComplex &amp;c );<span class="comment">//声明成员函数</span></span><br><span class="line"><span class="keyword">friend</span> myComplex <span class="keyword">operator</span>+(<span class="type">const</span> myComplex &amp;c1,<span class="type">const</span> myComplex &amp;c2 );<span class="comment">//声明友元函数 </span></span><br></pre></td></tr></table></figure></p><blockquote><p>注意</p><blockquote><p>运算符可以被重载为<code>全局函数</code>（通常为类的<code>友元函数</code>，因为<emp>全局函数不能访问类的私有成员</emp>），对于二元运算符需要传递两个参数。<br>运算符可以被重载为<code>成员函数</code>，对于二元运算符，只需要传递一个参数。</p></blockquote></blockquote><details class="folding-tag" green><summary> 重载运算符示例 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myComplex</span>&#123;<span class="comment">//复数类 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">double</span> real,imag;<span class="comment">//复数的实部，虚部</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">myComplex</span>();<span class="comment">//声明构造函数 </span></span><br><span class="line"><span class="built_in">myComplex</span>(<span class="type">double</span> r,<span class="type">double</span> i);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">outCom</span><span class="params">()</span> </span>;<span class="comment">//成员函数 </span></span><br><span class="line">myComplex <span class="keyword">operator</span>-(<span class="type">const</span> myComplex &amp;c );<span class="comment">//声明成员函数</span></span><br><span class="line"><span class="keyword">friend</span> myComplex <span class="keyword">operator</span>+(<span class="type">const</span> myComplex &amp;c1,<span class="type">const</span> myComplex &amp;c2 );<span class="comment">//声明友元函数 </span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line">myComplex::<span class="built_in">myComplex</span>()&#123;<span class="comment">//定义构造函数 </span></span><br><span class="line">real = <span class="number">0</span>; imag = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line">myComplex::<span class="built_in">myComplex</span>(<span class="type">double</span> r,<span class="type">double</span> i)&#123;<span class="comment">//定以构造函数 </span></span><br><span class="line">real = r,imag = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myComplex::outCom</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;real&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;imag&lt;&lt;<span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">myComplex myComplex::<span class="keyword">operator</span>-(<span class="type">const</span> myComplex &amp;c )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(<span class="keyword">this</span>-&gt;real-c.real,<span class="keyword">this</span>-&gt;imag-c.imag);</span><br><span class="line">&#125;<span class="comment">//重载成员函数，一个参数返回一个临时对象，this可以省略 </span></span><br><span class="line">myComplex <span class="keyword">operator</span>+(<span class="type">const</span> myComplex &amp;c1,<span class="type">const</span> myComplex &amp;c2  )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(c1.real+c2.real,c1.imag+c2.imag);</span><br><span class="line">&#125;<span class="comment">//重载友元函数，两个参数返回一个临时对象 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">myComplex <span class="title">c1</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span>,<span class="title">c2</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span>,res</span>;</span><br><span class="line"></span><br><span class="line">c1.<span class="built_in">outCom</span>() ;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;operator+&quot;</span>; </span><br><span class="line">c2.<span class="built_in">outCom</span>() ;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; = &quot;</span>;</span><br><span class="line">res = c1+c2;</span><br><span class="line">res.<span class="built_in">outCom</span>(); </span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1.<span class="built_in">outCom</span>() ;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;operator-&quot;</span>; </span><br><span class="line">c2.<span class="built_in">outCom</span>() ;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; = &quot;</span>;</span><br><span class="line">res = c1-c2;</span><br><span class="line">res.<span class="built_in">outCom</span>(); </span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>(1,2)operator+(3,4) = (4,6)<br>(1,2)operator-(3,4) = (-2,-2)</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h3 id="重载赋值运算符"><a href="#重载赋值运算符" class="headerlink" title="重载赋值运算符"></a>重载赋值运算符</h3><blockquote><p>说明</p><blockquote><p>用于类运算的运算符通常都要重载，但有两个运算符系统提供了<code>默认重载版本</code><br>1)赋值运算符 = ：系统默认重载为<code>对象成员变量复制</code><br>2)地址运算符 &amp; ：系统默认重载为返回任何类对象地址</p></blockquote></blockquote><p>&ensp;&ensp;例：c1与c2都是复数类的对象<br>&ensp;&ensp;&ensp;&ensp;&ensp;c1 = c2 //合法，<code>系统默认的重载赋值运算符</code><br>&ensp;&ensp;&ensp;&ensp;&ensp;c1 = 7  //错误，<code>数据类型不同需要编写相应重载赋值运算符的函数</code></p><blockquote><p>注意</p><blockquote><p>1）赋值运算符必须重载为<code>成员函数</code>，不能重载为<code>友元函数</code>。<br>2）为了保持与通常意义下的复制运算符的功能一致，应该让重载赋值运算符仍然能连续使用，及<code>res =c1  =c2;</code>应成立，所以operator = 函数通常要返回<code>引用</code>，返回类型是myComplex &amp;如下面示例:<br><details class="folding-tag" green><summary> 复数类重载赋值运算符 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myComplex</span>&#123;<span class="comment">//复数类 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">double</span> real,imag;<span class="comment">//复数的实部，虚部</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">myComplex</span>();<span class="comment">//声明构造函数 </span></span><br><span class="line"><span class="built_in">myComplex</span>(<span class="type">double</span> r,<span class="type">double</span> i);</span><br><span class="line">~<span class="built_in">myComplex</span>() &#123;&#125;;<span class="comment">//析构函数 </span></span><br><span class="line"><span class="function">myComplex <span class="title">addCom</span><span class="params">(myComplex c1)</span></span>;<span class="comment">//成员函数，调用对象与参与对象c1 相加 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">outCom</span><span class="params">()</span></span>; <span class="comment">//成员函数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">outCom</span><span class="params">(string s)</span></span>;<span class="comment">//成员函数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">changeReak</span><span class="params">(<span class="type">double</span> r)</span></span>;<span class="comment">//声明成员函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span>  myComplex <span class="keyword">operator</span>+(<span class="type">const</span> myComplex &amp;c1,<span class="type">const</span> myComplex &amp;c2);<span class="comment">// 声明友元函数 ,实现c1+c2</span></span><br><span class="line"><span class="keyword">friend</span>  myComplex <span class="keyword">operator</span>+(<span class="type">const</span> myComplex &amp;c1,<span class="type">double</span> r  );<span class="comment">//c1+r</span></span><br><span class="line"><span class="keyword">friend</span>  myComplex <span class="keyword">operator</span>+(<span class="type">double</span> r ,<span class="type">const</span> myComplex &amp;c1);<span class="comment">//r+c1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span>  myComplex <span class="keyword">operator</span>-(<span class="type">const</span> myComplex &amp;c1,<span class="type">const</span> myComplex &amp;c2);<span class="comment">// 声明友元函数 ,实现c1+c2</span></span><br><span class="line"><span class="keyword">friend</span>  myComplex <span class="keyword">operator</span>-(<span class="type">const</span> myComplex &amp;c1,<span class="type">double</span> r  );<span class="comment">//c1+r</span></span><br><span class="line"><span class="keyword">friend</span>  myComplex <span class="keyword">operator</span>-(<span class="type">double</span> r ,<span class="type">const</span> myComplex &amp;c1);<span class="comment">//r+c1</span></span><br><span class="line"></span><br><span class="line">myComplex &amp;<span class="keyword">operator</span> = (<span class="type">const</span> myComplex &amp;c);<span class="comment">//声明成员函数 </span></span><br><span class="line">myComplex &amp;<span class="keyword">operator</span> = (<span class="type">double</span>);<span class="comment">//声明成员函数 </span></span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line">myComplex::<span class="built_in">myComplex</span>()&#123;<span class="comment">//定义构造函数 </span></span><br><span class="line">real = <span class="number">0</span>; imag = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line">myComplex::<span class="built_in">myComplex</span>(<span class="type">double</span> r,<span class="type">double</span> i)&#123;<span class="comment">//定以构造函数 </span></span><br><span class="line">real = r,imag = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">myComplex <span class="title">myComplex::addCom</span><span class="params">(myComplex c1)</span></span>&#123;<span class="comment">//定以成员函数，调用对象，一个参数 </span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(<span class="keyword">this</span>-&gt;real+c1.real,<span class="keyword">this</span>-&gt;imag+c1.imag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myComplex::outCom</span><span class="params">()</span></span>&#123; <span class="comment">//定义成员函数，输出复数 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;real&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;imag&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myComplex::outCom</span><span class="params">(string s)</span></span>&#123; <span class="comment">//定义成员函数</span></span><br><span class="line">cout&lt;&lt;s&lt;&lt;<span class="string">&quot;=(&quot;</span>&lt;&lt;real&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;imag&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myComplex::changeReak</span><span class="params">(<span class="type">double</span> r)</span></span>&#123; <span class="comment">//定义成员函数</span></span><br><span class="line"><span class="keyword">this</span>-&gt;real = r;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">myComplex <span class="keyword">operator</span>+(<span class="type">const</span> myComplex &amp;c1,<span class="type">const</span> myComplex &amp;c2  )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(c1.real+c2.real,c1.imag+c2.imag); <span class="comment">//c1+c2</span></span><br><span class="line">&#125; </span><br><span class="line">myComplex <span class="keyword">operator</span>+(<span class="type">const</span> myComplex &amp;c1,<span class="type">double</span> r )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(c1.real+r,c1.imag); <span class="comment">//c1+r</span></span><br><span class="line">&#125; </span><br><span class="line">myComplex <span class="keyword">operator</span>+(<span class="type">double</span> r ,<span class="type">const</span> myComplex &amp;c1  )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(r+c1.real,c1.imag); <span class="comment">//r+c2</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myComplex <span class="keyword">operator</span>-(<span class="type">const</span> myComplex &amp;c1,<span class="type">const</span> myComplex &amp;c2  )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(c1.real-c2.real,c1.imag-c2.imag); <span class="comment">//c1-c2</span></span><br><span class="line">&#125; </span><br><span class="line">myComplex <span class="keyword">operator</span>-(<span class="type">const</span> myComplex &amp;c1,<span class="type">double</span> r )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(c1.real-r,c1.imag); <span class="comment">//c1-c2</span></span><br><span class="line">&#125; </span><br><span class="line">myComplex <span class="keyword">operator</span>-(<span class="type">double</span> r ,<span class="type">const</span> myComplex &amp;c1  )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(r-c1.real,c1.imag); <span class="comment">//c1-c2</span></span><br><span class="line">&#125;<span class="comment">//重载友元函数，两个参数返回一个临时对象 </span></span><br><span class="line"></span><br><span class="line">myComplex &amp;myComplex::<span class="keyword">operator</span> = (<span class="type">const</span> myComplex &amp; c1)&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;real=c1.real,<span class="keyword">this</span>-&gt;imag=c1.imag;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;<span class="comment">//赋值运算符重载成员函数 </span></span><br><span class="line"></span><br><span class="line">myComplex &amp;myComplex::<span class="keyword">operator</span> = (<span class="type">double</span> r)&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;real=r,<span class="keyword">this</span>-&gt;imag= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;<span class="comment">//赋值运算符重载成员函数 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">myComplex <span class="title">c1</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span>,<span class="title">c2</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span>,res</span>;</span><br><span class="line"></span><br><span class="line">c1.<span class="built_in">outCom</span>(<span class="string">&quot;\t\t\tc1&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">c2.<span class="built_in">outCom</span>(<span class="string">&quot;\t\t\tc2&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">res = c1+c2; <span class="comment">//调用友元函数，计算  c1+c2</span></span><br><span class="line">res.<span class="built_in">outCom</span>(<span class="string">&quot;执行 res = c1+c2-&gt;\t\t res&quot;</span>); </span><br><span class="line"></span><br><span class="line">res = c1.<span class="built_in">addCom</span>(c2); <span class="comment">//调用友元函数，计算  c1+c2</span></span><br><span class="line">res.<span class="built_in">outCom</span>(<span class="string">&quot;执行 res = c1.addCom(c2)-&gt;\t res&quot;</span>); </span><br><span class="line"></span><br><span class="line">res = c1+<span class="number">5</span>;</span><br><span class="line">res.<span class="built_in">outCom</span>(<span class="string">&quot;执行 res = c1+5;-&gt;\t\t res&quot;</span>);</span><br><span class="line"></span><br><span class="line">res = <span class="number">5</span>+c1;  <span class="comment">//调用成员函数 operator = (const myComplex &amp; c1)</span></span><br><span class="line">res.<span class="built_in">outCom</span>(<span class="string">&quot;执行 res = 5+c1-&gt;\t\t\t res&quot;</span>);</span><br><span class="line"></span><br><span class="line">res = <span class="number">7</span>;  <span class="comment">//调用成员函数 operator = (double r)，没有该函数，出错 </span></span><br><span class="line">res.<span class="built_in">outCom</span>(<span class="string">&quot;执行 res = 7-&gt;\t\t\t res&quot;</span>);</span><br><span class="line"></span><br><span class="line">res = <span class="number">7</span>+<span class="number">8</span>;<span class="comment">//调用成员函数 operator = (double)</span></span><br><span class="line">res.<span class="built_in">outCom</span>(<span class="string">&quot;执行 res = 7+8-&gt;\t\t res&quot;</span>);</span><br><span class="line"></span><br><span class="line">res =c1  =c2;<span class="comment">//两次调用成员函数 operator = (const myComplex &amp; c1)</span></span><br><span class="line">c1.<span class="built_in">outCom</span>(<span class="string">&quot;\t\t\t\tc1&quot;</span>) ;</span><br><span class="line">c2.<span class="built_in">outCom</span>(<span class="string">&quot;\t\t\t\tc2&quot;</span>) ;</span><br><span class="line">res.<span class="built_in">outCom</span>(<span class="string">&quot;执行 res =c1  =c2-&gt;\t\tres&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><pre><code>                             c1=(1,2)                            c2=(3,4)</code></pre><p>执行 res = c1+c2-&gt;               res=(4,6)<br>执行 res = c1.addCom(c2)-&gt;       res=(4,6)<br>执行 res = c1+5;-&gt;               res=(6,2)<br>执行 res = 5+c1-&gt;                res=(6,2)<br>执行 res = 7-&gt;                   res=(7,0)<br>执行 res = 7+8-&gt;                 res=(15,0)<br>                                c1=(3,4)<br>                                c2=(3,4)<br>执行 res =c1  =c2-&gt;             res=(3,4)</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details>  </p></blockquote><p>浅拷贝</p><blockquote><p>同类对象之间可以通过复制运算符“  = ”互相赋值。如果没有重载。“  = ”的作用就是将赋值号右侧的对象一一赋值给左侧的对象。这相当于与值的拷贝，称为值拷贝。<br>如果赋值的对象中涉及<code>指针</code>或<code>引用</code>则他们之间相互关联，对象中的指针指向同一个内存地址。<br><details class="folding-tag" green><summary> 浅拷贝含义 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pointer</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//公有，main函数可以处理成员</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> *p;<span class="comment">//指向整形数的指针 </span></span><br><span class="line"><span class="built_in">pointer</span>()&#123;</span><br><span class="line">a = <span class="number">100</span>; <span class="comment">// 构造函数 </span></span><br><span class="line">p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>); <span class="comment">//创建指针地址空间 并赋初值10 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">pointer</span>(<span class="type">const</span> pointer &amp;tempp) &#123;  <span class="comment">//复制构造哈数 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> != &amp;tempp)&#123;<span class="comment">// 避免a =a这样的赋值 </span></span><br><span class="line">a = tempp.a;  </span><br><span class="line">p = tempp.p;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">pointer p1;<span class="comment">//使用构造函数 </span></span><br><span class="line"><span class="function">pointer <span class="title">p2</span><span class="params">(p1)</span></span>;<span class="comment">//使用复制构造函数 </span></span><br><span class="line">pointer p3 = p1; <span class="comment">//使用复制构造函数 </span></span><br><span class="line"><span class="comment">//*p1.p = 20;</span></span><br><span class="line">p1.a = <span class="number">300</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\n初始化后，各对象的值及内存地址&quot;</span>&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;对象名\t对象地址 a的地址  a的值    p中的值     p指向的值      p的地址&quot;</span> &lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p1:\t&quot;</span>&lt;&lt;&amp;p1&lt;&lt;<span class="string">&quot;,  &quot;</span>&lt;&lt;&amp;p1.a&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;p1.a&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;p1.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;*p1.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;&amp;p1.p&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p2:\t&quot;</span>&lt;&lt;&amp;p2&lt;&lt;<span class="string">&quot;,  &quot;</span>&lt;&lt;&amp;p2.a&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;p2.a&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;p2.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;*p2.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;&amp;p2.p&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p3:\t&quot;</span>&lt;&lt;&amp;p3&lt;&lt;<span class="string">&quot;,  &quot;</span>&lt;&lt;&amp;p3.a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p3.a&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;p3.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;*p3.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;&amp;p3.p&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">初始化后，各对象的值及内存地址</span><br><span class="line">对象名  对象地址    a的地址  a的值    p中的值     p指向的值   p的地址</span><br><span class="line">p1:     <span class="number">0x6ffdf0</span>,  <span class="number">0x6ffdf0</span>  <span class="number">300</span>,   <span class="number">0x1b1530</span>,   <span class="number">10</span>,   <span class="number">0x6ffdf8</span></span><br><span class="line">p2:     <span class="number">0x6ffde0</span>,  <span class="number">0x6ffde0</span>  <span class="number">100</span>,   <span class="number">0x1b1530</span>,   <span class="number">10</span>,   <span class="number">0x6ffde8</span></span><br><span class="line">p3:     <span class="number">0x6ffdd0</span>,  <span class="number">0x6ffdd0</span>  <span class="number">100</span>,   <span class="number">0x1b1530</span>,   <span class="number">10</span>,   <span class="number">0x6ffdd8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details>  </p></blockquote><p>浅拷贝可能出现的问题</p><blockquote><p>1)<code>重复释放同一块空间产生错误</code><br>改变p1对象的值,就会出现浅拷贝问题</p><blockquote><p>如：当对象p1消亡时，需要释放构造函数中new()动态申请空间。而当对象p2消亡时也会释放这个空间，造成重复释放同一块空间，程序出错。</p><p>&ensp; &ensp; &ensp;<code>*p1.p = 20;</code><br>    &ensp; &ensp; &ensp; p1.a = 300;<br> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">初始化后，各对象的值及内存地址</span><br><span class="line">对象名  对象地址    a的地址   a的值    p中的值   p指向的值  p的地址</span><br><span class="line">p1:     <span class="number">0x6ffdf0</span>,   <span class="number">0x6ffdf0</span>  <span class="number">300</span>,   <span class="number">0x181530</span>,   <span class="number">20</span>,   <span class="number">0x6ffdf8</span></span><br><span class="line">p2:     <span class="number">0x6ffde0</span>,  <span class="number">0x6ffde0</span>  <span class="number">100</span>,   <span class="number">0x181530</span>,   <span class="number">20</span>,   <span class="number">0x6ffde8</span></span><br><span class="line">p3:     <span class="number">0x6ffdd0</span>,  <span class="number">0x6ffdd0</span>  <span class="number">100</span>,   <span class="number">0x181530</span>,   <span class="number">20</span>,   <span class="number">0x6ffdd8</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>2)<code>某块内存永远不会被释放而成为内存垃圾</code><br>&ensp; &ensp; &ensp;pointer p4;<br>&ensp; &ensp; &ensp;p4 = p1;<br>创建对p4时，为p4中的成员变量p分配了空间，并符初始值10，执行语句“p4 = p1；”p4中的成员变量p指向了p1中p指针指向的地址，而丢弃了原来指向的地址，这块内存成为内存垃圾。</p></blockquote></blockquote><p>深拷贝</p><blockquote><p>重载赋值运算符后，赋值语句的功能是将一个对象中指针成员变量指向的内容复制到另一个对象中指针成员变量指向的地方，这样的拷贝叫“深拷贝”<br><details class="folding-tag" green><summary> 深拷贝的实现 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pointer</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//公有，main函数可以处理成员</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> *p;<span class="comment">//指向整形数的指针 </span></span><br><span class="line"><span class="built_in">pointer</span>()&#123;</span><br><span class="line">a = <span class="number">100</span>; <span class="comment">// 构造函数 </span></span><br><span class="line">p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>); <span class="comment">//创建指针地址空间 并赋初值10 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">pointer</span>(<span class="type">const</span> pointer &amp;tempp) &#123;  <span class="comment">//复制构造函数 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> != &amp;tempp)&#123;<span class="comment">// 避免a =a这样的赋值 </span></span><br><span class="line">a = tempp.a;  </span><br><span class="line">p = <span class="keyword">new</span> <span class="built_in">int</span>();</span><br><span class="line">*p = *tempp.p;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">pointer</span>()&#123;</span><br><span class="line"><span class="keyword">if</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pointer &amp;<span class="keyword">operator</span> =(<span class="type">const</span> pointer &amp;c)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> == &amp;c)&#123; </span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;p;</span><br><span class="line"><span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="built_in">int</span>(*c.p);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">pointer p1;<span class="comment">//使用构造函数 </span></span><br><span class="line"><span class="function">pointer <span class="title">p2</span><span class="params">(p1)</span></span>;<span class="comment">//使用复制构造函数 </span></span><br><span class="line">pointer p3 ;</span><br><span class="line">p1 = p1;<span class="comment">//赋值重载函数 </span></span><br><span class="line">p3 = p1;<span class="comment">// 赋值重载函数 &amp;operator =(const pointer &amp;c)</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\n初始化后，各对象的值及内存地址&quot;</span>&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;对象名\t对象地址 a的地址  a的值    p中的值     p指向的值      p的地址&quot;</span> &lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p1:\t&quot;</span>&lt;&lt;&amp;p1&lt;&lt;<span class="string">&quot;,  &quot;</span>&lt;&lt;&amp;p1.a&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;p1.a&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;p1.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;*p1.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;&amp;p1.p&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p2:\t&quot;</span>&lt;&lt;&amp;p2&lt;&lt;<span class="string">&quot;,  &quot;</span>&lt;&lt;&amp;p2.a&lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;p2.a&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;p2.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;*p2.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;&amp;p2.p&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p3:\t&quot;</span>&lt;&lt;&amp;p3&lt;&lt;<span class="string">&quot;,  &quot;</span>&lt;&lt;&amp;p3.a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p3.a&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;p3.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;*p3.p&lt;&lt;<span class="string">&quot;,   &quot;</span>&lt;&lt;&amp;p3.p&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">初始化后，各对象的值及内存地址</span><br><span class="line">对象名  对象地址    a的地址  a的值    p中的值     p指向的值  p的地址</span><br><span class="line">p1:      <span class="number">0x6ffdf0</span>,  <span class="number">0x6ffdf0</span>  <span class="number">100</span>,   <span class="number">0xae1530</span>,   <span class="number">10</span>,   <span class="number">0x6ffdf8</span></span><br><span class="line">p2:     <span class="number">0x6ffde0</span>,  <span class="number">0x6ffde0</span>  <span class="number">100</span>,   <span class="number">0xae1550</span>,   <span class="number">10</span>,   <span class="number">0x6ffde8</span></span><br><span class="line">p3:     <span class="number">0x6ffdd0</span>,  <span class="number">0x6ffdd0</span> <span class="number">100</span>,   <span class="number">0xae1c20</span>,   <span class="number">10</span>,   <span class="number">0x6ffdd8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details>  </p></blockquote></blockquote><h3 id="重载流插入运算符和提取流运算符"><a href="#重载流插入运算符和提取流运算符" class="headerlink" title="重载流插入运算符和提取流运算符"></a>重载流插入运算符和提取流运算符</h3><p>1、C++中，可以通过重载流插入运算符 “&lt;&lt;” 和提取流运算符 “&gt;&gt;” 来实现自定义数据类型的输入输出操作。下面是相关的要点：</p><p>重载流插入运算符 “&lt;&lt;” 用于输出数据到流中，其通常的形式为：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; out, <span class="type">const</span> MyType&amp; data) &#123;</span><br><span class="line">    <span class="comment">// 输出操作</span></span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>2、其中，out 表示输出流对象，MyType 表示自定义的数据类型，data 表示要输出的数据对象。函数内部的输出操作可以使用流输出运算符 &lt;&lt; 或其他输出函数实现。函数返回 out 对象的引用，以支持链式调用。<br>重载提取流运算符 “&gt;&gt;” 用于从流中读取数据，其通常的形式为：<br><strong><code>提取运算符函数需要返回新的对象值，所以只能使用引用，</code></strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; in, MyType&amp; data) &#123;</span><br><span class="line">    <span class="comment">// 输入操作</span></span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>可以对两个运算符进行重载，使之用于自定义对象。但重载函数不能是流类库中成员，而而必须重载为类的友元</strong><br>其中，in 表示输入流对象，MyType 表示自定义的数据类型，data 表示要读取的数据对象。函数内部的输入操作可以使用流输入运算符 &gt;&gt; 或其他输入函数实现。函数返回 in 对象的引用，以支持链式调用。<br>重载流插入运算符和提取流运算符通常需要在类的内部进行定义，以便访问类的私有成员变量和函数。<br>重载流插入运算符和提取流运算符可以进行重载，以支持不同的数据类型和输入输出格式。常见的输出格式包括十进制、十六进制、科学计数法等，常见的输入格式包括忽略空白字符、检查输入是否合法等。<br>在进行输入操作时，需要特别注意输入数据的合法性，以避免程序出错或导致安全漏洞。可以使用流状态标志和异常处理机制来检测和处理输入错误。  </p><h3 id="重载自增、自减运算符"><a href="#重载自增、自减运算符" class="headerlink" title="重载自增、自减运算符"></a>重载自增、自减运算符</h3><details class="folding-tag" green><summary> 示例代码 </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义计数器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Counter</span>() : <span class="built_in">count</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">Counter</span>(<span class="type">int</span> c) : <span class="built_in">count</span>(c) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载前置自增运算符</span></span><br><span class="line">    Counter&amp; <span class="keyword">operator</span>++ () &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载前置自减运算符</span></span><br><span class="line">    Counter&amp; <span class="keyword">operator</span>-- () &#123;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载后置自增运算符</span></span><br><span class="line">    Counter <span class="keyword">operator</span>++ (<span class="type">int</span>) &#123;</span><br><span class="line">        <span class="function">Counter <span class="title">tmp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">operator</span>++();</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载后置自减运算符</span></span><br><span class="line">    Counter <span class="keyword">operator</span>-- (<span class="type">int</span>) &#123;</span><br><span class="line">        <span class="function">Counter <span class="title">tmp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">operator</span>--();</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getCount</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> count; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Counter <span class="title">c1</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Initial count: &quot;</span> &lt;&lt; c1.<span class="built_in">getCount</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    ++c1;  <span class="comment">// 前置自增</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After ++c1: &quot;</span> &lt;&lt; c1.<span class="built_in">getCount</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    --c1;  <span class="comment">// 前置自减</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After --c1: &quot;</span> &lt;&lt; c1.<span class="built_in">getCount</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    c1++;  <span class="comment">// 后置自增</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After c1++: &quot;</span> &lt;&lt; c1.<span class="built_in">getCount</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    c1--;  <span class="comment">// 后置自减</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After c1--: &quot;</span> &lt;&lt; c1.<span class="built_in">getCount</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h2><p>文件输入输出流是C++中用于读写文件的一种机制，可以将文件中的数据读入程序，或者将程序中的数据写入文件。以下是文件输入输出流的要点：</p><blockquote><p>创建输出文件对象并与磁盘文件相关联的格式如下；<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::ofstream <span class="title">outFile</span><span class="params">(<span class="string">&quot;filename.txt&quot;</span>)</span></span>; <span class="comment">// 创建一个输出文件对象并打开文件</span></span><br><span class="line">    <span class="keyword">if</span> (outFile.<span class="built_in">is_open</span>()) &#123; <span class="comment">// 确认文件已成功打开</span></span><br><span class="line">        outFile &lt;&lt; <span class="string">&quot;Hello, world!&quot;</span>; <span class="comment">// 向文件写入数据</span></span><br><span class="line">        outFile.<span class="built_in">close</span>(); <span class="comment">// 关闭文件</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在这个例子中，使用<code>std::ofstream</code>类创建了一个输出文件对象<code>outFile</code>，并将其与名为filename.txt的磁盘文件相关联。如果文件不存在，则会自动创建该文件。然后，可以使用outFile对象向文件写入数据。在完成数据写入后，必须调用<strong>close()方法来关闭文件</strong>，以确保数据已经被写入磁盘文件</p></blockquote><p>文件输入输出流的头文件为&lt; fstream &gt;。</p><p>文件输入输出流分为 ifstream 和 ofstream 两种类型。</p><p>ifstream 类型用于从文件中读取数据，而 ofstream 类型用于向文件中写入数据。  </p><ol><li>使用文件输入输出流时需要先打开文件，可以使用成员函数 open() 打开文件，使用成员函数 close() 关闭文件。</li><li>在使用文件输入输出流读写数据时，需要使用输入输出运算符（&lt;&lt; 和 &gt;&gt;）或 getline() 函数，以及文件输入输出流对象与数据之间的流操作符（如 ifstream 和数据之间的 &lt;&lt;，或 ofstream 和数据之间的 &gt;&gt;）。</li><li>如果想要从<strong>文件的指定位置开始读取数据</strong>，可以使用成员函数 seekg()；如果想要从文件的<strong>末尾开始写入数据</strong>，可以使用成员函数 seekp()。</li><li>在进行文件读写操作时，应该注意错误处理，例如检查文件是否成功打开、是否成功读写数据等。</li><li>可以使用文件指针来指定读写位置，例如使用 tellg() 和 tellp() 函数获取文件指针的当前位置，使用 seekg() 和 seekp() 函数设置文件指针的位置。<br><strong><code>注意：</code></strong><code>不能在文件开始追加数据</code><br>总之，文件输入输出流是C++中处理文件的一种机制，使用它可以方便地读写文件中的数据。<h2 id="类的继承与派生"><a href="#类的继承与派生" class="headerlink" title="类的继承与派生"></a>类的继承与派生</h2><strong><code>注意：</code></strong> <strong>一个类不能被多次说明为某个派生类的直接类，但是可以不止一次的成为间接基类</strong><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承方式</span></span><br><span class="line"><span class="comment">// 公有继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClass</span> : <span class="keyword">public</span> BaseClass &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 私有继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClass</span> : <span class="keyword">private</span> BaseClass &#123;</span><br><span class="line">……</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 保护继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClass</span> : <span class="keyword">protected</span> BaseClass &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问控制</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClass</span> : <span class="keyword">public</span> BaseClass &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">someFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        publicMemberVariable = <span class="number">42</span>;</span><br><span class="line">        protectedMemberVariable = <span class="number">42</span>;</span><br><span class="line">        <span class="comment">// 私有成员无法直接访问</span></span><br><span class="line">        <span class="comment">// privateMemberVariable = 42;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数和析构函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClass</span> : <span class="keyword">public</span> BaseClass &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DerivedClass</span>(<span class="type">int</span> someArg) : <span class="built_in">BaseClass</span>(someArg) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">DerivedClass</span>() &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虚函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">someFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClass</span> : <span class="keyword">public</span> BaseClass &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">someFunction</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多态性</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">someFunction</span><span class="params">(BaseClass* someObject)</span> </span>&#123;</span><br><span class="line">    someObject-&gt;<span class="built_in">someFunction</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BaseClass* obj1 = <span class="keyword">new</span> <span class="built_in">BaseClass</span>();</span><br><span class="line">BaseClass* obj2 = <span class="keyword">new</span> <span class="built_in">DerivedClass</span>();</span><br><span class="line"><span class="built_in">someFunction</span>(obj1);  <span class="comment">// 调用BaseClass::someFunction()</span></span><br><span class="line"><span class="built_in">someFunction</span>(obj2);  <span class="comment">// 调用DerivedClass::someFunction()</span></span><br></pre></td></tr></table></figure><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><blockquote><p>1、 二义性问题<br>c++中的二义性问题指的是在派生类中访问基类成员时，由于多重继承或虚继承导致成员名字冲突，编译器无法确定调用哪个成员函数或变量，从而出现歧义。这种歧义被称为二义性。</p></blockquote></li></ol><p>二义性问题主要出现在以下情况：<br>多重继承：当派生类同时从两个或多个基类中继承同名成员时，派生类中访问该成员就会出现二义性。在这种情况下，可以使用作用域解析运算符“::”来指定具体调用哪个基类的成员。<br>虚继承：当多个派生类都以虚继承的方式继承自同一个基类，并且基类中有同名的虚函数或成员变量时，派生类中访问该成员就会出现二义性。在这种情况下，需要通过动态绑定来解决二义性问题。</p><blockquote><p>解决二义性问题的方法主要有以下几种：</p><ol><li>使用作用域解析运算符“::”来指定具体调用哪个基类的成员。</li><li>将二义性成员在派生类中重新定义，避免继承自基类。</li><li>在派生类中重新定义基类的虚函数，并在其中调用基类的同名虚函数。</li><li>使用虚继承或将多继承转化为单继承来避免二义性。</li></ol></blockquote><h2 id="对象之间的信息传递"><a href="#对象之间的信息传递" class="headerlink" title="对象之间的信息传递"></a>对象之间的信息传递</h2><p>在面向对象编程中，对象之间的信息传递可以通过不同的方式实现，主要包括以下几种：<br>1、<strong>对象之间的方法调用</strong>：一个对象可以调用另一个对象的方法，以获取或改变另一个对象的状态。这种方式是最常见的对象之间信息传递方式，它通过对象的接口提供对其他对象的访问权限，实现对象之间的相互作用。<br>2、<strong>对象之间的消息传递</strong>：这种方式类似于进程之间的消息传递。一个对象可以向另一个对象发送消息，以请求另一个对象执行某些操作。这种方式需要对象之间具有某种通信机制，比如消息队列、信号量等。<br>3、<strong>对象之间的事件通知</strong>：这种方式常用于 GUI 编程中，当某个对象发生变化时，会通知其他对象来做出相应的响应。例如，在窗口中点击按钮时，按钮对象会发出事件通知，窗口对象可以接收到事件通知并执行相应的操作。<br>4、<strong>对象之间的回调函数</strong>：这种方式常用于异步编程中，一个对象可以向另一个对象注册一个回调函数，当某些事件发生时，会调用回调函数。例如，在网络编程中，一个对象可以向另一个对象注册一个回调函数，当网络数据到达时，会调用回调函数来处理数据。</p><p>总之，对象之间的信息传递是面向对象编程中的一个核心概念，它可以通过不同的方式实现，以满足不同的需求。</p><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p>C++中的虚函数是一种特殊的成员函数，它<code>可以在基类中被声明为虚函数，这样在派生类中重写（覆盖）它时，就可以实现运行时多态性</code>（<strong>也称为动态绑定或后期绑定</strong>）。</p><blockquote><p>声明为虚函数的语法格式为在函数声明前面加上关键字<code>*virtual*</code>，如下所示<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;This is the Base class print function.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>这里定义了一个名为print的虚函数。当这个函数在基类中声明为虚函数后，派生类中如果有同名函数的话，会覆盖掉基类中的函数，<code>而不是像非虚函数那样隐藏掉基类的同名函数</code>。当通过基类的指针或引用调用虚函数时，<code>*程序会根据指针或引用实际指向的对象类型来确定该调用哪个类的虚函数，这就实现了多态性*</code>。</p></blockquote><p>需要注意的是，<code>虚函数</code>必须以<strong>指针或引用的方式</strong>进行调用，<code>如果直接调用，则会调用基类的函数而不是派生类的函数</code>。此外，虚函数的调用<strong>开销较大</strong>，因为需要在运行时进行动态绑定，所以在设计程序时应该慎重使用虚函数。</p><h2 id="虚基类"><a href="#虚基类" class="headerlink" title="虚基类"></a>虚基类</h2><p>C++虚基类机制是为了解决多重继承带来的问题而提出的一种机制。在多重继承中，如果派生类同时从多个基类中继承了同名的成员变量或函数，就会导致二义性问题。虚基类机制可以让某些基类成为虚基类，使得从这些基类派生出的所有类共享一个基类子对象，从而避免了二义性问题的发生。</p><p>在类定义中，将某个基类声明为虚基类时，需要在该基类名称前加上关键字<code>&quot;virtual&quot;</code>，例如：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> : <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="type">int</span> d;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>在上述代码中，<code>基类A被声明为虚基类，派生类B和C都使用了虚继承方式来继承A。这样，D类就可以通过B和C类共享同一个A类的实例，避免了因为A被多次继承而带来的</code><strong>二义性问题</strong>。</p><p>需要注意的是，在虚继承中，由于存在虚基类指针和虚基类表的影响，会使得派生类对象的内存布局与普通的单一继承或非虚继承有所不同。因此，在使用虚继承时需要格外注意<strong>内存管理和初始化等问题</strong>。</p><h2 id="类模板与向量"><a href="#类模板与向量" class="headerlink" title="类模板与向量"></a>类模板与向量</h2><p><strong>类模板</strong>是C++中的一种模板，用于定义通用类，其中某些成员变量或成员函数的类型不是具体类型，而是模板参数，从而使得可以通过模板参数来实现不同类型的数据处理。类模板可以通过实例化得到具体的类，可以将不同类型的对象进行封装。</p><p><strong>向量</strong>是C++ STL（标准模板库）中的容器，它可以存储任何类型的对象，使用动态数组实现。向量可以根据需要自动扩展和收缩，提供快速的随机访问和在末尾添加元素的操作，并提供一些其他的常用操作，如查找、排序和删除。向量类似于数组，但具有更高的灵活性和安全性，因为它们可以自动管理内存分配和释放，而不需要手动管理。</p><p><strong>类模板和向量的结合可以使程序员轻松地编写支持不同类型的向量类。</strong>使用类模板可以将向量类的元素类型作为参数进行泛化，从而使其适用于任何类型的数据，同时向量提供了动态数组的实现，可以实现对变长数据的高效处理，这为数据处理提供了便利。因此，类模板和向量是C++中非常有用的工具，可以提高代码的复用性和可扩展性。</p><blockquote><p>C++中类模板的基本格式如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span> &#123;</span><br><span class="line">    <span class="comment">// 类的定义</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>其中，<code>template</code>关键字表示声明一个模板，<code>&lt;class T&gt;</code>是模板参数列表，<code>T</code>是模板参数名，可以根据需要自行更改。在类模板中，可以使用模板参数<code>T</code>来定义类的成员变量、成员函数、嵌套类型等。例如：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* data;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stack</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(T x)</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上述代码定义了一个类模板<code>Stack</code>，使用了模板参数<code>T</code>来定义数据类型，包含了一个<code>T*</code>类型的指针成员变量<code>data</code>，表示一个动态数组，以及整型成员变量<code>size</code>，表示数组大小。成员函数包括一个默认构造函数、一个<code>push()</code>函数、一个<code>pop()</code>函数和一个<code>empty()</code>函数，都使用了模板参数<code>T</code>来定义函数参数和返回值类型。</p><p>使用类模板创建对象的格式如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span> &#123;</span><br><span class="line">    <span class="comment">// 类定义</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line">ClassName&lt;data_type&gt; object_name;</span><br><span class="line"><span class="comment">//类模板名&lt;模板参数&gt; 对象名1，对象名2;</span></span><br></pre></td></tr></table></figure></p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>在C++中，<strong>抽象类是指<code>含有纯虚函数的类</code>。纯虚函数是指在基类中没有实现的虚函数，需要在派生类中进行实现。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">pureVirtualFunction</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 普通成员函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">normalFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 函数实现</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">AbstractClass</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>其中，纯虚函数通过在函数声明后加上 <code>=0</code> 来表示。抽象类可以包含普通成员函数和成员变量，也可以包含构造函数和析构函数，但需要注意的是，<code>抽象类不能被实例化</code>，只能被继承。<strong>如果派生类没有实现纯虚函数，那么派生类也会变成抽象类。</strong></p><h3 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h3><p>基类中某个<strong>虚函数给不出或没必要给出详细定义，可以将它声明为一个纯虚函数</strong></p><h2 id="预处理命令"><a href="#预处理命令" class="headerlink" title="预处理命令"></a>预处理命令</h2><p>预处理命令是在程序编译之前执行的命令，通常以<code>“#”</code>开头，用于指导编译器进行某些操作，如定义宏、包含头文件、条件编译等。预处理命令是由预处理器来处理的，预处理器将处理后的代码传递给编译器进行编译。</p><blockquote><p>常用的预处理命令包括：  </p><ol><li><strong>#define：</strong>定义宏，将一个标识符替换为一个常量表达式、变量表达式、函数等。</li><li><strong>#include：</strong>包含头文件，将指定的文件内容插入到当前文件中。</li><li><strong>#ifdef、#ifndef、#endif：</strong>条件编译，用于根据条件选择性地编译代码。</li><li><strong>#pragma：</strong>指示编译器执行某些特定操作，如设置编译器选项、打开或关闭警告信息等。</li><li><strong>#undef：</strong>取消宏的定义。<br>预处理命令的使用可以提高程序的可读性和可维护性，同时也可以减少代码的重复编写。<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2>分析题目：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">D</span> &#123; <span class="type">int</span> a;<span class="keyword">union</span>&#123;<span class="type">int</span> b;<span class="type">double</span> c;&#125; ;D * d[<span class="number">2</span>];&#125; <span class="comment">//该类型的大小为多少字节、</span></span><br></pre></td></tr></table></figure>根据结构体的<code>对齐原则</code>，结构体变量的地址应该是该结构体中<code>最大数据成员所占字节数的整数倍</code>，因此需要考虑各个成员的大小以及对齐方式。</li></ol></blockquote><p>对于该结构体，其中最大的数据成员为 union 中的 double 类型，占用 8 个字节。因此，该结构体在内存中的大小应该为 8 + 2 * 8 = 24 个字节。其中，2 表示数组 d 包含两个指针类型的元素，每个指针类型的大小为 8 个字节；union 的大小应该取决于其最大的成员类型的大小，即 double 类型所占用的 8 个字节。</p><p>需要注意的是，结构体中的内存对齐方式与编译器有关，不同编译器可能会有不同的对齐方式，因此结构体的大小可能会有所不同。</p><p>Regenerate response</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记(一)</title>
      <link href="/posts/ad4f1e09.html"/>
      <url>/posts/ad4f1e09.html</url>
      
        <content type="html"><![CDATA[<a href="/posts/ad4f1e09.html" title="🍉C++学习笔记(一)">🍉C++学习笔记(一)</a><a href="/posts/5a8a6c8d.html" title="🍊C++学习笔记(二)">🍊C++学习笔记(二)</a><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>c++是一种编译式的、通用的、大小写敏感的编程语言，完全支持面向对象开发模式</p><h3 id="C-对c语言的增强表现在两个方"><a href="#C-对c语言的增强表现在两个方" class="headerlink" title="C++对c语言的增强表现在两个方"></a>C++对c语言的增强表现在两个方</h3><p> （1）在原来面向过程的机制上法，增加了c语言对类型的处理<br> （2）增加了面向对象机制</p><h3 id="基本输入-输出流"><a href="#基本输入-输出流" class="headerlink" title="基本输入/输出流"></a>基本输入/输出流</h3><p>说明：<br>1）标准输入： cin&gt;&gt;变量1&gt;&gt;变量2&gt;&gt;……&gt;&gt;变量n<br>2）标准输出：cout&lt;&lt;表达式1&lt;&lt;表达式2&lt;&lt;……&lt;&lt;表达式n<br>3) 使用标准出入cin与标准输出cout前，要在程序的最前面包含<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  <span class="comment">//包含头文件：输入输出流</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">//使用命名空间</span></span><br></pre></td></tr></table></figure><br>4）换行操作：用语句cout&lt;&lt; end |;或者cout&lt;&lt;”\n”<br>5)当连续从键盘上读取数据时，以空格、制表符tab键或enter键作为分隔符。<br>6）用户自己定义的数据类型，不能直接使用输入“&gt;&gt;”或输出“&lt;&lt;”，必须对<span class='p red'>输入输出符重载</span><br><details class="folding-tag" orange><summary> 基本输入输出示例 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例 1</button></li><li class="tab"><button type="button" data-href="#示例-2">示例 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot;   &quot;</span>;</span><br><span class="line">cout&lt;&lt; <span class="string">&quot;\n&quot;</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>输出输入10个数字</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details></p><h3 id="头文件和命名空间"><a href="#头文件和命名空间" class="headerlink" title="头文件和命名空间"></a>头文件和命名空间</h3><p>1）头文件</p><div class="table-container"><table><thead><tr><th>常见头文件</th><th>表示</th></tr></thead><tbody><tr><td>标准输入输出流</td><td>iostream</td></tr><tr><td>标准文件流</td><td>fstream</td></tr><tr><td>标准字符串处理函数</td><td>string</td></tr><tr><td>标准数学函数</td><td>cmath</td></tr></tbody></table></div><p>程序员也可以编译自己的文件段，作为头文件反复调用<br>其他头文件：<strong>&lt; iomanip &gt;</strong>是C++标准库中的头文件，提供了一些格式化输出和输入的函数和操作符。</p><blockquote><p>主要包括以下几个函数和操作符：</p><ol><li><strong>setprecision(n)</strong>：设置输出浮点数的精度为n位。</li><li><strong>setw(n)</strong>：设置输出域宽为n个字符。</li><li><strong>setfill(c)</strong>：设置输出时，如果域宽大于输出字符数，用字符c填充空余的位置。 eft和right操作符：分别设置输出左对齐和右对齐。</li><li><code>boolalpha</code>和<code>noboolalph</code>a操作符：分别设置输出bool值为<code>true/false</code>或<code>1/0</code>。</li><li>hex、oct和dec操作符：分别设置输出16进制、8进制和10进制的整数。</li><li>fixed和scientific操作符：分别设置输出为定点数和科学计数法表示的浮点数</li><li><strong>istream&amp; ignore (streamsize n = 1, int delim = EOF);</strong>  其中，<code>n</code>表示要跳过的字符数，<code>delim</code>是可选参数，表示要跳过的分隔符（默认为 EOF）。<code>ignore() 会返回输入流对象</code>，因此可以进行链式调用。</li><li><strong>cin.ignore(numeric_limits&lt; streamsize &gt;::max(), ‘\n’);</strong>  其中，<code>numeric_limits&lt;streamsize&gt;::max()</code>表示跳过输入流中的所有字符，直到遇到换行符为止</li></ol></blockquote><p>这些函数和操作符可以使得输出的格式更加规范和美观，提高代码的可读性和可维</p><p>2）命名空间<br>c++中为了避免名字定义冲突，特别引入“命名空间”的作用为了消除同名引起的歧义。在程序中使用标准程序库中的标识符时，要写语句“using namespace std;”.</p><h3 id="强制类型转换符"><a href="#强制类型转换符" class="headerlink" title="强制类型转换符"></a>强制类型转换符</h3><p>当不同类型的量进行混合运算时，系统自动进行合理的类型转换，也可以强制类型转换<br>1）将一种数据类型转换成另一种数据类型<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static_cast</span>&lt;类型名&gt;（表达式）</span><br><span class="line">说明： <span class="keyword">static_cast</span>  可以省略不写</span><br><span class="line">oneint2 = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(oneDouble);</span><br><span class="line">oneint2 = <span class="built_in">int</span>(oneDouble);</span><br><span class="line">oneint2 = (<span class="type">int</span>)oneDouble; <span class="comment">//圆括号</span></span><br><span class="line">oneint2 = oneDouble;  <span class="comment">//自动类型转换</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h3><p>1）c++中，可以在声明函数时为形参制定默认值。调用函数时，从最左侧的参数开始调用<br><details class="folding-tag" orange><summary> 带默认值函数示例 </summary>              <div class='content'>              <div class="tabs" id="示例-结果"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-结果-1">示例 结果 1</button></li><li class="tab"><button type="button" data-href="#示例-结果-2">示例 结果 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-结果-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a = <span class="number">11</span>,<span class="type">int</span> b = <span class="number">22</span>, <span class="type">int</span> c = <span class="number">33</span>)</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt; <span class="string">&quot;b=&quot;</span>&lt;&lt; b &lt;&lt; <span class="string">&quot;c=&quot;</span>&lt;&lt; c &lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line"><span class="built_in">func</span>(<span class="number">55</span>);</span><br><span class="line"><span class="built_in">func</span>(<span class="number">77</span>,<span class="number">99</span>);</span><br><span class="line"><span class="built_in">func</span>(<span class="number">8</span>,<span class="number">88</span>,<span class="number">888</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-结果-2"><p>a=11b=22c=33<br>a=55b=22c=33<br>a=77b=99c=33<br>a=8b=88c=888</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><br>2）c++语言规定，定义函数时，为参数赋值，只能按照从<span class='p red'>后往前</span>的顺序赋值，且在调用是也只省缺后面的连续若干个实参。<br>例子：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfi</span><span class="params">(<span class="type">int</span> a = <span class="number">2</span>,<span class="type">double</span> b = <span class="number">3.0</span>)</span></span>; <span class="comment">//正确</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfi</span><span class="params">(<span class="type">int</span> a ,<span class="type">double</span> b = <span class="number">3.0</span>)</span></span>; <span class="comment">//正确</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfi</span><span class="params">(<span class="type">int</span> a = <span class="number">2</span>,<span class="type">double</span> b)</span></span>; <span class="comment">//错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>3）c++语言规定，在函数的调用处只能省缺后面的<span class='p red'>连续若干个实参</span>，而且所有缺省的实参都<span class='p red'>必须有默认值。</span>。<br>函数调用示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">函数声明： <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a ,<span class="type">int</span> b = <span class="number">2</span>,<span class="type">int</span> c = <span class="number">3</span>)</span></span></span><br><span class="line"><span class="function">函数调用：<span class="title">func</span><span class="params">(<span class="number">1</span>,<span class="number">22</span>，<span class="number">33</span>)</span></span>; <span class="comment">//正确</span></span><br><span class="line">函数调用：<span class="built_in">func</span>(); <span class="comment">//错误</span></span><br><span class="line">函数调用：<span class="built_in">func</span>(<span class="number">10</span>,<span class="number">20</span>); <span class="comment">//正确</span></span><br><span class="line">函数调用：<span class="built_in">func</span>(<span class="number">5</span>,,<span class="number">9</span>); <span class="comment">//错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>4）c++语言规定，在指定默认值是不仅可以使用常数，还可以用任何有定义的<span class='p red'>表达式</span>作为参数默认值<br>函数调用示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> a,b</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y = Max(a,b),<span class="type">int</span> t = a-b)</span></span>&#123;……&#125;</span><br></pre></td></tr></table></figure><br>5）<span class='p red'>函数声明</span>没有函数体，表示有这个函数存在；<span class='p red'>函数定义</span>有函数体，表示函数的具体实现；函数的默认值可以给到其中的一个，但是不能同时都给</p><h3 id="引用和函数参数的传递"><a href="#引用和函数参数的传递" class="headerlink" title="引用和函数参数的传递"></a>引用和函数参数的传递</h3><p><strong> 注意：</strong><br>1、<span class='p red'>对象在引用前必须先初始化</span>，声明中符号“&amp;”的位置无关紧要。<br>2、<span class='p red'>不能通过常引用（const）去修改其引用变量的值</span>。<br>3、<span class='p purple'>const位于符号*的左侧</span>，表示指针<emp>,所指数据</emp>为常量，数据不能通过本指针改变，但可以指向其他内存单元<br>4、<span class='p purple'>const位于符号*的右侧</span>，表示指<emp>,针本身为</emp>常量，数据可以通过本指针改变，也不可以指向其他内存单元<br>4、<span class='p purple'>const位于符号*的左右两侧</span>，表示指<emp>,针本身以及指针所指数据皆为</emp>常量，数据不可以通过本指针改变，也不可以指向其他内存单元<br><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <h4 id="普通引用与常引用"><a href="#普通引用与常引用" class="headerlink" title="普通引用与常引用"></a>普通引用与常引用</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">列：</span><br><span class="line"><span class="comment">//普通引用：</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;a = x ; <span class="comment">// a就是一个普通引用</span></span><br><span class="line"><span class="type">int</span> &amp; a = x ; <span class="comment">//正确</span></span><br><span class="line"><span class="type">int</span> a&amp; = x ;<span class="comment">//正确</span></span><br><span class="line"><span class="comment">//常引用：</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;b = x ; <span class="comment">// b就是一个常引用</span></span><br><span class="line">a = <span class="number">20</span>;  <span class="comment">//则x = 20，b = 20</span></span><br><span class="line">x = <span class="number">30</span>;  <span class="comment">//则a = 30，b = 30</span></span><br><span class="line">b = <span class="number">40</span>;  <span class="comment">//错误</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *pa2 = &amp;a2; <span class="comment">//指针pa2所指的数据是常量  </span></span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> pa2 = &amp;a2; <span class="comment">//指针pa2是常量 ，所指数据为变量 </span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> pa2 = &amp;a2; <span class="comment">//指针pa2与所指的数据都是常量 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="引用在函数中的使用"><a href="#引用在函数中的使用" class="headerlink" title="引用在函数中的使用"></a>引用在函数中的使用</h4><p>两种方式：<span class='p red'>传值与传引用</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 值传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SVal</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">tmp = a; a = b; b = tmp;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;SVal()函数中：\t\ta = &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;,b=&quot;</span>&lt;&lt;b&lt;&lt;endl; </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 引用传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SRef</span><span class="params">(<span class="type">int</span> &amp; a,<span class="type">int</span>  &amp;b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">tmp = a; a = b; b = tmp;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;SRef()函数中：\t\ta = &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;,b=&quot;</span>&lt;&lt;b&lt;&lt;endl; </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>              </div>            </details></p><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><p>对需要频繁调用，且代码量少的函数，可以将其定义为内联函数。<u>编译时，编译程序将整个函数体的代码复制到调用该函数的位置。</u><br><emp>,如果函数体中有循环语句和switch语句通常不定义为内联函数</emp></p><p>可以使用关键字<code>inline</code>将成员函数定义为内联函数。(<em>凡是出现调动该函数的地方，编译程序自动将其装换为该函数的<code>函数体</code>，不再在程序执行时调动该函数，大大提高了效率</em>)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">定义内联函数的格式如下：</span><br><span class="line"><span class="keyword">inline</span>返回值类型函数名（形参表）&#123;</span><br><span class="line">函数体</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数的重载"><a href="#函数的重载" class="headerlink" title="函数的重载"></a>函数的重载</h3><p>为同一个函数定义几个版本<wavy>（参数不同）</wavy>，从而使一个函数名具有多种功能，称为函数重载。<br><details class="folding-tag" orange><summary> 注意事项 </summary>              <div class='content'>              <h4 id="满足下面一个条件便可以重载"><a href="#满足下面一个条件便可以重载" class="headerlink" title="满足下面一个条件便可以重载"></a>满足下面一个条件便可以重载</h4><p>1.参数表中对用参数类型不一样<br>2.参数表中参数个数不同；<br>3.参数表中<span class='p red'>不同类型参数的次序不同</span></p><h4 id="不能重载的情况"><a href="#不能重载的情况" class="headerlink" title="不能重载的情况"></a>不能重载的情况</h4><p>1.两个函数<emp>的名字和参数表都是一样的，仅仅是返回值类型不同</emp>，则这两个函数不是重载<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">add</span><span class="params">(<span class="type">int</span> ,<span class="type">float</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> ,<span class="type">float</span>)</span></span>;  <span class="comment">//错误！</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>2.函数采用<emp>引用</emp>的不能区分函数，则这两个函数不能重载。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">double</span> &amp;)</span></span>; <span class="comment">//不可以重载</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>3.函数调用可能会引发<emp>二义性</emp>，不能采用函数重载。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c=<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;</span><br><span class="line">且函数调用语句为：<span class="built_in">Sum</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">//调用会产生二义性不可重载</span></span><br></pre></td></tr></table></figure><br>4.其他存在赋值兼容的情况</p>              </div>            </details></p><h3 id="指针和动态内存分配"><a href="#指针和动态内存分配" class="headerlink" title="指针和动态内存分配"></a>指针和动态内存分配</h3><p>1.<span class='p red'>指针</span>：即指针变量，该变量存储的是一个地址，是该指针所指对象的首地址。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">100</span>,*pa = &amp;a;</span><br><span class="line"><span class="type">int</span> s[<span class="number">10</span>],ps =s; <span class="comment">//指针ps指向数组s的首地址</span></span><br></pre></td></tr></table></figure><br>2.<span class='p red'>动态分配</span><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">动态分配内存的一般格式为：</span><br><span class="line">指针名 = <span class="keyword">new</span> 类型名； <span class="comment">//分配</span></span><br><span class="line"><span class="keyword">delete</span> 指针名;   <span class="comment">// 释放</span></span><br><span class="line"></span><br><span class="line">当不再使用这个空间时，必须使用<span class="keyword">delete</span>释放空间。</span><br><span class="line">若使用<span class="keyword">new</span>运算符动态分配一个数组，那么释放该数组时，</span><br><span class="line">语句如下：</span><br><span class="line"><span class="keyword">delete</span> [] 指针</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><details class="folding-tag" orange><summary> 示例 </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> *p;  <span class="comment">//声明double类型指针 </span></span><br><span class="line">p = <span class="keyword">new</span> <span class="type">double</span>[<span class="number">3</span>];   <span class="comment">//分配3个double类型存储空间 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>; i++)   </span><br><span class="line">cin&gt;&gt;*(p+i);    <span class="comment">//将输入数据存储在指定地址中 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;<span class="number">3</span>; j++)</span><br><span class="line">cout&lt;&lt;*(p+j)&lt;&lt;<span class="string">&quot; &quot;</span>;  <span class="comment">//将地址里的内容输出 </span></span><br><span class="line"><span class="keyword">delete</span> []p;  <span class="comment">// 释放空间 </span></span><br><span class="line"></span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>              </div>            </details></p><h3 id="用string对象处理字符串"><a href="#用string对象处理字符串" class="headerlink" title="用string对象处理字符串"></a>用string对象处理字符串</h3><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <p><span class='p red left'>1.说明：</span></p><div class="tip warning"><p>1)使用string对象，必须#include&lt; string.h &gt;头文件</p></div><p>2)string对象存储的是字符串的首地址，并非字符串本身；<del>sizeof(string)在32位的Dev C++中是4，在64位的Dev C++中是8.</del><br><span class='p red left'>2.对象的操作：</span><br>1)string对象，可以使用cin和cout进行输入、输出<br>2)string对象之间可以相互赋值，也可以用字符串常量和字符串数组的名字对string对象进行赋值。<br>3)string对象之间可以比较大小<wavy>按照字典顺序进行大小判定，而且是大小写相关的</wavy><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> b;  <span class="comment">//声明布尔型变量b</span></span><br><span class="line">string s1 = <span class="string">&quot;China&quot;</span>, s2 = <span class="string">&quot;Ok&quot;</span>; </span><br><span class="line">b =s1&gt;s2; <span class="comment">//比较两个字符串首字母大小   变量b的值为0</span></span><br></pre></td></tr></table></figure><br>4)string对象，可以使用“+”运算对字符串进行连接</p><p><span class='p red center'>3.string类中常用的成员函数：</span></p><div class="table-container"><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>const char *c_str()const;</td><td>返回一个指向字符串的指针，用于将string转换为const char*</td></tr><tr><td>int size() const;</td><td>返回当前字符串的大小</td></tr><tr><td>int length() const;</td><td>返回当前字符串的长度</td></tr><tr><td>bool empty() const ;</td><td>判定当前字符串是否为空</td></tr><tr><td>size_type find(const char *str,size_type index);</td><td>返回str在字符串中第一个出现的位置（从index开始查找）如果没有找到返回  -1</td></tr><tr><td>size_type find( char ch,size_type index);</td><td>返回ch在字符串中第一个出现的位置（从index开始查找）如果没有找到返回  -1</td></tr><tr><td>string &amp; insert(int p,const string &amp; s);</td><td>在p位置插入字符串s</td></tr><tr><td>string &amp;append(const string * s);</td><td>将字符串s 连接到当前字符串的结尾处</td></tr><tr><td>string substr(int pos = 0,int n = npos)const;</td><td>返回从pos开始n个字符组成的字符串</td></tr></tbody></table></div><details class="folding-tag" orange><summary> 示例 </summary>              <div class='content'>              <div class="tabs" id="运行"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#运行-1">运行 1</button></li><li class="tab"><button type="button" data-href="#运行-2">运行 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="运行-1"><p>源码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string str;</span><br><span class="line"><span class="keyword">if</span>(str.<span class="built_in">empty</span>())</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;str is NULL.&quot;</span>&lt;&lt;<span class="string">&quot;,length=&quot;</span>&lt;&lt;str.<span class="built_in">length</span>()&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt; <span class="string">&quot;str is not NULL.&quot;</span>&lt;&lt;endl;</span><br><span class="line">str = str.<span class="built_in">append</span>(<span class="string">&quot;abcdefg&quot;</span>);  <span class="comment">//将字符串连接到当前字符串的结尾 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;str is&quot;</span>&lt;&lt;str&lt;&lt;<span class="string">&quot;,size = &quot;</span>&lt;&lt;str.<span class="built_in">size</span>()&lt;&lt;str.<span class="built_in">length</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;length&quot;</span>&lt;&lt;str.<span class="built_in">length</span>()&lt;&lt;endl;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*p = str.<span class="built_in">c_str</span>();  <span class="comment">//p指向字符串str</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p = &quot;</span>&lt;&lt;p&lt;&lt;endl;  <span class="comment">//输出abcdefg</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;find:&quot;</span>&lt;&lt;str.<span class="built_in">find</span>(<span class="string">&quot;de&quot;</span>,<span class="number">0</span>)&lt;&lt;endl; <span class="comment">//从str的第0查找字符串“de”,成功返回3</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;find:&quot;</span>&lt;&lt;str.<span class="built_in">find</span>(<span class="string">&quot;de&quot;</span>,<span class="number">4</span>)&lt;&lt;endl; <span class="comment">//从str的第4查找字符串“de”,查找失败返回-1对应的无符号数 </span></span><br><span class="line">string str1 = str.<span class="built_in">insert</span>(<span class="number">4</span>,<span class="string">&quot;123&quot;</span>); <span class="comment">//重str的第4个位置插入“123”</span></span><br><span class="line">cout&lt;&lt;str1&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="运行-2"><p>结果：<br>str is NULL.,length=0<br>str isabcdefg,size = 77<br>length7<br>p = abcdefg<br>find:3<br>find:18446744073709551615<br>abcd123efg</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details>              </div>            </details><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="结构化程序设计"><a href="#结构化程序设计" class="headerlink" title="结构化程序设计"></a>结构化程序设计</h3><p>结构化程序设计的<span class='p red'>基本方法</span>：采用自顶向下、逐步求精模块化的思想，将复杂的大问题层层分解为许多简单的小问题。<br>结构化程序设计的<span class='p red'>三种基本结构</span>：顺序结构、选择结构、循环结构。<br>结构化程序设计的<span class='p red'>基本思想</span>：<emp>数据结构 + 算法 = 程序</emp><br>结构化程序设计的<span class='p red'>缺点</span>：难以理解，难以扩充、难以纠错</p><h3 id="面向对象的设计的概念和特点"><a href="#面向对象的设计的概念和特点" class="headerlink" title="面向对象的设计的概念和特点"></a>面向对象的设计的概念和特点</h3><p>1、概念<br>面向对象技术将问题看成<emp>对象</emp>的集合。对象具有两个特性：1）对象本身的信息，也称为<emp>属性</emp>；2）对象的操作，也称为<emp>属行为</emp><br><span class='p red'>对象 = 数据（属性） + 函数（行为）</span><br><span class='p red'>类</span>是对象的一个抽象、对象是类的实例化<br>2、特点（<u>抽象、封装、继承和多态</u>）<br>1)<span class='p red'>抽象</span>：将同一类事物的共同特征概括出来，这个过程叫做“抽象”。<br><span class='p red'>类</span>：是对现实世界中客观事物的抽象。对于一个具体的类它有许多具体的个体，这些个体叫做<span class='p red'>对象</span>。<br><span class='p red'>对象</span>：是系统中用来描述客观事物的一个实体，用<span class='p red'>对象名</span>、<span class='p red'>属性</span><span class='p red'>操作</span>三要素来描述对象。<br>2)<span class='p red'>封装</span>：就是把对象的属性和操作封装结合成一个独立的单元。<br><span class='p red'>封装的作用</span>：数据和操作数据的函数紧密联系起来；将对象的一部分属性和函数隐藏起来，对外不可见，起保护作用；另一部分函数对外可见，作为对象进行操作的接口。<br>3)<span class='p red'>继承</span>：在编写一个新类的时候以现有的类作为基础，使得到的新类从现有的类“派生”而来，从而<span class='p red'>达到代码扩充和代码复用作用</span>。<br><details class="folding-tag" orange><summary> 考点 </summary>              <div class='content'>              <div class="tabs" id="类型"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#类型-1">选择题</button></li><li class="tab"><button type="button" data-href="#类型-2">填空题：</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="类型-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="类型-2"><p>1.两种继承：<code>单一继承</code> 与 <code>多重继承</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><br>4)<span class='p red'>多态</span>：不同的对象可以调用相同名称的函数，但可导致完全不同的行为的现象称为。<span class='p red'>多态性。</span>利用多态性，程序中只需要进行一般形式的函数调用，函数的实现细节留给接收函数调用的对象，这<span class='p red'>大大提高了人们解决复杂问题的能力。</span><br><details class="folding-tag" orange><summary> 考点 </summary>              <div class='content'>              <div class="tabs" id="类型"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#类型-1">选择题</button></li><li class="tab"><button type="button" data-href="#类型-2">填空题：</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="类型-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="类型-2"><p>1.C++支持<code>编译</code>时的多态与<code>运行</code>时多态</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details></p><h3 id="类的初步认识"><a href="#类的初步认识" class="headerlink" title="类的初步认识"></a>类的初步认识</h3><ol><li>类的基本概念<br><span class='p red'>类</span>：是具有相同属性和操作的一组对象的集合，它为属于该类的 全部对象提供了统一的抽象描述，其内部包括<span class='p red'>数据变量</span>和<span class='p red'>成员函数</span>两个主要部分。<br><span class='p red'>类</span>是一种用户自己构造的数据类型，<br><span class='p red'>类</span>要先声明后使用、是具有唯一标识的实体。</li><li>C++语言中常用的数据类型有<code>整型、实型、字符型</code>（这3种类型也被称之为简单数<br>据类型）、数组类型、布尔类型、枚举类型、结构体类型、公用体类型、指针类型、引用类<a href="https://www.cnblogs.com/qinqin-me/p/9568824.html">参考链接</a></li></ol><p>型等。</p><div class="table-container"><table><thead><tr><th>访问级别</th><th>访问控制修饰符</th><th>同类</th><th>派生类</th><th>外部类</th></tr></thead><tbody><tr><td>公开</td><td>public</td><td>√</td><td>√</td><td>√</td></tr><tr><td>受保护</td><td>protected</td><td>√</td><td>√</td><td>×</td></tr><tr><td>默认</td><td>private</td><td>√</td><td>×</td><td>×</td></tr><tr><td>私有</td><td>private</td><td>√</td><td>×</td><td>×</td></tr></tbody></table></div><details class="folding-tag" orange><summary> 访问修饰符示例 </summary>              <div class='content'>              <div class="tabs" id="访问修饰符"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#访问修饰符-1">源码</button></li><li class="tab"><button type="button" data-href="#访问修饰符-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="访问修饰符-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">double</span> length;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setWidth</span><span class="params">(<span class="type">double</span> wid)</span> </span>;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getWidth</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">double</span> width;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类体外定义成员函数 </span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Box::getWidth</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Box::setWidth</span><span class="params">(<span class="type">double</span> wid)</span></span>&#123;</span><br><span class="line">width = wid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Box box;</span><br><span class="line">box.length = <span class="number">10.0</span>; <span class="comment">//访问public成员变量 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Length of box:&quot;</span>&lt;&lt;box.length&lt;&lt;endl;  <span class="comment">//输出box.length</span></span><br><span class="line"><span class="comment">//box.width;// `错误` 此处不能调用private成员变量</span></span><br><span class="line">box.<span class="built_in">setWidth</span>(<span class="number">10.3</span>);<span class="comment">//必须使用成员函数设定的宽度</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Width of box:&quot;</span>&lt;&lt;box.<span class="built_in">getWidth</span>()&lt;&lt;endl;  <span class="comment">//输出Width of box : 10</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="访问修饰符-2"><p>Length of box:10<br>Width of box:10.3<br><code>使用private的好处：</code>1)有利于程序修改2)可以避免对象的不正确操作</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><span class='p red center small'>注意： 1）不能在类的声明中对数据变量进行初始化2）类中声明任何成员变量不能使用</span><span class='nota' data-nota='存储类型'>extern、auto、register</span>关键字修饰；3）可以是空类;<span class='p red'></span><h3 id="类的示例剖析"><a href="#类的示例剖析" class="headerlink" title="类的示例剖析"></a>类的示例剖析</h3><span class='p red'>注意：</span><p>1、在c++中string关键字全小写，在java中String首字母大写<br>2、类名myClass，方法名myFunctiond都使用小驼峰表示，变流量使用全拼小写，常量使用大驼峰表示<br>3、在类中提前声明方法，在类外书写方法体，更清晰易渎，在类体外定义成员函数时使用<emp>::</emp><br><details class="folding-tag" orange><summary> 程序结构 </summary>              <div class='content'>              <div class="tabs" id="类的示例剖析"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#类的示例剖析-1">代码</button></li><li class="tab"><button type="button" data-href="#类的示例剖析-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="类的示例剖析-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myDate</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">myDate</span>();        <span class="comment">//构造函数 </span></span><br><span class="line"><span class="built_in">myDate</span>(<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>);    <span class="comment">//带参数的构造函数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setDate</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>)</span></span>;   <span class="comment">//设置 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setDate</span><span class="params">(myDate)</span></span>;  <span class="comment">//设置 </span></span><br><span class="line"><span class="function">myDate <span class="title">getDate</span><span class="params">()</span></span>;  <span class="comment">//获取 日期 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setYrar</span><span class="params">()</span></span>;   <span class="comment">//设置 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getMonth</span><span class="params">()</span></span>;     <span class="comment">//获取</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printDate</span><span class="params">()</span> <span class="type">const</span></span>;  <span class="comment">//打印日期 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> year,month,day;</span><br><span class="line">&#125;;</span><br><span class="line">myDate::<span class="built_in">myDate</span>()&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =<span class="number">1970</span>,month = <span class="number">1</span>,day = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">myDate::<span class="built_in">myDate</span>(<span class="type">int</span> y,<span class="type">int</span> m,<span class="type">int</span> d)&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =y,month =m,day = d;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">myDate::setDate</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> m ,<span class="type">int</span> d)</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =y,month =m,day = d;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myDate::setDate</span><span class="params">(myDate oneD)</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =oneD.year =oneD.month,day = oneD.day;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> <span class="function">myDate <span class="title">myDate::getDate</span><span class="params">()</span></span>&#123;    <span class="comment">// 获取日期 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">myDate::getMonth</span><span class="params">()</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line"><span class="keyword">return</span> month;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myDate::printDate</span><span class="params">()</span> <span class="type">const</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">cout&lt;&lt;year&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;month&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;day;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setStudent</span><span class="params">(string,myDate)</span></span>; <span class="comment">// 设置学生信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string)</span></span>; <span class="comment">// 设置学生姓名</span></span><br><span class="line"><span class="function">string <span class="title">getName</span><span class="params">()</span></span>; <span class="comment">// 获取学生姓名</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setBirthday</span><span class="params">(myDate)</span></span>; <span class="comment">// 设置学生生日 </span></span><br><span class="line"><span class="function">myDate <span class="title">getBirthday</span><span class="params">()</span></span>; <span class="comment">// 获取学生生日</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent</span><span class="params">()</span> <span class="type">const</span></span>; <span class="comment">// 设置学生生日 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line">myDate birthday;</span><br><span class="line"> </span><br><span class="line">&#125; ;<span class="comment">//string 系统定义好的类，myDate前面定义好的类 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setStudent</span><span class="params">(string s,myDate d)</span> </span>&#123;  <span class="comment">// 设置学生信息</span></span><br><span class="line">name = s;</span><br><span class="line">birthday.<span class="built_in">setDate</span>(d);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setName</span><span class="params">(string n )</span></span>&#123;  <span class="comment">// 设置学生姓名</span></span><br><span class="line">name = n;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Student::getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setBirthday</span><span class="params">(myDate d)</span></span>&#123;</span><br><span class="line">birthday.<span class="built_in">setDate</span>(d);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">// 设置学生生日 </span></span><br><span class="line"><span class="function">myDate <span class="title">Student::getBirthday</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> birthday;</span><br><span class="line">&#125;; <span class="comment">// 获取学生生日</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::printStudent</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;姓名&quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;生日&quot;</span>; </span><br><span class="line">birthday.<span class="built_in">printDate</span>();<span class="comment">//调用myDate的成员函数</span></span><br><span class="line">cout&lt;&lt;endl; </span><br><span class="line">&#125;; <span class="comment">// 设置学生生日 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Student ss;</span><br><span class="line"><span class="type">int</span> y,m,d;</span><br><span class="line">    string name_;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入学生的姓名生日，生日以年月日的次序输入；&quot;</span>;</span><br><span class="line">cin&gt;&gt;name_&gt;&gt;y&gt;&gt;m&gt;&gt;d;</span><br><span class="line">ss.<span class="built_in">setStudent</span>(name_,<span class="built_in">myDate</span>(y,m,d));<span class="comment">//调用成员函数</span></span><br><span class="line">ss.<span class="built_in">printStudent</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="类的示例剖析-2"><p>请输入学生的姓名生日，生日以年月日的次序输入；小明 2000 3 14<br>姓名小明生日3/1/14</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><br><details class="folding-tag" orange><summary> 使用引用方式驱动程序 </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Student ss;</span><br><span class="line"><span class="type">int</span> y,m,d;</span><br><span class="line">    string name_;</span><br><span class="line">    Student &amp;sy = ss; <span class="comment">//对象的引用 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入学生的姓名生日，生日以年月日的次序输入；&quot;</span>;</span><br><span class="line">cin&gt;&gt;name_&gt;&gt;y&gt;&gt;m&gt;&gt;d;</span><br><span class="line">sy.<span class="built_in">setStudent</span>(name_,<span class="built_in">myDate</span>(y,m,d));<span class="comment">//调用成员函数</span></span><br><span class="line">sy.<span class="built_in">printStudent</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details></p><h3 id="标识符的作用域"><a href="#标识符的作用域" class="headerlink" title="标识符的作用域"></a>标识符的作用域</h3><p>1.<span class='p red'>函数原型作用域：</span>在声明函数原型时形参的作用范围就是函数原型的作用域，也是c++中最小的作用域。<br><span class='p red center large'>例：double area(double r)</span><br><span class='p center'>r 的作用范围就在函数area形参列表的左右括号之间。</span><br>2.<span class='p red'>局部作用域：</span>只在程序块内有效。<br>3.<span class='p red'>类作用域：</span>在类X成员函数中可以直接使用成员m;在类外通过x.m、<code>X::m</code>或者ptr-&gt;m ,ptr为指向该类的指针。<br>4.<span class='p red'>命名空间的作用域：</span>用于消除各大模块之间同名引起的歧义。<u>在命名空间内部可以直接引用当前命名空间中声明的标识符，如需要引用其他空间命名的标识符使用以下格式：</u><br> <span class='p red center'>命名空间::标识符</span></p><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>1.<span class='p red'>使用构造函数创建指针</span>：myDate *pd = new myDate();使用<span class='p red'>new创建对象</span>,下面两种都是合法的：<br><span class='p center smaller'>myDate *pd = new myDate()</span><br><span class='p center smaller'>myDate *pd = new myDate</span><br>1）<span class='p red'></span>用户定义了构造函数，都会调用构造函数进行初始化。<br>2）<span class='p red'></span>用户未定义构造函数，<emp>对带括号的情况</emp>，系统在成员变量分配内存的同时，将其初始化为0; <emp>不加括时</emp>，系统只为成员变量分配内存空间，成员变量的分配空间是<wavy>随机值</wavy><br>2.<span class='p red'>复制构造函数</span>：<br>1）使用一个已存在的对象去初始化另一个正在创建的对象<br>2）复制构造函数的原型为：<br>类名::类名(类名<code>&amp;</code>)  // <code>对象的引用作为形参</code><br><span class='p center'>或类名::类名(`const`类名` &`) //为了不改变原型对象，使用`const限制`</span><br><details class="folding-tag" orange><summary> 复制构造函数示例 </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Student</span>();  <span class="comment">//在类中声明构造函数的</span></span><br><span class="line"><span class="built_in">Student</span>(<span class="type">const</span> Student &amp;s);  <span class="comment">//在类中声明复制构造函数的原型</span></span><br><span class="line"></span><br><span class="line">Student:: <span class="built_in">Student</span>(<span class="type">const</span> Student &amp;s)&#123;<span class="comment">//复制构造函数的函数体</span></span><br><span class="line">name = <span class="string">&quot;copy&quot;</span>+s.name;</span><br><span class="line">birthday = s.birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Student stud;<span class="comment">//定义对象stud,并调用构造函数</span></span><br><span class="line"> <span class="function">Student <span class="title">stud2</span><span class="params">(stud)</span></span>; <span class="comment">//定义对象stud2并调用复制构造函数初始化</span></span><br><span class="line"> Student ss[<span class="number">3</span>]&#123;<span class="built_in">Student</span>(),stud,<span class="built_in">Student</span>(stu)&#125;&#125;; <span class="comment">//ss[0]调用构造函数，ss[1]与ss[2]调用复制构造函数初始化</span></span><br></pre></td></tr></table></figure>              </div>            </details></p><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><h4 id="在对象消失时，释放由构造函数分配的内存"><a href="#在对象消失时，释放由构造函数分配的内存" class="headerlink" title="在对象消失时，释放由构造函数分配的内存"></a><span class='p red'>作用：</span>在对象消失时，释放由构造函数分配的内存</h4><p>在类体中的声明形式：<code>~类名（）</code>;<br>定义形式：<code>类名::~类名（）&#123; &#125;</code><br><span class='p red'>注意：</span></p><ol><li>在<code>类</code>中只能定义<code>一个析构函数</code>且不能指定<code>参数</code>，并对象生存周期结束时，系统自定调用。</li><li>系统会自动生成空的析构函数,使用<code>new运算符</code>动态分配了内存空间，则在析构函数中应该使用<code>delete</code>释放掉这部分空间。</li><li>系统会按照<code>后创建先析构</code>的顺序，可以使用delete调用析构函数改变顺序。</li></ol><details class="folding-tag" orange><summary> 析构造函数示例 </summary>              <div class='content'>              <!-- tab  源码--><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myDate</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">myDate</span>();        <span class="comment">//构造函数 </span></span><br><span class="line">~<span class="built_in">myDate</span>();  <span class="comment">//析构函数 </span></span><br><span class="line"><span class="built_in">myDate</span>(<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>);    <span class="comment">//带参数的构造函数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setDate</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>)</span></span>;   <span class="comment">//设置 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setDate</span><span class="params">(myDate)</span></span>;  <span class="comment">//设置 </span></span><br><span class="line"><span class="function">myDate <span class="title">getDate</span><span class="params">()</span></span>;  <span class="comment">//获取 日期 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setYrar</span><span class="params">()</span></span>;   <span class="comment">//设置 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getMonth</span><span class="params">()</span></span>;     <span class="comment">//获取</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printDate</span><span class="params">()</span> <span class="type">const</span></span>;  <span class="comment">//打印日期 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> year,month,day;</span><br><span class="line">&#125;;</span><br><span class="line">myDate::<span class="built_in">myDate</span>()&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =<span class="number">1970</span>,month = <span class="number">1</span>,day = <span class="number">1</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;myDate构造函数1 &quot;</span>&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">myDate::~<span class="built_in">myDate</span>()&#123;    <span class="comment">// 析构函数 </span></span><br><span class="line"> </span><br><span class="line">cout&lt;&lt;<span class="string">&quot;myDate析构函数1 &quot;</span>&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">myDate::<span class="built_in">myDate</span>(<span class="type">int</span> y,<span class="type">int</span> m,<span class="type">int</span> d)&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =y,month =m,day = d;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">myDate::setDate</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> m ,<span class="type">int</span> d)</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =y,month =m,day = d;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myDate::setDate</span><span class="params">(myDate oneD)</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">year =oneD.year =oneD.month,day = oneD.day;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> <span class="function">myDate <span class="title">myDate::getDate</span><span class="params">()</span></span>&#123;    <span class="comment">// 获取日期 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">myDate::getMonth</span><span class="params">()</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line"><span class="keyword">return</span> month;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myDate::printDate</span><span class="params">()</span> <span class="type">const</span></span>&#123;    <span class="comment">// 构造函数 </span></span><br><span class="line">cout&lt;&lt;year&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;month&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;day;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>();</span><br><span class="line">~<span class="built_in">Student</span>();</span><br><span class="line"><span class="built_in">Student</span>(<span class="type">const</span> Student &amp;s);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setStudent</span><span class="params">(string,myDate)</span></span>; <span class="comment">// 设置学生信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string)</span></span>; <span class="comment">// 设置学生姓名</span></span><br><span class="line"><span class="function">string <span class="title">getName</span><span class="params">()</span></span>; <span class="comment">// 获取学生姓名</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setBirthday</span><span class="params">(myDate)</span></span>; <span class="comment">// 设置学生生日 </span></span><br><span class="line"><span class="function">myDate <span class="title">getBirthday</span><span class="params">()</span></span>; <span class="comment">// 获取学生生日</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent</span><span class="params">()</span> <span class="type">const</span></span>; <span class="comment">// 设置学生生日 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line">myDate birthday;</span><br><span class="line"> </span><br><span class="line">&#125; ;<span class="comment">//string 系统定义好的类，myDate前面定义好的类 </span></span><br><span class="line">Student::<span class="built_in">Student</span>():<span class="built_in">name</span>(<span class="string">&quot;Noname&quot;</span>),<span class="built_in">birthday</span>(<span class="built_in">myDate</span>())&#123;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Student构造函数2 &quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Student::~<span class="built_in">Student</span>()&#123;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Student析构函数2 &quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="type">const</span> Student &amp;s)&#123;</span><br><span class="line">name = <span class="string">&quot;copy&quot;</span> + s.name; </span><br><span class="line">birthday = s.birthday;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Student复制构造函数2 &quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setStudent</span><span class="params">(string s,myDate d)</span> </span>&#123;  <span class="comment">// 设置学生信息</span></span><br><span class="line">name = s;</span><br><span class="line">birthday.<span class="built_in">setDate</span>(d);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setName</span><span class="params">(string n )</span></span>&#123;  <span class="comment">// 设置学生姓名</span></span><br><span class="line">name = n;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Student::getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::setBirthday</span><span class="params">(myDate d)</span></span>&#123;</span><br><span class="line">birthday.<span class="built_in">setDate</span>(d);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">// 设置学生生日 </span></span><br><span class="line"></span><br><span class="line"><span class="function">myDate <span class="title">Student::getBirthday</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> birthday;</span><br><span class="line">&#125;; <span class="comment">// 获取学生生日</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::printStudent</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;姓名  &quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;  生日&quot;</span>; </span><br><span class="line">birthday.<span class="built_in">printDate</span>();<span class="comment">//调用myDate的成员函数</span></span><br><span class="line">cout&lt;&lt;endl; </span><br><span class="line">&#125;; <span class="comment">// 设置学生生日 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Student stud;</span><br><span class="line">stud.<span class="built_in">printStudent</span>(); <span class="comment">//输出默认值 </span></span><br><span class="line">Student sy[<span class="number">2</span>] = &#123;<span class="built_in">Student</span>(),stud&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">sy[i].<span class="built_in">printStudent</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><!-- endtab --><!-- tab 运行结果--><p>myDate构造函数1<br>Student构造函数2<br>姓名  Noname  生日1970/1/1<br>myDate构造函数1<br>Student构造函数2<br>myDate构造函数1<br>Student复制构造函数2<br>姓名  Noname  生日1970/1/1<br>姓名  copyNoname  生日1970/1/1<br>Student析构函数2<br>myDate析构函数1<br>Student析构函数2<br>myDate析构函数1<br>Student析构函数2<br>myDate析构函数1<br><!-- endtab --></p>              </div>            </details><p><code>注意：</code><br>在构造函数中初始化对象的变量：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student::<span class="built_in">Student</span>():<span class="built_in">name</span>(<span class="string">&quot;Noname&quot;</span>),<span class="built_in">birthday</span>(<span class="built_in">myDate</span>())&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h3><ol><li><span class='p red'>静态全局变量：</span>static修饰的、在所有花括号之外声明的变量，<code>其作用范围全局可见，整个项目内有效</code></li><li><span class='p red'>静态局部变量：</span>static修饰的、在块内定义的，<code>其作用范围从定义之处开始到本块结束为止</code></li><li>静态变量均存储在全局数据区，只初始化一次，如果未初始化系默认初始为0；</li><li>类的静态成员有两种：静态成员变量与静态成员函数，</li><li><code>静态成员变量不能在类体内赋值，应该在类外进行初始化</code>，给静态成员变量赋初始值格式如下：<br>类型  类名:: 静态成员变量 = 初值;//<code>不能有static</code></li><li>在类体外定义成员函数时，前面不能加<code>static</code></li><li>类的静态成员，被类的所有对象<code>共享</code><h4 id=""><a href="#" class="headerlink" title=""></a><span class='p orange'>注意：</span></h4>静态成员函数<code>不可以调用非静态成员</code></li></ol><blockquote><p>访问静态成员的一般格式：</p><blockquote><blockquote><p>类名:: 静态成员名<br>对象名 · 静态成员名<br>对象指针-&gt;静态成员名  </p></blockquote></blockquote><p>静态成员函数与一般成员函数的不同</p><blockquote><p>1)可以不指向某个具体对象，只与类名连用<br>2)在没有建立对向前，静态成员就已经存在；<br>3)静态成员是类的成员，不是对象的成员；<br>4)静态成员为该类的所有对象共享，他们被存储在一个公共区域<br>5) <code>没有this指着</code>，只能通过对象名或指向对象的指针访问类的数据成员<br>6)静态成员函数<code>不能被说明为虚函数</code><br>7)静态成员函数<code>不能直接访问非静态函数</code></p></blockquote></blockquote><details class="folding-tag" green><summary> 静态成员变量示例 </summary>              <div class='content'>              <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="type">static</span> <span class="type">int</span> glos = <span class="number">100</span>;<span class="comment">//静态全局变量 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>; <span class="comment">// 局部自动变量 </span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> fs = <span class="number">1</span>;<span class="comment">// 静态局部变量 fs, 完成初始化</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;在f中：a（自动） = &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;  fs(静态) = &quot;</span>&lt;&lt;fs&lt;&lt;<span class="string">&quot;  glos(静态) = &quot;</span>&lt;&lt;glos&lt;&lt;endl;</span><br><span class="line">a +=<span class="number">2</span>;fs += <span class="number">2</span>;glos +=<span class="number">10</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;在f中：a（自动） = &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;  fs(静态) = &quot;</span>&lt;&lt;fs&lt;&lt;<span class="string">&quot;  glos(静态) = &quot;</span>&lt;&lt;glos&lt;&lt;endl; </span><br><span class="line"><span class="comment">//cout &lt;&lt;&quot;ms = &quot;&lt;&lt; ms&lt;&lt;endl;该航错误，变量ms不可见 </span></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> ms =<span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt;=<span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;ms = &quot;</span>&lt;&lt; ms&lt;&lt;endl; <span class="comment">//输出10 </span></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;glos = &quot;</span>&lt;&lt;glos&lt;&lt;endl;<span class="comment">//输出130 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;nihao&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 静态成员函数示例 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">classA</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">double</span> x,y;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> num;<span class="comment">//类的共有静态成员变量，供所有对象共享；  </span></span><br><span class="line"><span class="comment">//此处用于记录 通过构造函数已生成的对象个数</span></span><br><span class="line"><span class="built_in">classA</span>()&#123;  <span class="comment">//构造函数 </span></span><br><span class="line">x = <span class="number">0</span>; y = <span class="number">0</span>;</span><br><span class="line">num++;<span class="comment">//每生成一个对象，num加 1 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">classA</span>(<span class="type">double</span> x0,<span class="type">double</span> y0)&#123;  <span class="comment">//构造函数 </span></span><br><span class="line">x = x0; y = y0;</span><br><span class="line">num++;<span class="comment">//每生成一个对象，num加 1 </span></span><br><span class="line">   &#125; </span><br><span class="line">   <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">staticFun</span><span class="params">()</span></span>&#123;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;调用静态函数current_num = &quot;</span>&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">   <span class="comment">//cout&lt;&lt;&quot;x = &quot;&lt;&lt;x&lt;&lt;endl;  </span></span><br><span class="line"> <span class="comment">//错误，在静态函数中不能访问非静态变量。 </span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="type">int</span> classA ::num = <span class="number">0</span>; <span class="comment">//必须在类体外初始化静态成员变量 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">classA <span class="title">obj</span><span class="params">(<span class="number">1.2</span>,<span class="number">3.4</span>)</span>,*p</span>;  <span class="comment">//调用以构造函数</span></span><br><span class="line"><span class="comment">//第一次调用 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;classA::num = &quot;</span>&lt;&lt;classA::num &lt;&lt;endl; <span class="comment">//使用类名做限定符</span></span><br><span class="line">classA::<span class="built_in">staticFun</span>() ;<span class="comment">//调用函数</span></span><br><span class="line"><span class="comment">//第二次调用 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;obj.num &quot;</span>&lt;&lt;obj.num&lt;&lt;endl; <span class="comment">//使用对象名做限定符</span></span><br><span class="line">obj.<span class="built_in">staticFun</span>();</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">classA A[<span class="number">3</span>]; <span class="comment">//调用三次构造函数</span></span><br><span class="line"><span class="comment">//调用后结果 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;classA::num = &quot;</span>&lt;&lt;classA::num&lt;&lt;endl;</span><br><span class="line">classA::<span class="built_in">staticFun</span>() ;<span class="comment">//调用函数</span></span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">p = <span class="keyword">new</span> <span class="built_in">classA</span>(<span class="number">5.6</span>,<span class="number">7.8</span>) ;<span class="comment">//调用一次构造函数</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;classA::num &quot;</span>&lt;&lt;classA::num &lt;&lt;endl;</span><br><span class="line">classA::<span class="built_in">staticFun</span>() ;<span class="comment">//调用函数</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p-&gt;num &quot;</span>&lt;&lt;p-&gt;num &lt;&lt;endl;</span><br><span class="line">p-&gt;<span class="built_in">staticFun</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>classA::num = 1<br>调用静态函数current_num = 1<br>obj.num 1<br>调用静态函数current_num = 1</p><p>classA::num = 4<br>调用静态函数current_num = 4</p><p>classA::num 5<br>调用静态函数current_num = 5<br>p-&gt;num 5<br>调用静态函数current_num = 5</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h3 id="变量及对象的生存期和作用域"><a href="#变量及对象的生存期和作用域" class="headerlink" title="变量及对象的生存期和作用域"></a>变量及对象的生存期和作用域</h3><p>生存期：是指所占据内存空间由分配到释放的时期。<br>作用域：仅仅在定义的代码块内有效。</p><h3 id="常量成员和常量引用成员"><a href="#常量成员和常量引用成员" class="headerlink" title="常量成员和常量引用成员"></a>常量成员和常量引用成员</h3><p>1、 类的常量成员变量  </p><blockquote><p>定义<code>类的常量成员</code>变量的一般格式：</p><blockquote><p>const  数据不类型  <code>类常量成员变量</code> =  表达式  </p></blockquote><p><code>类常量成员变量</code>必须进行初始化，而且只能通过构造函数的成员初始化列表方式进行。  </p></blockquote><p>2、 类的常量对象</p><blockquote><p>类的常量对象必须在<code>声明的同时进行初始化，而且不能被更新。</code>定义常量对象的格式：</p><blockquote><p>const 类名 对象名（参数表）;或<br>类名 const 对象名（参数表）;</p></blockquote></blockquote><p>例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">myDate <span class="type">const</span> <span class="title">al</span><span class="params">(<span class="number">1997</span>,<span class="number">12</span>,<span class="number">20</span>)</span></span>; <span class="comment">//定义myDate类常量对象al 并初始化</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>常量对象</code>只能调用<code>常量成员函数</code>不能调用非常量成员函数，不同对象可以调用所有成员你函数<br><details class="folding-tag" green><summary> 常量成员函数与普通成员函数 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sample</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Sample</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getVlue</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//常量成员函数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getVlue</span><span class="params">()</span> </span>;<span class="comment">//非常量成员函数 （同名） </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">priVlue</span><span class="params">()</span> </span>;<span class="comment">//非常量成员函数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">priVcon</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">//常量成员函数 </span></span><br><span class="line">&#125;;</span><br><span class="line">Sample::<span class="built_in">Sample</span>() &#123;&#125;;<span class="comment">//构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sample::getVlue</span><span class="params">()</span> <span class="type">const</span> <span class="comment">//常量成员函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;常量成员函数&quot;</span> &lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sample::getVlue</span><span class="params">()</span>  <span class="comment">//非常量成员函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;非常量成员函数&quot;</span> &lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sample::priVlue</span><span class="params">()</span>  <span class="comment">//非常量成员函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;非常量成员函数priVlue()&quot;</span> &lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sample::priVcon</span><span class="params">()</span> <span class="type">const</span> <span class="comment">//常量成员函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;常量成员函数priVcon()&quot;</span> &lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Sample o;</span><br><span class="line"><span class="type">const</span> Sample cono; </span><br><span class="line">cout&lt;&lt;<span class="string">&quot;cono\t&quot;</span>;</span><br><span class="line">cono.<span class="built_in">getVlue</span>();<span class="comment">//通过常量对象只能，调动常量函数</span></span><br><span class="line"><span class="comment">//cono.priVlue() ;  //错误！不能调用非常量成员函数 </span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;o\t&quot;</span>;</span><br><span class="line">o.<span class="built_in">getVlue</span>();  <span class="comment">//“同名”情况下，系统自动调用区别用</span></span><br><span class="line"> </span><br><span class="line">cout&lt;&lt;<span class="string">&quot;o\t&quot;</span>;</span><br><span class="line">o.<span class="built_in">priVlue</span>(); <span class="comment">//调用普通函数</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;o\t&quot;</span>;</span><br><span class="line">o.<span class="built_in">priVcon</span>();  <span class="comment">//调用常量成员函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>cono    常量成员函数<br>o       非常量成员函数<br>o       非常量成员函数priVlue()<br>o       常量成员函数priVcon()</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details></p></blockquote><p>3、常量函数</p><blockquote><p>在类体内定义常量函数格式：</p><blockquote><p>类型标识符  函数名  （参数列表） const{….//函数体}</p></blockquote><p>在类体内声明，体外定义格式：</p><blockquote><p>声明形式： 类型标识符  函数名  （参数列表）const;<br>定义形式： 类型标识符  类名：：函数名（参数列表） const;<br>{….//函数体}  </p></blockquote></blockquote><p>4、常引用作为函数参数<br>&ensp;&ensp;使用引用作为函数参数，传送的是地址，所以形参改变，则实参也跟着改变，但如果不希望函数改变对象的值，就要使用<code>常引用</code>作为参数，<br>例如：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">(<span class="type">const</span> <span class="type">double</span>&amp; r)</span></span>&#123;cout&lt;&lt;r&lt;&lt;endl&#125; <span class="comment">//Display是能使用而不能改变r所引用的对象。</span></span><br></pre></td></tr></table></figure></p><details class="folding-tag" green><summary> 常量成员变量及常量成员函数的使用 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">constClass</span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> conMbr;<span class="comment">//类中常量成员变量</span></span><br><span class="line"><span class="type">int</span> Mbr;<span class="comment">//普通成员变量</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"><span class="built_in">constClass</span>():<span class="built_in">conMbr</span>(<span class="number">0</span>),<span class="built_in">Mbr</span>(<span class="number">100</span>)&#123;</span><br><span class="line">&#125;<span class="comment">//类中定义的const成员变量必须在构造函数的初始化列表中进行初始化</span></span><br><span class="line"><span class="built_in">constClass</span>(<span class="type">int</span> i):<span class="built_in">conMbr</span>(i)&#123;</span><br><span class="line">Mbr = <span class="number">200</span> ; <span class="comment">//初始化列表处给出初值 </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printConst</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;conMbr = &quot;</span>&lt;&lt;conMbr&lt;&lt;<span class="string">&quot;,Mbr = &quot;</span>&lt;&lt;Mbr&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getConst</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;调用非常量函数&quot;</span>&lt;&lt;endl; </span><br><span class="line"><span class="keyword">return</span> conMbr; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getConst</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;调用常量函数&quot;</span>&lt;&lt;endl; </span><br><span class="line"><span class="keyword">return</span> conMbr; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">; </span><br><span class="line"><span class="keyword">return</span> Mbr; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processConst</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;在processConst函数中非常量-- &quot;</span>&lt;&lt;endl; </span><br><span class="line"><span class="type">int</span> x = <span class="number">2</span>*conMbr +<span class="number">1</span>;<span class="comment">//可以读取conMBR </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;x = 2*conMbr +1 = &quot;</span>&lt;&lt;x&lt;&lt;endl; </span><br><span class="line"><span class="comment">//conMbr++;//错误！不能更改常量成员变量conMbr的值</span></span><br><span class="line">Mbr++;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Mbr = &quot;</span>&lt;&lt;Mbr&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processConst</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;在processConst函数中非常量-- &quot;</span>&lt;&lt;endl; </span><br><span class="line"><span class="type">int</span> x = conMbr +<span class="number">1</span>;<span class="comment">//可以读取conMBR </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;x = conMbr +1 = &quot;</span>&lt;&lt;x&lt;&lt;endl; </span><br><span class="line"><span class="comment">//conMbr++;//错误！不能更改常量成员变量conMbr的值</span></span><br><span class="line"><span class="comment">//Mbr++;  //错误！也不能更改非常量成员变量 Mbr的值 </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Mbr = &quot;</span>&lt;&lt;Mbr&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">constClass <span class="title">ob1</span><span class="params">(<span class="number">123</span>)</span>,ob2</span>;</span><br><span class="line"><span class="comment">//定义普通对象 ob1=&#123;123,200&#125;,ob2=&#123;0,100&#125; </span></span><br><span class="line">ob1.<span class="built_in">printConst</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;ob2.getConst() = &quot;</span>&lt;&lt;ob2.<span class="built_in">getConst</span>()&lt;&lt;endl; </span><br><span class="line"></span><br><span class="line"><span class="comment">//普通对象系统自动调用非常量函数</span></span><br><span class="line"></span><br><span class="line">ob2.<span class="built_in">processConst</span>() ;</span><br><span class="line"><span class="function"><span class="type">const</span> constClass <span class="title">ob3</span><span class="params">(<span class="number">20</span>)</span></span>;<span class="comment">//定义常量对象ob =&#123;20,200 &#125; </span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;ob3.getConst() = &quot;</span>&lt;&lt;ob3.<span class="built_in">getConst</span>() &lt;&lt;endl;</span><br><span class="line">ob3.<span class="built_in">processConst</span>();</span><br><span class="line"><span class="comment">//常量对象系统自动调用常量函数 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>conMbr = 123,Mbr200<br>调用非常量函数<br>ob2.getConst() = 0<br>在processConst函数中非常量—<br>x = 2*conMbr +1 = 1<br>Mbr = 101<br>调用常量函数<br>ob3.getConst() = 20<br>在processConst函数中非常量—<br>x = conMbr +1 = 21<br>Mbr = 200</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><details class="folding-tag" green><summary> 常引用型成员变量 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> fvalue = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CDemo</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> num; <span class="comment">//常量型成员变量 </span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp;ref;<span class="comment">//常引用型成员变量 </span></span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CDemo</span>(<span class="type">int</span> n):<span class="built_in">num</span>(n),<span class="built_in">ref</span>(value),<span class="built_in">value</span>(<span class="number">4</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//常引用型成员变量也必须在 构造函数的初始化列表中进行初始化 </span></span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">sizeof</span>(CDemo) &lt;&lt;endl;</span><br><span class="line"><span class="comment">//输出 CDemo对象的长度24（整形站8个字节）</span></span><br><span class="line"><span class="function">CDemo <span class="title">f</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="comment">//定义对象f  ，初始化f&#123;100,4,4&#125;</span></span><br><span class="line"><span class="comment">//f.ref = f.value; //错误！在程序中不能修改这个引用</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;f.num= &quot;</span>&lt;&lt;f.num &lt;&lt;<span class="string">&quot;\t f.ref =&quot;</span></span><br><span class="line">&lt;&lt;f.ref&lt;&lt;<span class="string">&quot;\t f.value =&quot;</span>&lt;&lt;f.value&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>24<br>f.num= 100       f.ref =4        f.value =4</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h3 id="成员对象和封闭类"><a href="#成员对象和封闭类" class="headerlink" title="成员对象和封闭类"></a>成员对象和封闭类</h3><p>1、在<code>定义封闭类的构造函数</code>时，需要添加<code>初始化列表</code>指明要调用成员对象的那个构造函数。  </p><blockquote><p>在封闭类构造函数中添加初始化列表格式：</p><blockquote><p>封闭类名::构造函数名 （参数表）:成员变量1（参数表）, 成员变量2 （参数表）····{····}</p></blockquote></blockquote><p>例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student::<span class="built_in">Student</span>(string n):<span class="built_in">name</span>(n) ,<span class="built_in">birthday</span>(<span class="built_in">myDate</span>())&#123;&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：</p><blockquote><p>1) &ensp;<span class='p red'>执行封闭类的构造函数时，先执行成员对象的构造函数，然后再执行封闭类自己的构造函数。</span><br>2) &ensp;成员对象的构造函数的执行次序<code>与成员对象在类定义中的说明次序一致</code>,与在构造函数初始化列表中出现的次序无关<br>3) &ensp;;当封闭类消亡时<code>先执行封闭类的析构函数，然后再执行成员对象的析构函数</code>,<emp>析构函数先构造后析构</emp></p></blockquote></blockquote><details class="folding-tag" green><summary> 封闭类构造函数的初始化列表 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CTyre</span>&#123; <span class="comment">//轮胎类 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> radius; <span class="comment">//半径 </span></span><br><span class="line"><span class="type">int</span> width;<span class="comment">//宽度 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CTyre</span>():<span class="built_in">radius</span>(<span class="number">16</span>) ,<span class="built_in">width</span>(<span class="number">185</span>)&#123;</span><br><span class="line">&#125;<span class="comment">//定以构造函数 1</span></span><br><span class="line"><span class="built_in">CTyre</span>(<span class="type">int</span> r,<span class="type">int</span> w):<span class="built_in">radius</span>(r) ,<span class="built_in">width</span>(w)&#123;</span><br><span class="line">&#125;<span class="comment">//定以构造函数 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getRadius</span><span class="params">()</span><span class="comment">//获取半径 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> radius;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getWidth</span><span class="params">()</span><span class="comment">//获取宽度 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> width;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CCar</span> &#123;<span class="comment">//汽车类 封闭类 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> price; <span class="comment">//价格 </span></span><br><span class="line">CTyre tyre;<span class="comment">//成员对象 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CCar</span>();<span class="comment">//声明构造函数 3</span></span><br><span class="line"><span class="built_in">CCar</span>(<span class="type">int</span> p ,<span class="type">int</span> tr, <span class="type">int</span> tw);<span class="comment">//声明构造函数3 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123; <span class="comment">//获取价格 </span></span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">CTyre <span class="title">getCTyre</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//获取轮胎信息 </span></span><br><span class="line"><span class="keyword">return</span> tyre;</span><br><span class="line">&#125;</span><br><span class="line">&#125; ;</span><br><span class="line">CCar::<span class="built_in">CCar</span>()<span class="comment">//定义构造函数3 </span></span><br><span class="line">&#123;</span><br><span class="line">price = <span class="number">50010</span>;</span><br><span class="line"><span class="built_in">CTyre</span>();</span><br><span class="line">&#125; ;</span><br><span class="line">CCar::<span class="built_in">CCar</span>(<span class="type">int</span> p ,<span class="type">int</span> tr, <span class="type">int</span> tw):<span class="built_in">price</span>(p),<span class="built_in">tyre</span>(tr,tw)&#123;</span><br><span class="line">&#125;;<span class="comment">//定义构造函数，使用初始化列表 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">CCar <span class="title">car</span><span class="params">(<span class="number">48900</span>,<span class="number">17</span>,<span class="number">255</span>)</span> </span>;<span class="comment">//定义对象car并调用构造函数4初始化，</span></span><br><span class="line"><span class="comment">//需先执行构造函数2初始化轮胎信息，在继续执行构造函数3初始化价格</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\tprice= &quot;</span>&lt;&lt;car.<span class="built_in">getPrice</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\tgetRadius =  &quot;</span>&lt;&lt;car.<span class="built_in">getCTyre</span>().<span class="built_in">getRadius</span>()&lt;&lt;</span><br><span class="line"><span class="string">&quot;\tgetWidth =  &quot;</span>&lt;&lt;car.<span class="built_in">getCTyre</span>().<span class="built_in">getWidth</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><pre><code>      price= 48900    getRadius =  17 getWidth =  255</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><p>2、封闭类的复制构造函数</p><blockquote><p>如果封闭类的对象是用默认复制构造函数初始化，那么他包含的<code>成员对象也会用复制构造函数初始化</code></p></blockquote><details class="folding-tag" green><summary> 封闭类的复制构造函数 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;default&quot;</span>&lt;&lt;endl;<span class="comment">//构造函数 </span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">A</span>(A&amp;a)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;copy&quot;</span>&lt;&lt;endl;<span class="comment">//复制构造函数 </span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;<span class="comment">//封闭类 </span></span><br><span class="line">A a;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">B b1,<span class="built_in">b2</span>(b1);<span class="comment">//b1是类A构造函数初始化，b2是类A 复制构造函数初始化 </span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>default<br>copy</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>1、 友元机制是对类外一些函数打开的一个特殊通道，<code>授权他们能够访问本类的私有成员变量</code>。<br>2、 友元机制破坏了类的封装性和信息隐藏，但有助于<code>数据共享，能够提高程序的效率</code><br>3、 友元机制包括友元函数和友元类</p><blockquote><p>友元函数：</p><blockquote><p>在定义一个类的时候，可以把一些函数（包括<code>全局函数</code>和<code>其他类成员函数</code>）声明为“友元”，这样这些函数就成为了<code>友元函数</code></p></blockquote><p>类中声明友元函数的格式：</p><blockquote><p>friend 函数类型 函数名（参数表）； //<code>针对全局函数</code><br>friend 函数类型 函数所在类名::函数名（参数列表）;</p></blockquote><p>注意：</p><blockquote><p>友元函数可以在类中私有或公有部分通过关键字friend<code>声明或定义</code>，但如在类中声明，而在类外定义，就不能再在类外使用friend关键字。</p></blockquote><p>友元函数的优点</p><blockquote><ol><li>友元函数应被看做<code>类接口的一部分</code>，使用它的主要目的是提高效率，因为它可以直接访问对象的私有成员，从而省去调用类的相应成员函数开销。</li><li>类的设计者不必考虑好该类的各种使用情况之后再设计这个类，而是可以根据需要，通过用友元来增加类的接口。</li></ol></blockquote></blockquote><details class="folding-tag" green><summary> 友元函数声明 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span><span class="comment">//数学函数 </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pixel</span>;<span class="comment">//前向引用声明 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printX</span><span class="params">(Pixel p)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pixel</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Pixel</span>(<span class="type">int</span> x0,<span class="type">int</span> y0)<span class="comment">//定以构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">x = x0;y = y0; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Pixel:(&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">double</span> <span class="title">getDist</span><span class="params">(Pixel p1,Pixel p2)</span></span>;<span class="comment">//声明全局友元函数</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Test::printX</span><span class="params">(Pixel p)</span></span>;<span class="comment">//声明Text类成员函数为友元函数</span></span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Test::printX</span><span class="params">(Pixel p)</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p.x =&quot;</span>&lt;&lt;p.x&lt;&lt;<span class="string">&quot;\tp.y =&quot;</span>&lt;&lt;p.y&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getDist</span><span class="params">(Pixel p1,Pixel p2)</span><span class="comment">//友元函数在类外定义</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> xd = <span class="built_in">double</span>(p1.x -p2.x);<span class="comment">//友元函数使用pixel 类私有成员</span></span><br><span class="line"><span class="type">double</span> yd = <span class="built_in">double</span>(p1.y -p2.y);<span class="comment">//强制类型转换</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(xd*xd + yd*yd) ;<span class="comment">//计算两点之间距离 </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">Pixel <span class="title">p1</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>)</span> ,<span class="title">p2</span><span class="params">(<span class="number">10</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line">p1.<span class="built_in">printxy</span>();</span><br><span class="line">p2.<span class="built_in">printxy</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;(p1,p2)之间的距离  =&quot;</span>&lt;&lt;<span class="built_in">getDist</span>(p1,p2)&lt;&lt;endl;<span class="comment">//直接调用全局函数 </span></span><br><span class="line">Test t;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;从友元函数中输出----&quot;</span> &lt;&lt;endl;</span><br><span class="line">t.<span class="built_in">printX</span>(p1);<span class="comment">//通过对象调用类的成员函数 </span></span><br><span class="line">t.<span class="built_in">printX</span>(p2);<span class="comment">//通过对象调用类的成员函数 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>Pixel:(0,0)<br>Pixel:(10,10)<br>(p1,p2)之间的距离  =14.1421<br>从友元函数中输出——<br>p.x =0  p.y =0<br>p.x =10 p.y =10</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><blockquote><p>友元类</p><blockquote><p>如果将一个类B说明为另一个类A的友元类，则类B中的所有函数都是类A的友元函数<br>友元类的关系是单向的,且不可出传递<br>除非必要一般不使用友元类</p></blockquote><p>在类定义中声明友元类的格式</p><blockquote><p>friend clsaa 类名</p></blockquote></blockquote><details class="folding-tag" green><summary> 友元类示例 </summary>              <div class='content'>              <div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">示例源码</button></li><li class="tab"><button type="button" data-href="#示例-2">运行结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myComplex</span>&#123;<span class="comment">//复数类 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">double</span> real,imag;<span class="comment">//复数的实部，虚部</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">myComplex</span>();<span class="comment">//声明构造函数 </span></span><br><span class="line"><span class="built_in">myComplex</span>(<span class="type">double</span> r,<span class="type">double</span> i);</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">oper</span>;  <span class="comment">//定义友元类 .oper是myComplex的友元类且方向不可逆</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line">myComplex::<span class="built_in">myComplex</span>()&#123;</span><br><span class="line">real = <span class="number">0</span>; imag = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line">myComplex::<span class="built_in">myComplex</span>(<span class="type">double</span> r,<span class="type">double</span> i)&#123;</span><br><span class="line">real = r,imag = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">oper</span>&#123;</span><br><span class="line"><span class="comment">//声明成员函数，连个参数对象c1与c2相加 </span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">myComplex <span class="title">addCom</span><span class="params">(myComplex c1,myComplex c2)</span></span>;</span><br><span class="line"><span class="comment">//声明成员函数，输出参数对象c有关的数据 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">outCom</span><span class="params">(myComplex c)</span> </span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外定义函数 </span></span><br><span class="line"><span class="function">myComplex <span class="title">oper::addCom</span><span class="params">(myComplex c1,myComplex c2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myComplex</span>(c1.real+c2.real,c1.imag+c2.imag);</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">void</span> oper:: <span class="built_in">outCom</span>(myComplex c)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;c.real&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;c.imag&lt;&lt;<span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">myComplex <span class="title">c1</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span>,<span class="title">c2</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span>,res</span>;</span><br><span class="line">oper o;</span><br><span class="line">res = o.<span class="built_in">addCom</span>(c1,c2);<span class="comment">//通过oper操作myComplex成员函数</span></span><br><span class="line">o.<span class="built_in">outCom</span>(c1); </span><br><span class="line">cout&lt;&lt;<span class="string">&quot;+&quot;</span>;</span><br><span class="line">o.<span class="built_in">outCom</span>(c2); </span><br><span class="line">cout&lt;&lt;<span class="string">&quot;=&quot;</span>;</span><br><span class="line">o.<span class="built_in">outCom</span>(res); </span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><p>(1,2)+(3,4)=(4,6)</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h3 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h3><p>1、当一个承运函数被调用时，系统将自动向它传递一个<code>隐含参数</code>，该参数是一个指向调用该函数的对象指针，名为<code>this指针</code>，从而使成员函数知道该对那个对象进行操作。<br>2、使用this指针，保证了每个对象可以拥有自己的数据成员，但处理这些数据成员的代码却可以被所有的对象共享，从而提高了程序的安全性和效率。<br>3、this指针式实现封装的一种机制，它将对象和该对象调用的成员函数链接在一起，从而在外部看来，每个对象都拥有自己的成员函数。</p><blockquote><p>注意：</p><blockquote><p>除非形参的名字与成员变量的名相同。一般情况下都省略掉符号<code>this-&gt;</code>,而让系统进行默认</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七牛云图床</title>
      <link href="/posts/966f41d8.html"/>
      <url>/posts/966f41d8.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="57fe60c559a8e8fe2a126aad4b7916c11f5afd8d85d01fd13a84e65f66a9f478">7581020999ef8a5b4e658865f7f9f3c0d26bddbbb1ebfee70b42e8673f9ebc72e918f8e7ebff1bbb4d3d1a582067ba02101b28fdd2c3b7563bbaabda7c7e4f6b4bebfc5bcab088b3135d808c1e6a850d0a377d26b61b9a633eb5d5cbdc30276e167168e3203e94dfa91d7622ba6702bbdef35764a6a489371490f5f2486defb930c30e75cc3212961d405fcbf654d3100bb12ada28102dd565e2b056d0a252b9a23bba3b24bfd5e84eacc2b3eaf2e614801c227b5386a2c75bea0d89acc985aee3e1291386e44bce40f07e951de87808ca1e67ebf08f454e58f52219e37a976b1b6d36273e57650a2d539288f14bb689b846a5e117fc66a311ee219dddf98491c4e715d179166883fe78783f28cd2c1bdc91aafde80d017f36b10e803b8d6ef18d4938d7516e50ca8675e34e0bb488d854524313329218d6d1ca47769fbf8dc7087518c725ade31418b2d4788bf7072799adc542bf536ff6c476032219454d3e9d5a4af91a82385887f88c2223b5203b693678738614dcd7189cc3c437fdeb75a41c2929a6a3736bb08a1fba2f3f77f1bc17d5b3aaa6601fd97d9c06ed62e0ed80e3f3bd0a89e2586c91aafdf33e35e783c105d87d3e6a83b383d36bee2e098d57b916b364028d31e9d2b9558bb009d78b1fb2df6c0cc7b8473dd3acf46f2ee33a262a254d2a647806f5cdec5276171380862d4644ca1447b17f4246c5ccfabe14a20612c5129ca3c5b09e1543a12a58ac43a5c21aacdc6de8c2f329a9dc2ed21d468bcdae53c5f849de768131a83db766aae30f15f86b68c6c070731190bc3e4b867fe7cf59c32c9b2e827e70c58ae50317e1063b13f9b709e4df3e71cd6a789545979e5bd493d870d8a055904ee26cedfaff76af63cfad68f8453f8459c182873921d5c82b1d35136b3f55951acb8f56a089cd4c76b01be651fc9d74ca93a80529e22fcc934bdd9d303e49709e20f1e88bd38b3044dccd92822739e1664981413045366342c5fa292daac5b3e64ee9ddef8305411c8d8b2f646328ffc5580f431bcd6a03968585c55639474056e298c58b3067bbc36e749651f1246c12b1a47e54fd37ff5b7109b1eb77fe591c45cffbc80885ef16e78bcb266b4d80339f8b98bc2ca8e8fda5dec81fc51335adbbd305823591001005fa967d763ddd58f6f9b6b5e9c18240b8b44fffad5d75bd3e59e68bec7f0534e39ec0a552b8203d0f57bc13357a49afe1afb3d54c672e467a422aba25948f83f2d8c79b930455d6438b1cd10c1376e5e666c0d5d0219a37bcc31c719e584b03119ee876a1375b2469b4a5e9e1856a17d61789fea0759da21b53ad3a46f23b1b939501d1d78a9bf1775940e716451767085c238d3ec532eea45a6b6ea05b5497f7d47bde8b671aeafef37e67561c9320c6d8ca61c3416fb18123181c7d7b337551f7ab9f53973e50c4e57010b0e2d9cd57da485c8ff2f7b35d0a3209b4f3a51dcc0637413f502ca41739db3b0279d14207e0185c190c05fd508574a134008ac5211f07187e29533e70a2d6b7b12dbf0676d02cfaba090526e2d1bf2236daaf9535cf1fc7be66c2dd0c6c2233439d15f78ffbc3b06f7bcff6fdc86dbd3f08df260f138b965b914781ed192fbe47d016bcdce8dcc7bdf92f960352b8b0bc162c71c7746836dff6c9e6e1662f0725c5412dabc4d892f868276e010d4152159aa64f96878664c3772524b251bcc528b67d579c009ba6c7b6ae1e08a6488b2ee7c40f7e19a33735c87bb16c5e89ce39de0a42f8ad4ba89c1d418d8432a4aa6ae5c54001c9bca894b2284de77adf7b1a582525ec60e0d31415814facd48884cfc388e4b00daa9aef2f5411aa5867d153a93e8250eff9f0523a4e3ddceba60cac6d84d1e9d2483d9891056a6297bc5694400a4f47719e0e115e4e6f548cf1b37deb58817e88c9ea3611e7d9e2b2b9c953e2fdeb28de2d013e223da168153ec635182c47a7c8b62c52b9eaf720f0f8978fa738e75b4568d5583b7a2084f3d9ca494884d2adb68c2a2187913644f92dbffc965bb578ba6bc775671568fb7e1aa849b05958d5b1fb104bce93cbda680e63741b1e31c5e03754ac25b3a9ead46ca512e52d281c1f4c340133f2b411e03459689db61a3cd93457dc208eaad243627652b74b81545dc987463a2345de1351bb24caa18f0fa0d81f7d83544ef182d1c14ec661b576019515679899992b4100f8b36d724565485d87b313aff1962d33c39b31a3f33ab7a770a33d63cdf9858a1ee239570751e82748dff87de0850726052746ab69811e5ae745b1a4c2cb56357c05cac446c198d7f0500882b5616dad1c85e35ba6b5f2ee5230524b5f3fd42897043ab3029bba8a7770599a93ebcbbd0c25d728bac5d73cde7ba73094df7406018d195f8268b86ac76ba3fbf9d37d2c1cffd45c7a90317da3097edb0738b08a1ba9b97da707ad12e8cdf60de013c93a63249784291817eef1ff031e485cf66d46b794652577fac5d2c26e42ce87b5789624315d2ee5494149d06de2cfe1cfe85f0b0ea9ea5894a982ad69ae20b4ca8ee59bcd7c78b794e2b807af68ebf280124b0e04b11d606d6ca5f08e1b6cebcfd6a89c64326eb07bc23fcd4ef00bf0777dac1e00aec8459a309be961ecc08979fe6731a53e73c6be3a85071cdae87e0c215980b755c3de504711d26f7a5ff0dc7f99356f6d184f0492a228185b3935542d5638528ed4f6985b8664b535d1c86730ddfe7a6211fdf148579aebcce07a62a280dd4451124d85db631010927e313b6975a1dd28c61b07e0acc93dfca904924081ba7669ae86d2cd1c3b871530238786f5434038d6d19c389fedb1479a315bdbc2a9de9a0d4a0e5c459cded31cb0a7f97de9dc1c8873d752e5d0dc7d2e1263e7e4d8d6cfa7a30b4a5cb8a72d5e81fad60778e43f01f091f771d89007dd090d4b33a23c9c09e834f79ce35504386496d6bf83e03cdb91c23d0c0a3f57ab8de7f841ddea4a4c05d5b9af624352a536896864d851d8550bd104d6578edf67d17a62ca50c0f25e2639024ceede0546fa26965d002865099298a4d3ee212c9d6cf688c2cd1031e3ee0c122cc37d78ce6e82a43550e3271c72eb35d2d2e9af19c3c7d0ab1ebc048c1c07f58a1ea53c71898b05da06011c7a1664f895d80078d1e95fc4019b7ca364e391845771796db520ce048ee9868a1135f5b75be112dac7eb9ee8c5aeb5fa844bd7e05d8dd8f5c37e4885ca99d5706147b00d86a62c7a45a2873d39bd6095a3df770330efec3a01fd579071cab1c834b8681e2eb92ff41afc2fd78b5cd66c1c0db1f7ad1cb8dd8a5f0d61ba2393c781825fc903bb13b3d0109458982cab7b6df7c1b9d7dc0f5f1d1e12368569a6b10064aa2a91a037c5412ac075d60781e1d95606dba4be4ab5e917d0b1f232ea568701fca61b0f30c39c32bb8b30c75a5fa1f7a01daaba6305e6cdb990396820d78ec6f32ea893895457110efa29acc79253e2d3fdd3c36bac684c38ed589f3b8be5a9b33bcab682a8aa1b8afea040647b8764a375aae3e4b1b86d54cedae410cdc1ef79b999c8a4a0ff4bcc2a24e5a9bd18aa491084ab2a2988d2d92e95b18addf250028235e5367816bc953193dab2799a3c67839a9506736f689ccb3ee9b2b34b9b320d65ac8d860d5858c13d8b9d7ef47348aeb18b1f29d4d143825f7c5dbc4495a67e1f746560242c6aea573502d44ad950680a8d51afe654912df9f4282b843e8a2dfa0d20d245e456795814cd2898b2a228e08c25f1cbba7958e39cc052f815c24ebdc476a4e55e3f0869a058eb5e0f69772fc0fa11030bd901084443a794805c3740d22ebb039fcb3a2273445e292d0da396746e2a5e65553d05f95930c53769109f9a94aa562094b3bbf5015a7a7bf071d72faa254173d8e1205118d4fe138178a7f98308b8cb2ac0a0ea3cb1e1c3b52b2525e2631cb727</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 七牛云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置mysql</title>
      <link href="/posts/186a9432.html"/>
      <url>/posts/186a9432.html</url>
      
        <content type="html"><![CDATA[<p>简介：数据库：存储和管理数据的仓库，不同阶段的增、删改、查不同<br>测试阶段，直接编写sql语句增删改查。<br>分类：<br>关系数据库<br>非关系型数据库（MongoDB、Redie）<br>存储不需要永久保存的数据，定期清空，节约资源<br>在应用服务中，存储简单数据；列;验证码<br>为什么使用mysql<br>数据库的作用<br>实现客户端与服务端之间沟通的桥梁<br>MySQL：</p><ol><li>优点：<br>持久化存储<br>存取速度高<br>保证数据的有效性</li><li>特点<br>体积小<br>速度小<br>可跨平台（兼容性好）</li><li>属于解释<br>关系：二维表<br>属性：字段<br>元祖：行<br>DBA:数据库管理员（拥有最高管理权限）<br><a href="/posts/6480e0f0.html">查询sql语句</a><h2 id="mysql安装装"><a href="#mysql安装装" class="headerlink" title="mysql安装装"></a>mysql安装装</h2><h3 id="旧版本删除："><a href="#旧版本删除：" class="headerlink" title="旧版本删除："></a>旧版本删除：</h3></li><li>卸载旧版本</li><li>显示隐藏文件</li><li>删除C盘中<code>Programe FilesX86</code>、<code>Programe FilesX86</code>与<code>Programedata</code>文件夹的Mysql文件数据</li></ol><h3 id="新版本安装："><a href="#新版本安装：" class="headerlink" title="新版本安装："></a>新版本安装：</h3><ol><li>选择安装路径</li><li>选择custom，后大约5个连续下一步</li><li>默认选项语言，选择utf-8</li><li>本地服务端口号：3306</li><li>mysql密码：123456</li><li>配置环境变量：配置系统环境变量path下添加路径</li><li>cmd命令进入mysql</li><li>mysql -u root -p</li><li>密码：123456</li></ol><h2 id="naviCAT"><a href="#naviCAT" class="headerlink" title="naviCAT"></a>naviCAT</h2><h3 id="naviCAT安装与持久化使用"><a href="#naviCAT安装与持久化使用" class="headerlink" title="naviCAT安装与持久化使用"></a>naviCAT安装与持久化使用</h3><ol><li>解压安装naviCAT软件</li><li>关闭防火墙和杀毒软件手动调节持久破解使用</li></ol><h3 id="naviCAT使用"><a href="#naviCAT使用" class="headerlink" title="naviCAT使用"></a>naviCAT使用</h3><h4 id="链接mysql"><a href="#链接mysql" class="headerlink" title="链接mysql"></a>链接mysql</h4><p>连接服务器的mysql需要：</p><ol><li>服务器的IP地址</li><li>端口号以及密码</li><li>同局域网下关闭防火墙连接</li><li>配置环境变量，将mysql的bin路径配置到环境变量path路径下</li></ol><h4 id="命名规则与转储文件"><a href="#命名规则与转储文件" class="headerlink" title="命名规则与转储文件"></a>命名规则与转储文件</h4><ol><li>转储SQL文件，只有表结构和带数据的表结构</li><li>数据库命名规则：</li></ol><p>1)   数字、字母和下划线<br>2) 同一个连接不能重复<br>3)  库名只能是小写的，navicat会将大写数据库名转换为小写<br>4)  不能使用关键字，name、time、datetime、password<br>5) 见名知意</p><ol><li>表名的命名规则：</li></ol><p>类似与数据库命名规则<br>公司常用系统名<em>模块名</em>表名</p><h2 id="mysql的使用"><a href="#mysql的使用" class="headerlink" title="mysql的使用"></a>mysql的使用</h2><h3 id="四大约束"><a href="#四大约束" class="headerlink" title="四大约束"></a>四大约束</h3><ol><li><strong>主键约束 primary key</strong><br><strong>特点：</strong><br>1) <code>一张表内只允许有一个约束</code><br>2) 可以时<code>单一约束</code>也可以时<code>复核主键</code><br>3) <code>主键与业务无关</code>，修改数据不会修改主键<br>4) 一般设置id为主键约束<br>5) <code>一般设置自增</code></li><li><strong>唯一约束unique</strong><br><strong>特点：</strong><br>1) 值唯一<code>允许有一个null</code><br>2) 一张表允许有<code>多个唯一约束</code><br>3) 常见的唯一约束字段： 手机号、银行号</li><li><strong>非空约束not null</strong><br><strong>特点：</strong><br>1) 值不可不填，值<code>可重复</code><br>2) 一张表<code>允许有多个非空约束</code><br>3) 一般<code>会和默认值一起连用</code>，避免忘记填写而引发错误<br>4) 常见的非空约束名：用户名，密码名<br>5) 唯一约束unique、</li><li><strong>外键约束（主从关系</strong><br><strong>特点：</strong><br>1) 外键约束，删除从表字段时应<code>先删除从表再删除主表</code><br>2) 或者先去除外键约束，再删除主表</li></ol><h3 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h3><h4 id="数据定义——DDL"><a href="#数据定义——DDL" class="headerlink" title="数据定义——DDL"></a>数据定义——DDL</h4><h5 id="创建表："><a href="#创建表：" class="headerlink" title="创建表："></a>创建表：</h5><p>create table 表名（ 字段 ，属性 ，保留值）；<br><strong>创建单一约束表</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_info(  <span class="comment">--创建表语句</span></span><br><span class="line">user_id <span class="type">int</span> (<span class="number">11</span>) <span class="keyword">primary</span> key,<span class="comment">--设置为主键约束，值不相同，不为空</span></span><br><span class="line">user_name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">user_age <span class="type">int</span>(<span class="number">3</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><strong>创建复合主键表</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_info(  </span><br><span class="line">user_id <span class="type">int</span> (<span class="number">11</span>) ,</span><br><span class="line">user_name <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span>, <span class="comment">-- 默认值不为空</span></span><br><span class="line">user_age <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">default</span> <span class="string">&#x27;18&#x27;</span>,<span class="comment">-- 设置默认值</span></span><br><span class="line"><span class="keyword">primary</span> key(user_id,user_name) <span class="comment">-- 创建复核约束 ，复合约束的合不能相同，不为空</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><strong>创建唯一约束表</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_info(  </span><br><span class="line">user_id <span class="type">int</span> (<span class="number">11</span>) <span class="keyword">unique</span>,<span class="comment">-- 唯一约束，值唯一，可以为空，空的数量只能有一个</span></span><br><span class="line">user_name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">user_age <span class="type">int</span>(<span class="number">3</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><strong>自增：</strong>     <code>auto_increment</code><br><strong>每张表只允许一个自增列，切必须是主键</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_info(  <span class="comment">-- 创建表语句</span></span><br><span class="line">user_id <span class="type">int</span> (<span class="number">11</span>) <span class="keyword">primary</span> key auto_increment,<span class="comment">-- 自增，当插入数据没有给值，自增可以根据之前数据最大值+1自增</span></span><br><span class="line">（主键的值自增，其他的列不自增）</span><br><span class="line">user_name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">user_age <span class="type">int</span>(<span class="number">3</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><strong>备注 comment</strong><br>comment备注可在表结构中显示<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_info(  </span><br><span class="line">user_id <span class="type">int</span> (<span class="number">11</span>) comment <span class="string">&#x27;学号&#x27;</span>, <span class="comment">-- comemt备注</span></span><br><span class="line">user_name <span class="type">varchar</span>(<span class="number">30</span>) comment <span class="string">&#x27;姓名&#x27;</span> ,<span class="comment">-- 默认值不为空</span></span><br><span class="line">user_age <span class="type">int</span>(<span class="number">3</span>) comment <span class="string">&#x27;年龄&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><strong>综合表：</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c<span class="keyword">create</span> <span class="keyword">table</span> user_info(  </span><br><span class="line">user_id <span class="type">int</span> (<span class="number">11</span>) auto_increment comment <span class="string">&#x27;用户编号&#x27;</span>, <span class="comment">-- 设置自增</span></span><br><span class="line">user_name <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">unique</span> comment <span class="string">&#x27;用户姓名&#x27;</span> ,<span class="comment">-- 值唯一可以为空</span></span><br><span class="line">user_age <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">default</span> <span class="string">&#x27;18&#x27;</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户年龄&#x27;</span>,<span class="comment">-- 默认18，不为空，</span></span><br><span class="line"><span class="keyword">primary</span> key(user_id) <span class="comment">-- 设置约束</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;<span class="comment">--设置字符编码为utf8，设置存储引擎为InnoDB</span></span><br></pre></td></tr></table></figure></p><h5 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> user_info;  <span class="comment">--删除表语句</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> user_info; <span class="comment">-- 删除指定表</span></span><br></pre></td></tr></table></figure><h5 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h5><p><strong>查看全部表</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables; <span class="comment">-- 返回当前库中所有表</span></span><br></pre></td></tr></table></figure><br><strong>查看表结构</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> uesr_info; <span class="comment">-- 返回表结构</span></span><br></pre></td></tr></table></figure></p><p><strong>修改表名</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user_info rename user_info_2; <span class="comment">-- 重命名表的名字</span></span><br></pre></td></tr></table></figure><br><strong>修改字段名和数据类型</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user_info change <span class="keyword">column</span> user_id user_no <span class="type">int</span>; <span class="comment">-- 修改列信息</span></span><br><span class="line"> <span class="comment">-- 若仅想修改某一个值，那其他值保持原有值即可</span></span><br></pre></td></tr></table></figure><br><strong>仅修改字段数据类型</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user_info modify user_no <span class="type">int</span>; <span class="comment">-- 将user_info表中user_no字段类型设置为int</span></span><br></pre></td></tr></table></figure><br><strong>删除字段</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user_info <span class="keyword">drop</span> <span class="keyword">column</span> user_no; <span class="comment">-- 删除字段</span></span><br></pre></td></tr></table></figure><br><strong>新增字段</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user_info <span class="keyword">add</span> (</span><br><span class="line">         update_time datetime,</span><br><span class="line">         is_del <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span></span><br><span class="line">);<span class="comment">-- 添加字段</span></span><br></pre></td></tr></table></figure></p><h4 id="查询sql语句"><a href="#查询sql语句" class="headerlink" title="查询sql语句"></a><a href="/posts/6480e0f0.html">查询sql语句</a></h4><h4 id="数据操纵——DML"><a href="#数据操纵——DML" class="headerlink" title="数据操纵——DML"></a>数据操纵——DML</h4><h5 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a><strong>插入语句</strong></h5><p><strong>插入整条数据</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_info <span class="keyword">values</span>(<span class="number">100</span>, <span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>); </span><br><span class="line"><span class="comment">-- insert into user_info values(null, &#x27;张三&#x27;，18);  -- 自增时用null</span></span><br></pre></td></tr></table></figure><br><strong>批量整条数据</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_info <span class="keyword">values</span>(<span class="number">120</span>,<span class="string">&#x27;张五&#x27;</span>,<span class="number">18</span>),(<span class="number">103</span>,<span class="string">&#x27;张五&#x27;</span>,<span class="number">18</span>),(<span class="number">102</span>,<span class="string">&#x27;张五&#x27;</span>,<span class="number">18</span>),(<span class="number">104</span>,<span class="string">&#x27;张五&#x27;</span>,<span class="number">18</span>),(<span class="number">105</span>,<span class="string">&#x27;张五&#x27;</span>,<span class="number">18</span>),(<span class="number">106</span>,<span class="string">&#x27;张五&#x27;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><br><strong>在指定列插入数据</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_info(user_name,user_age)<span class="keyword">value</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="number">88</span>);<span class="comment">-- 在指定列加</span></span><br></pre></td></tr></table></figure><br><strong>批量指定列插入数据</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_info(user_name,user_age)<span class="keyword">value</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="number">88</span>),(<span class="string">&#x27;李四&#x27;</span>,<span class="number">88</span>),(<span class="string">&#x27;李四&#x27;</span>,<span class="number">88</span>),(<span class="string">&#x27;李四&#x27;</span>,<span class="number">88</span>),(<span class="string">&#x27;李四&#x27;</span>,<span class="number">88</span>);</span><br></pre></td></tr></table></figure><br>&ensp;&ensp;&ensp;&ensp; <strong><code>注意：</code></strong></p><ul><li>values的值要与表结构一一对应</li><li>字符型和日期型插入数据时，数据类型不需要加引导</li><li>列值之间英文分割符分开</li><li>插入数据是，注意满足约束条件</li><li>关键词into可以省略</li></ul><h5 id="更新语句"><a href="#更新语句" class="headerlink" title="更新语句"></a>更新语句</h5><p><strong>更新某列的全部值</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> user_info <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;赵六&#x27;</span>,age<span class="operator">=</span><span class="number">88</span>;</span><br></pre></td></tr></table></figure><br><strong>筛选数据后，更新某列的值</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> user_info <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;赵六&#x27;</span>,age<span class="operator">=</span><span class="number">88</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure></p><h5 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h5><p><strong>删除表里全部数据</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> user_info;</span><br></pre></td></tr></table></figure><br><strong>筛选数据后，删除表里某部分数据</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> user_info <span class="keyword">where</span> id<span class="operator">=</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure></p><h4 id="事务控制语句——TCL"><a href="#事务控制语句——TCL" class="headerlink" title="事务控制语句——TCL"></a>事务控制语句——TCL</h4><p>管理数据库中，维护数据的一致性<br>提交事务<br>COMMIT<br>回滚事务<br>ROLLBACK</p><h4 id="数据查询语句——DQL"><a href="#数据查询语句——DQL" class="headerlink" title="数据查询语句——DQL"></a><a href="/posts/6480e0f0.html">数据查询语句——DQL</a></h4><p><a href="https://fshby.top/test_exam/templates/mysql8.html">数据查询练习</a><br>SELECT——从数据库中提取数据</p><h4 id="数据控制语句——DCL"><a href="#数据控制语句——DCL" class="headerlink" title="数据控制语句——DCL"></a>数据控制语句——DCL</h4><p>授予权限<br>GRANT<br>管理权限<br>REVOKE</p><ul><li><strong><code>注意</code></strong>：<br>sql语句规范Programe<br>sql语句不区分大小写，系统关键词建议大写，其他部分小写<br>sql语句以英文分号“;”结尾</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>掌握MySQL数据类型<br><strong>概述：在 MySQL 中，有三种主要的类型：Text（文本）、Number（数字）和 Date/Time（日期/时间）类型</strong></p><ol><li><strong>CHAR与VARCHAR的区别</strong><br> CHAR保存固定长度字符串，不节约空间 ，最多255个字符<br> VARCHAR 保存可变长度字符串，不节约空间</li><li><strong>TEXT</strong> 存放最大长度65535个字符的字符串，用于<code>文本存储</code></li><li><strong>INT与BIGINT的区别</strong><br> INT(size)的size默认值为11<br> INTBIG(size)的size默认值为20</li><li><strong>DOUBLE与FLOAT</strong><br> DOUBLE(size,d) 带有浮动小数的大数字，在size参数中规定显示的<code>最大位数</code>，在d中参数规定小数点<code>右侧的最大位数</code><br> FLOAT(size,d) 带有浮动小数的小数字，在size参数中规定显示的最大位数，在d中参数规定小数点右侧的最大位数</li></ol><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><h3 id="Navicat链接虚拟机数据库时报错"><a href="#Navicat链接虚拟机数据库时报错" class="headerlink" title="Navicat链接虚拟机数据库时报错"></a>Navicat链接虚拟机数据库时报错</h3><div class="tip error"><p>1129 - Host ‘192.1 68.57.1’ is blocked because of many connection errors; unblock with ‘mysqladmin flush-hosts’</p></div><p><strong>错误原因</strong>：多次错误申请链接导致<code>mysql服务器被阻塞</code>引起的错误<br>解决办法：</p><ol><li>清除“阻塞主机”错误并解除被阻止的状态<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p flush-hosts</span><br></pre></td></tr></table></figure>2 . 输入密码：×××</li></ol><ul><li><code>注意</code>：这个命令将刷新 MySQL 的托管表以便清除被阻止的主机IP地址。建议不要过分滥用此命令，因为它可能会导致其他应用程序在 MySQL 数据库中发生问题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Java项目封装成可以分享安装的小程序</title>
      <link href="/posts/e75e11db.html"/>
      <url>/posts/e75e11db.html</url>
      
        <content type="html"><![CDATA[<h2 id="从-idea-中导出项目"><a href="#从-idea-中导出项目" class="headerlink" title="从 idea 中导出项目"></a>从 idea 中导出项目</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>                            </div>            </details><h2 id="安装-exe4j-程序"><a href="#安装-exe4j-程序" class="headerlink" title="安装 exe4j 程序"></a>安装 exe4j 程序</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>                            </div>            </details><h2 id="安装-inno-setup"><a href="#安装-inno-setup" class="headerlink" title="安装 inno setup"></a>安装 inno setup</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>                            </div>            </details>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题切换</title>
      <link href="/posts/f1f94f58.html"/>
      <url>/posts/f1f94f58.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="146180a878b62e637b973219df79c4d3632f3a6823f297da505dc578e600be46"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程</title>
      <link href="/posts/7821ac43.html"/>
      <url>/posts/7821ac43.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h2><h3 id="软件工程概念的提出与发展"><a href="#软件工程概念的提出与发展" class="headerlink" title="软件工程概念的提出与发展"></a>软件工程概念的提出与发展</h3><p><strong>软件：</strong>是按照特定顺序组织的计算机数据和指令的集合（计算系统中的程序及文档）<br>软件危机：随着计算机的广泛应用，软件的生产率与软件质量远远满足不了社会发展的需求。<br><strong>软件工程：</strong>应运软件危机而生，应用<code>计算机科学理论和技术</code>以及<code>管理原则和方法</code>，按<code>预算</code>和<code>进度</code>实现满足用户要求的软件产品的工程.</p><blockquote><p>两个发展阶段：</p><blockquote><p>1960年代末至1980年代末 <strong>面向过程阶段</strong><br>成果：瀑布模型</p><p>1980年以来 <strong>面向对象阶段</strong><br>成果：《软件生存周期过程》、计算机辅助软件工程（CASE）</p></blockquote></blockquote><h3 id="软件开发本质"><a href="#软件开发本质" class="headerlink" title="软件开发本质"></a>软件开发本质</h3><p>&ensp;&ensp;&ensp;&ensp;可以将软件开发的本质概括为不同<code>抽象层术语</code>之间的 <strong><code>映射</code></strong>以及不同抽象层<code>处理逻辑</code>之间的 <strong><code>映射</code></strong></p><blockquote><p>涉及两个问题：</p><ol><li>如何实现这样的映射？</li><li>如何管理这样的映射？</li></ol><p>涉及的两类技术</p><ol><li>过程方向。即求解软件的<code>开发逻辑</code></li><li>过程途径，即求解软件的<code>开发手段</code></li></ol></blockquote><p>&ensp;&ensp;问题建模与模型，所谓 <strong><code>模型</code></strong>是指待建系统的任意抽象，其中包括所有的基本能力、特殊或其他一些方面，而没有任何冗余细节，通常包含对<code>该系统边界的描述</code>、对<code>系统内各模型元素</code>以及<code>他们之间的语义描述</code>。</p><blockquote><p>软件系统模型大致可以分为两类：</p><ol><li>概念模型 -&gt;需求</li><li>软件模型 <blockquote><p>设计模型-&gt;设计；<br>实现模型-&gt; 实现<br>部署模型-&gt; 部署</p></blockquote></li></ol></blockquote><p>如上所述，分层的基本动机是为了控制开发的复杂性。系统的概念模型是对事务系统的抽象即标识要解决的问题，或称<code>问题定义</code>。软件模型则是给出问题<code>解决的方案</code></p><h2 id="第二章-软甲需求与软件需求规约"><a href="#第二章-软甲需求与软件需求规约" class="headerlink" title="第二章 软甲需求与软件需求规约"></a>第二章 软甲需求与软件需求规约</h2><h3 id="需求与需求获取"><a href="#需求与需求获取" class="headerlink" title="需求与需求获取"></a>需求与需求获取</h3><ol><li><strong>需求：</strong>描述待开发产品/系统功能上的能力、性能参数或其性质。</li><li>单一一个需求必须具备如下5个<strong>性质</strong>：<br>1) <code>必要的</code>,该需求用户所要求的<br>2) <code>无歧义</code>的，该需求只能用一种方式解释<br>3) <code>可测试</code>，该需求可进行测试<br>4) <code>可跟踪的</code> ，该需求可以从一个开发阶段跟踪另一个开发阶段<br>5) <code>可测量的</code>，需求可测量</li><li><strong>需求分类：</strong><br>1) <code>功能需求</code><br>功能需求规约了系统或系统构件必须执行的功能。<br>2) <code>非功能需求</code><br>a 性能需求<br>规约了系统或系统构件在某方面必须具有的一些特性<br>b<code>外部接口需求</code><br>规约了系统和系统构件必须与之交互的用户、硬件、软件或元素，其中也可能规约交互格式、时间或其他因素<br>c <code>设计约束需求</code><br>设计约束是一种需求，它限制了软件系统软或软件系统构件的设计方案<br>d <code>质量属性需求</code><br>规约了软件产品所具有的一个性质（包括功能和其他需求）必须达到质量方面一个所期望的水平。<br>例如：<br><code>可靠性、存活性、可维护性、用户友好性</code></li><li><strong>需求发现技术</strong><br>1) 自悟<br>需求人员把自己作为最终用户，审视系统，并提出问题。<br><code>成功条件</code>： 需求人员必须具有比最终用户还要多的应用领域和过程方面知识，并具有丰富想象力。<br>2) 交谈<br>为了确定系统应该提供的功能，需求人员通过提出问题/用户回答这一方式，直接询问用户需要的 是什么样的系统<br><code>成功条件</code>： 需求人员剧本“正确提出问题”的能力；回答人员具备“揭示需求本意的能力”<br>3) 观察<br>通过观察用户执行其现行的任务和过程<br><code>成功和条件</code>： 需求人员具有洞察事物本质的能力<br>4) 小组会<br>举行客户和开发人员的联席会议，与客户代表共同开发需求<br><code>成功条件</code>： 会议组织得当，责权分明，参与会议的人员具有良好的需求发现能力<br>5) 提炼<br>复审技术文档，并提取相关信息系<br><code>成功条件： 已存在</code>项目背景文档以及一些紧密相关的需求文档，并且需求人员具有很好的<code>想象力和需求标识</code>能力，包括熟息相关的 技术。</li></ol><h3 id="需求规约"><a href="#需求规约" class="headerlink" title="需求规约"></a>需求规约</h3><ol><li><strong>需求规约定义</strong><br>1) 重要性与稳定性程度<br>2) 可修改的<br>3) 完整的<br>4) 一致的</li><li><strong>需求规约的表达</strong><br>1) 非形式化的需求规约<br>2) 半形式化的需求规约<br>标准化的表达式标识了一些元信息，支持更加清晰的方式系统化的编制文件<br>3) 形式化的需求规约<br>一种基于良构数学概念的符号体系来编制需求规约，一般往往伴有解释注释的支持。其中：<br>以数学概念来定义该符号体系的词法和语义<br>定义一组支持逻辑推理的证明规则，并支持这一符号体系的定义和引用  </li><li><strong>需求规约的作用</strong><br>1) 需求规约是软件开发组织和用户之间一份事实上的<code>技术合同书</code>，是产品功能及其环境的体现。<br>2) 对于项目的大多数工作，需求规约是一个<code>管理控制点</code><br>3) 对于产品/系统的设计，需求规约是一个正式的、<code>受控的起始点</code><br>4) 需求规约是创建产品验收<code>测试计划</code>和<code>用户指南的基</code>础，及基于需求规约一般还会产生另外两个文档——<code>初始测试计划</code>和<code>用互系统操作描述</code>。</li></ol><h2 id="第三章-结构化方法"><a href="#第三章-结构化方法" class="headerlink" title="第三章 结构化方法"></a>第三章 结构化方法</h2><p>&ensp;&ensp;结构化功能方法作为一种“思想”工具，可用于定义需求，建立<code>待建系统的功能模型</code>，可用于定义满足需求的结构，给出一种特定的软件<code>解决方案</code>。分析确定<code>系统必须做什么</code>，设计确定<code>怎么做</code></p><h3 id="结构化需求分析"><a href="#结构化需求分析" class="headerlink" title="结构化需求分析"></a>结构化需求分析</h3><ol><li><strong>在软件系统产品中面临的三大挑战</strong><br>1) 空间问题理解<br>2) 人与人之间通信<br>3) 需求变化</li><li><strong>面对挑战需求技术应具备</strong><br>1) 提供方便<code>通信机制</code>，列如在不同开发阶段使用先关人员容易理解的语言<br>2) 鼓励需求分析人员使用<code>问题空间的术语</code>思考问题，编写文档<br>3) 提供<code>定义系统边界</code>的方法<br>4)  提供支持<code>抽象</code>的基本机制<br>5) 为需求分析人员提供多种<code>可供选择的方案</code><br>6) 特工<code>特定的技术</code>，适应需求变化</li><li><strong>软件开发方法</strong><br>1) 结构化方法<br>2) 面向数据结构的软件开发方法<br>3) 面向对象方</li><li><strong>数据流图基本术语</strong><br>1) 数据流<br>2) 数据存储<br>3) 加工<br>4) 数据源与数据谭<br><img width="800px" heigh="500px" alt="数据流图（DFD）"  src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/5b25f129-ab1e-4d23-b6cb-58d97bd00168.png"></li><li><strong>在使用数据流图表达产品系统模型时，应注意以下3个问题</strong><br>1) 数据流起到连接其他实体的作用，<br>2) 加工之间可以有<code>多个数据流</code>，这些数据流之间可以没有任何关系<br>3) 对于比较大的软件系统，往往需要采用 <code>多层次</code>的数据流图<br>注意：顶层数据流图省去数据存储部分</li><li><strong>建模过程</strong><br>机构化分析方方法给出建模基本步骤，该过程属于“自顶向下，功能分解”<br>1) 建立系统环境图，确定系统环境<br>2) 自顶向下，逐步求精，建立系统层次数据流<br>自顶向下的画出各层次的数据流图，直到底层加工足够精细，功能清晰移动啊，不必继续分解为止，并把这样的加工称为“<code>叶加工</code>”<br>3) 定义数据按字典</li><li><strong>数据基本结构</strong><br>1) 顺序结构<br>2) 选择结构<br>3) 重复结构</li><li><strong>描述加工</strong><br>1) 结构化自然语言<br>结构化自然语言介于形式语言和自然语言之间<br>2) 判定表<br>如果一个加工的输入数据与输出数据之间的逻辑关系比较复杂可以用一定的表达工具。由条件类别（考试总分、单科成绩）、条件组合、操作、操作执行组成。<br><img width="800px" heigh="500px" alt="判定表"  src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/5af3e852-9b05-4704-976a-80aee67e4f8f.png"><br>3) 判定树<br>判定树是一种描述加工的工具。由功能、条件、结果组成。<br><img width="800px" heigh="500px" alt="判定树"  src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/498e89df-e61a-4881-84f7-57485f8d21f0.png"></li></ol><h3 id="结构化设计"><a href="#结构化设计" class="headerlink" title="结构化设计"></a>结构化设计</h3><p>为了控制软件设计的复杂性，结构化设计又分为总体设计与详细设计</p><h4 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a><strong>总体设计</strong></h4><p>结构化设计在结构化设计中引入两个模块<br>1) 模块 软件中具有特殊标识的独立成分<br>2) 模块调用，即指模块之间的一种使用关系</p><ol><li><strong>模块结构图</strong><br>是一种描述软件“宏观”结构的图形工具。<br>1) 矩形：模块（功能）<br>2) 空心圆：数据信息<br>3) 实心圆：控制信息</li><li><strong>层次图（H图）</strong><br>主要用于描述软件层次结构，适合在自顶向下设计软件的过程使用。</li><li><strong>HIPO图</strong><br>其中HIPO是“层次图+输入/处理/输出”的英文缩写。实际上，HIPO是由H图和IPO图两部分组成</li><li><strong>总体设计步骤</strong><br>1) 待建系统的数据流图一般分为<code>变换型数据流图</code>和<code>事务型数据流图</code><br>2) 结构化设计方法基于“自顶向下，功能分解”的基本原则。针对两种不同类型的数据流图，分别提出了<code>变换设计</code>和<code>事务设计</code></li><li><strong>模块化</strong><br>该步的目标是：基于模块“高内聚低耦合”的原则<br>结构化设计是一种典型的模块化方法，<br><strong>耦合</strong>：耦合是指不同模块之间相互依赖程度的度量。<br>1) 内容耦合：当一个模块<code>直接修改或操</code>作另一个模块的数据，或一个模块不通过正常入口转入到另一个模块时，这样的耦合被称为内容耦合。<br>2) 公共耦合： 两个或两个以上的模块<code>共同引用一个全局数据项</code>。<br>3) 控制耦合： 一个模块通过接口向另一个模块<code>传递控制信息</code>。<br>4) 标记偶合：若一个模块A通过接口<code>向两个模块B和C传递一个公共参数</code>，那么称模块B和C之间存在一个标记耦合。<br>5) 数据耦合： 模块之间通过参数来传递数据，则称为数据耦合<br><strong>内聚</strong>： 是指模块内部个 成分之间相互关联程度的度量。<br>1) 偶然内聚：如果一个模块内部的各个成分之间<code>基本不存在任何关系</code><br>2) 逻辑内聚：<code>几个逻辑上相关</code>的功能被放在同一模块中则称为逻辑内聚。<br>3) 时间内聚：如果一个模块完成的<code>功能必须在同一时间内执行</code>，<br>4) 通信内聚：如果模块内部所有的成分<code>都操作同一数据集或生成同一数据集</code>，则称为通信内聚<br>5) 过程内聚：如果一个模块内部的<code>处理成分是相关的</code>，而且这些处理必须一特定的次序执行，则称为过程内聚<br>6) 顺序内聚： 如果一个<code>模块的各个成分和同一功能密切相关</code>，而且一个成分的输出作为另一个成分的输入<br>7) 功能内聚：最理想的内聚是功能内聚，模块的所有成分对于完成单一功能都是基本的。</li><li><strong> 启发规则</strong><br>实现出一些模块“高内聚低耦合”的启发规则：<br>1) 改进软件结构，提高模块<code>独立性</code><br>2) 力求模块规模<code>适中</code><br>3) 力求深度、宽度、扇入、扇出适中<br>模块扇入扇出是指一个模块直接控制（不存在共同控制）的下级模块数目。<details class="folding-tag" green><summary> 2022年四月份例题 </summary>              <div class='content'>              <p><img width="800px" heigh="500px" alt="扇出与作用域控制域"  src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/3af03f58-0398-43eb-a8e2-eb82ebfbe6a0.png"></p>              </div>            </details>4) 尽力使模块的<code>作用域</code>在其<code>控制域</code>之内。<br>如果一个模块的作用域不再控制域之内，这样的结构一方面难以理解，另一方面会产生较为<code>复杂的控制耦合</code>。<br>5) 尽力降低模块<code>接口</code>的复杂度<br>6) 力求模块功能可以<code>测试</code></li></ol><h4 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h4><ol><li><strong>结构化程序设计</strong><br>软件设计的两个抽象层：<code>高层模块结构描述</code>与<code>每一模块结构描述</code>，完成软件结构定义。<br>顺序、选择和循环结构可以用流程图表示，实际上，用<code>顺序</code>结构和<code>循环结构</code>完全可以<code>实现选择结构</code>，因此在理论上最基本的控制结构只有两种。</li><li><strong>详细设计工具</strong><br>1) 程序流程图<br>使用最广泛的就是，顺序结构、选择结构、循环结构<br><strong>缺点</strong>：<br><code>不是一种逐步求精的工具</code>，它诱使程序员过早的考虑流程控制，而不去考虑程序的全局结构。<br>所表达的控制流程，往往不受任何约束可随意转移，从而影响甚至<code>破坏好的结构设计</code>。<br><code>不易表示数据接结</code>构<br>2) 盒图（N-S）<br>盒图支持自顶向下逐步求精的详细设计，为不违背结构化程序设计而提出。<br>3) PAD(问题分析图)<br>采用二维属性结构图来表示程序控制流程，采用PAD图设计的模型一定是结构化的，并且所有描述都十分清晰，即图中最左边的竖线是程序的主线，是第一层控制结构，每增加一层图形向右扩展一条竖线。<br>4) PDL类程序设计语言<br>PDL类程序设计语言也称为<code>伪码</code>，且PDL是一种<code>混合语言</code>，一方面借用某种结构化程序语言的<code>关键字</code>作为语法框架，用于定义 控制结构和数据结构，另一方面PDL菜用某种自然语言的<code>词汇</code>，灵活地表示<code>实际操作和判定条件</code><br>5) 另外IPO图、判定表、判定树也可以作为详细设计的工具。</li></ol><h2 id="第四章-面向对象的方法——UML"><a href="#第四章-面向对象的方法——UML" class="headerlink" title="第四章 面向对象的方法——UML"></a>第四章 面向对象的方法——UML</h2><h3 id="UML术语"><a href="#UML术语" class="headerlink" title="UML术语"></a>UML术语</h3><p>UML是面向对象的统一建模语言，引入了8个术语：<code>类与对象、接口、协作、用况、主动类、构件、制品、节点</code>。UML把这些术语统称为类目<br>参与者是类的变体。类的变体还有实用信号，实用程序等，主动类的变体是进程和线程；制品的变体有应用、文档、库、页和表<br><code>OOA</code>面向对象分析<br><code>OOD</code>面向对象设计</p><ol><li><strong>类与对象</strong><br>可见性：可见性的目的是为了支持信息的隐蔽这一软件设计原则。<br>1)  <strong>+</strong>公有的。该属性可供其他类目使用<br>2)  <strong>#</strong>受保护的。该属性只有其子类才能使用<br>3)  <strong>-</strong>私有的。该属性只有本类操作才能使用<br>4)  <strong>~</strong>包内的。该属性只有在同一包中声明的类才能使用。</li><li><strong>接口</strong><br>接口可以被其他类使用但本身不能访问其他类，没有属性和状态，等价于没有属性和方法的抽象类<br>1) 采用分栏和关键字《interface》的矩形符号表示<br>2) 采用小圆圈和半圆圈来表示左边的圈表示由类提供的接口，简称供接口，右边的半圈表示类需要的接口表示需接口。<br><img width="800px" heigh="500px" alt="接口表示示例"  src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/c686d23d-659e-4074-89b8-858c686e7754.png"><br>3) 用虚线空心箭头表示接口<br>4) 可以使用状态机来描述接口的预期行为，也可以使用一系列的交互图和协作图，详细描述接口的预期行为</li><li><strong>协作 </strong><br>协作是一个<code>交互</code>,涉及交互的三要素：交互各方、交互方式、交互内容、</li><li><strong>用况</strong><br>用况是对一组<code>动作序列</code>的描述，系统执行这些动作应产生对特定与者有值的，可观察的效果。参<br><img width="800px" heigh="500px" alt="协作与用况表示"  src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/b21948e6-1294-46ac-97b9-8315fd3a9590.png"></li><li>主动类<br><code>至少有一个进程</code>或线程的类。可以控制系统启动活动。并且其对象行为通常是用于其他元素行为并发的。</li><li>构件<br>构件是系统设计中的一种<code>模块化部件</code>，通过外部接口隐藏他的内部实现。构件是可以嵌套的，及一个构件包含另一个更小的构件</li><li>制品<br>制品是系统中包含<code>物理信息的、可替代的物理部件</code>。</li><li>节点<br>节点是在<code>运行时存在的物理元素</code>，通常表示一种具有<code>记忆能力</code>和<code>处理能力</code>的计算机资源。</li></ol><h3 id="表达关系的术语"><a href="#表达关系的术语" class="headerlink" title="表达关系的术语"></a>表达关系的术语</h3><ol><li>关联<br>关联是类目之间的一种结构关系，是对一组具有相同结构、相同链的描述。<br>为了表达关联语义UML采用了一下途径<br>1) 关联名<br>2) 导航：对于一个给定类目，可以找到与之关联的另一个类目<br>3) 角色<br>4) 可见性<br>5) 多重性<br>类中对象参与一个关联的数目，称为该关联的多重性<br>6) 聚合： 聚合是关联的一种特殊形式（带有空心菱形的实线）<br>7) 组合： 组合又是聚合的一种特殊形式（带有实心菱形的线段）<br>8) 关联类</li><li>泛化<br>泛化是一般类目和它的较为特殊性类目之间的一种关系，有时称is-a-kind-of关系，<br>子类可继承父类的属性和操作，并可有更多的属性和操作，子类可替换父类声明，也可实现多态，可以在其他类目之间创造泛化。例如节点、类和接口之间。<br>UML为进一步表达泛化的语义，提出来4个约束<br>1) 完整<br>2) 不完整<br>3) 互斥<br>4) 重叠</li><li>细化<br>细化化是<code>类目之间的语义关系</code>，其中一个类目规约了另一个类目执行的契约。<br>一般一下两个地方会使用细化关系：<br>1) 接口与实现他们的类接口和构件<br>2) 用况与实现他们的协作之间</li><li>依赖<br>依赖是一种使用关系，用于描述一个类目使用另一个类目的信息和服务。<br><img width="800px" heigh="500px" alt="箭头示例"  src="https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/46a507d5-7f0e-42ef-bd42-3b6c6d68a16f.png"></li></ol><h4 id="表达组合信息的术语包"><a href="#表达组合信息的术语包" class="headerlink" title="表达组合信息的术语包"></a>表达组合信息的术语包</h4><p>为了控制信息组织的复杂性，UML提供了组织信息的一种通用机制包。<br>包可以作为“模块化”和“构件化”的一种机制。<br>为模块化包之间的关系UML给出了两种依赖，<br>1) 访问<br>表明目标包可以被原包所引用，或被那些递归嵌套在原包中的其他包所引用。<br>2) 引入<br>表明目标包中具有适当的可见性的内容，被加入到原包的公共命名空间中，相当于原包对其做了声明。</p><h3 id="UML的模型表达格式"><a href="#UML的模型表达格式" class="headerlink" title="UML的模型表达格式"></a>UML的模型表达格式</h3><ol><li><strong>类图</strong><br>类图是可视化地表达<code>系统静态结构模型工具</code>，通常含类、接口、关联、泛化、依赖等关系。</li><li><strong>用况图</strong><br>用况图是一种表达<code>系统功能模型</code>的图型化工具。<br>用况图包含的内容，确定了一个特定的抽象层，该抽象层决定了系统的模型形态。<br>主要包含：<br>1) 主题<br>2) 用况<br>3) 参与者<br>4) 关联、泛化与依赖</li><li><strong>状态图</strong><br>状态图是显示一个状态机的图，从<code>一个 状态到另一状态的控制流</code><br>主要构成：<br>1) 初始状态<br>2) 最终状态<br>3) 正常状态<br>4) 转移及其相关的事件和动作消息</li><li><strong>顺序图</strong><br>顺序图是一种交互图，即由<code>一组对象以及按时序组织的对象之间的关系组成</code>，其中还包含对象之间所<code>发送的消息</code>。</li></ol><h2 id="第五章-面向对象方法——RUP"><a href="#第五章-面向对象方法——RUP" class="headerlink" title="第五章 面向对象方法——RUP"></a>第五章 面向对象方法——RUP</h2><p>一种软件开发方法学至少由3部分组成，一是用来表达基本信息的<code>术语</code>，二是用于组织基本信息的<code>格式</code>，三是在不同抽象层之间的<code>映射</code>的过程指导。</p><ol><li><strong>RUP的特点</strong><br>是一种一用况为驱动，以体系结构为中心的，迭代、增量开发。</li><li><strong>增量</strong><br>每次迭代都要按照专门的计划和评估标准，通过一组明确的活动，产生一个内部的或外部的发布版本，<code>两次相邻迭代所得的发布之差称为一个增</code>量。</li><li><strong>迭代的4个阶段</strong><br>1) 初始化阶段的基本目标：结构轮廓<br>2) 精华阶段的基本目标：捕获和描述系统的大部分需求<br>3) 构造阶段的基本目标：通过演化，形成系统最终的体系结构基线，具有初始操作能力。<br>4) 移交项目阶段的基本目标：确保有一个实在的产品发布给用户群。</li></ol><h3 id="核心工作流"><a href="#核心工作流" class="headerlink" title="核心工作流"></a>核心工作流</h3><p>RUP每次迭代中都要经历一个核心工作流，及<code>需求获取、分析、设计、实现和测试</code></p><h4 id="需求获取"><a href="#需求获取" class="headerlink" title="需求获取"></a><strong>需求获取</strong></h4><p>目标：是UML中的用况、参与者以及依赖等术语来抽象客观实际问题形成系统的需求获取模型————一种特定的<code>系统/产品模型</code><br>要做的工作：<br>1) 列出候选需求<br>产生制品——特征列表<br>2) 理解系统语境<br>产生制品——领域模型和业务模型<br>业务用况模型与业务对象模型<br>3) 捕获功能需求<br>产生制品——用况模型<br><strong>用况模型是</strong>一种概念模型，是对系统功能的抽象，包括系统参与者、系统用况以及他们之间的关系。<br>为创建系统用况模型应进行一下活动：<br> 活动一:发现并描述参与者<br> 活动二：发现并描述用况<br> 活动三：确定用况优先级<br> 活动四：精华用况<br> 活动五：构造用户界面原型<br> 活动六：用况模型结构化<br>4) 捕获非功能需求<br>产生制品——补充需求或针对一些特定需求的用况</p><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>RUP的需求分析目标是：在系统用况模型的基础上，创建系统分析模型以及在该分析模型视角下的体系结构描述</p><ol><li><strong>基本术语</strong><br>1) 分析类<br>边界类<br><div style="width: 60px;height:36px; overflow: hidden;background: url(https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/db48be3f-d454-467f-9fe6-5724d96999bd.png)0 36px ; "></div>实体类  <div style="width: 60px; height:36px;overflow: hidden;background: url(https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/db48be3f-d454-467f-9fe6-5724d96999bd.png)70px 36px ; "></div><br>控制类<br><div style="width: 60px; overflow: hidden;height:36px;background: url(https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/db48be3f-d454-467f-9fe6-5724d96999bd.png)136px 36px ; "></div><br>1) 用况细化<br>用况细化是一个协作<br>1) 分析包<br>一个具有良好结构的分析包：<br>体现问题分离、高内聚、低耦合、尽可能的体现一个系统完整的顶层设计</li><li><strong>分析模型表达</strong></li><li><p>分析的主要活动<br>3) 体系结构分析<br>4) 用况分析<br>5) 类分析<br>6) 包分析</p></li><li><p>用况模型和分析模型的比较</p></li></ol><h2 id="第六章-软件测试"><a href="#第六章-软件测试" class="headerlink" title="第六章 软件测试"></a>第六章 软件测试</h2><p><strong>软件测试</strong>：按照规定程序发现软件错误的过程。<br><strong>软件评估</strong>：可以分为<code>静态评</code>估和<code>动态评估</code>，评审、走查和形式化证明等是静态评估技术，而软件测试是动态评估技术。</p><h3 id="软件测试技术"><a href="#软件测试技术" class="headerlink" title="软件测试技术"></a>软件测试技术</h3><p>软件测试技术分为两大类：<br>白盒测试(结构测试技术) <span class='p red'>路径测试技术，依据是程序的逻辑结构</span> ;<br>黑盒测试技术（功能测试技术）： <span class='p red'>事务处理技术、状态测试技术、定义域测试技术、依据是软件行为描述</span> ;</p><h3 id="路径测试技术"><a href="#路径测试技术" class="headerlink" title="路径测试技术"></a>路径测试技术</h3><p>（1） 采用控制流图来表述测试程序模型，揭示程序中控制结构<br>（2） 通过合理地选择一组穿过程序的路径，以达到某种测试度量。</p><h4 id="控制流程图"><a href="#控制流程图" class="headerlink" title="控制流程图"></a>控制流程图</h4><div class="table-container"><table><thead><tr><th>基本元素</th><th>表示</th><th>属性</th></tr></thead><tbody><tr><td>过程块</td><td>一组程序语句</td><td>一进一出</td></tr><tr><td>判定</td><td>程序点</td><td>一进多出</td></tr><tr><td>节点</td><td>程序点</td><td>多进一出</td></tr><tr><td>链</td><td>过程块</td><td>无</td></tr></tbody></table></div><h4 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h4><p>(1)覆盖覆盖（px）：执行所有可能穿过 <span class='p red'>程序控制流程快的路径</span>（最强的测试度量）<br>(2)语句覆盖（p1）：执行程序中 <span class='p red'>所以语句</span> 一次。<br>(3)分支覆盖（p2）:将程序中每一个分支执行一次。 <span class='p red'>100%覆盖</span><br>(4)条件覆盖：每个判定中的所有可能的<span class='p red'>条件取值</span>至少执行一次。<br>(5)条件覆盖与条件组合覆盖</p><h3 id="基于事务流的测试技术"><a href="#基于事务流的测试技术" class="headerlink" title="基于事务流的测试技术"></a>基于事务流的测试技术</h3><p>1) 事务与事务流程图<br>2) 事务测试技术的应用</p><h3 id="其他功能测试技术的简介"><a href="#其他功能测试技术的简介" class="headerlink" title="其他功能测试技术的简介"></a>其他功能测试技术的简介</h3><ol><li>等价类划分</li><li>边界值分析</li><li>因果图</li></ol><h3 id="软件测试步骤"><a href="#软件测试步骤" class="headerlink" title="软件测试步骤"></a>软件测试步骤</h3><ol><li>单元测试</li><li>集成测试</li><li>有效测试</li></ol><h2 id="第七章-软件生存周期过程与管理"><a href="#第七章-软件生存周期过程与管理" class="headerlink" title="第七章 软件生存周期过程与管理"></a>第七章 软件生存周期过程与管理</h2><h3 id="《ISO-IEC系统与软件工程—软件生存周期过程12207—2008》标准简介"><a href="#《ISO-IEC系统与软件工程—软件生存周期过程12207—2008》标准简介" class="headerlink" title="《ISO/IEC系统与软件工程—软件生存周期过程12207—2008》标准简介"></a>《ISO/IEC系统与软件工程—软件生存周期过程12207—2008》标准简介</h3><h3 id="软件生存周期模型"><a href="#软件生存周期模型" class="headerlink" title="软件生存周期模型"></a>软件生存周期模型</h3><ol><li>瀑布模型</li><li>增量模型</li><li>演化模型</li><li>螺旋模型</li><li>喷泉模型</li></ol><h3 id="过程规划与管理"><a href="#过程规划与管理" class="headerlink" title="过程规划与管理"></a>过程规划与管理</h3><ol><li>软件生存周期过程监控<br>1) 进展与进程<code>跟踪</code><br>2) 质量数据<code>趋势检查</code><br>3) 设计、编码和测试计划复审<code>记录和动作检查</code><br>4) 变更异常和测试异常报告<code>趋势检查</code><br>5) 关键资源<code>有效</code>使用<br>6) 与项目组成员<code>有效</code>交谈</li></ol><h2 id="第八章-集成化能力成熟度模型（CMMI）"><a href="#第八章-集成化能力成熟度模型（CMMI）" class="headerlink" title="第八章 集成化能力成熟度模型（CMMI）"></a>第八章 集成化能力成熟度模型（CMMI）</h2><h3 id="CMMI部件"><a href="#CMMI部件" class="headerlink" title="CMMI部件"></a>CMMI部件</h3><ol><li>CMMI由一些过程域组成，过程域有自己确定的专用目标和共同目标，<div style="width: 60px; overflow: hidden;displdivy: block;height: 36px;background: url(https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/db48be3f-d454-467f-9fe6-5724d96999bd.png)0 0px ; "></div></li><li>每个专用目标和过程目标的实现分别依赖一些实践，包括专用实践和共用实践<div style="width: 60px; overflow: hidden;displdivy: block;height: 36px;background: url(https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/db48be3f-d454-467f-9fe6-5724d96999bd.png)70px 0px ; "></div></li><li>每个专用实践有自己的子实践和确定典型工作的产品，<div style="width: 60px; overflow: hidden;displdivy: block;height: 36px;background: url(https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/db48be3f-d454-467f-9fe6-5724d96999bd.png)130px 0px ; "></div></li><li>为了将每个过程域表达清楚，每个过程域还有意图陈述、简介性注释以及相关过程域，<div style="width: 60px; overflow: hidden;displdivy: block;height: 36px;background: url(https://mp-0313a859-db6b-4395-bcc9-0e3941ca747b.cdn.bspapp.com/cloudstorage/db48be3f-d454-467f-9fe6-5724d96999bd.png)130px 0px ; "></div></li></ol><h3 id="CMMI-等级"><a href="#CMMI-等级" class="headerlink" title="CMMI 等级"></a>CMMI 等级</h3><ol><li><p>能力等级<br>2) 0级：未完成等级<br>3) 1级：已执行等级<br>4) 2级：已管理等级<br>5) 3级：已定义等级<br>6) 4级：已定量管理等级<br>7) 5级：持续优化等级</p></li><li><p>组织成熟度等级<br>9) 1级：初始级<br>10) 2级：已管理等级<br>11) 3级：已定义等级<br>12) 4级：一定量管理等级<br>13) 5级：持续优化等级</p></li></ol><h2 id="软件生存周期过程与管理"><a href="#软件生存周期过程与管理" class="headerlink" title="软件生存周期过程与管理"></a>软件生存周期过程与管理</h2><h3 id=""><a href="#" class="headerlink" title=""></a><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://ks.wjx.top/vm/Q0daQwm.aspx">第一二章绪论+软件需求A卷</a></div></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://ks.wjx.top/vm/eFmTwgn.aspx">第一二章绪论+软件需求B卷</a></div></h3><div class="hide-block"><button type="button" class="hide-button" style="background-color: orange;">查看答案    </button><div class="hide-content"><p><img  src="http://rm5i494z0.hn-bkt.clouddn.com/article/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%AC%AC1-2%E7%AB%A0B%E5%8D%B7.jpg"></p></div></div>  <h3 id="-2"><a href="#-2" class="headerlink" title=""></a><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://ks.wjx.top/vm/rvf5CDb.aspx">第三章 结构化方法 A卷</a></div></h3><div class="hide-block"><button type="button" class="hide-button" style="background-color: orange;">查看答案    </button><div class="hide-content"><p><img class="caishenpic lala" src="http://rm5i494z0.hn-bkt.clouddn.com/article/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%AC%AC%E4%B8%89%E7%AB%A0.jpg"></p></div></div><h3 id="-3"><a href="#-3" class="headerlink" title=""></a><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://ks.wjx.top/vm/hI37dIJ.aspx">第三章 结构化方法 B卷</a></div></h3><h3 id="-4"><a href="#-4" class="headerlink" title=""></a><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://ks.wjx.top/vm/OrX8n3Z.aspx">第4.5章 UML+RUPA卷</a></div></h3><div class="hide-block"><button type="button" class="hide-button" style="background-color: orange;">查看答案    </button><div class="hide-content"><p><img class="caishenpic lala" src="http://rm5i494z0.hn-bkt.clouddn.com/article/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/4%E3%80%815%E7%AB%A0.jpg"></p></div></div><h2 id="-5"><a href="#-5" class="headerlink" title=""></a><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://ks.wjx.top/vm/O6X8rB8.aspx">第4.5章 UML+RUPB卷</a></div></h2><div class="hide-block"><button type="button" class="hide-button" style="background-color: orange;">查看答案    </button><div class="hide-content"><p><img class="caishenpic lala" src="http://rm5i494z0.hn-bkt.clouddn.com/article/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/4%E3%80%815%E7%AB%A0B%E5%8D%B7.jpg"></p></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 问卷星 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具网站</title>
      <link href="/posts/92edcf8f.html"/>
      <url>/posts/92edcf8f.html</url>
      
        <content type="html"><![CDATA[<ol><li><a href="/posts/e593433d.html" data-pjax-state="">🥬Hexo博客搭建基础教程(一)</a></li><li><a href="/posts/4aa2d85f.html" data-pjax-state="">🍒Hexo博客搭建基础教程(二)</a></li><li><a href="/posts/3451f874.html" data-pjax-state="">🥪Hexo博客搭建基础教程(三)</a></li><li><a href="/posts/eec9786.html" data-pjax-state="">🍀博客魔改教程总结(一)</a></li><li><a href="/posts/5389e93f.html" data-pjax-state="">🍚博客魔改教程总结(二)</a></li><li><a href="/posts/2d7ac914.html" data-pjax-state="">🎋博客魔改教程总结(三)</a> ⇦当前位置🪂</li><li><a href="/posts/d739261b.html" data-pjax-state="">🥕博客魔改教程总结(四)</a></li><li><a href="/posts/d1927166.html" data-pjax-state="">🍊博客魔改教程总结(五)</a></li><li><a href="/posts/489d3914.html" data-pjax-state="">🧄博客魔改教程总结(六)</a></li><li><a href="/posts/9ac969bb.html" data-pjax-state="">🎨综合美化模块教程</a></li></ol><!-- !['https://github.com/blinkfox/hexo-theme-matery'](/img/favicon.ico) --><html><body style="display: flex ; flex-direction: column;"><div style="display: flex ; flex-direction: row;margin-left:40px"><div style=" width: 128;height: 128;margin: 20px ;">            <a href='https://sketch.metademolab.com/canvas'>                <img src="https://sketch.metademolab.com/favicon.ico" alt="图片鬼畜" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://www.logomaker.com.cn/'>                <img src="https://www.logomaker.com/favicon.ico" alt="图标设计" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://benisland.neocities.org/petpet/'>                <img src="https://sketch.metademolab.com/favicon.ico" alt="摸头图片" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://www.thinkcmf.com/font/font_awesome/icons.html'>                <img src="https://www.thinkcmf.com/themes/simplecmf3/public/assets/font_search/ico/favicon.ico" alt="简洁图标" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://wallhaven.cc/search?q=woman&categories=110&purity=100&sorting=relevance&order=desc&page=16'>                <img src="https://wallhaven.cc/favicon.ico" alt="高能壁纸" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://animate.style/'>                <img src="https://animate.style/img/favicon.ico" alt="动画样式" style="zoom:50%;" />            </a></div></div><!-- 列分割线 --><div style="display: flex ; flex-direction: row;margin-left:40px"><div style=" width: 128;height: 128;margin: 20px ;">            <a href='https://www.runoob.com/'>                <img src="https://www.runoob.com/favicon.ico" alt="菜鸟教程" style="zoom:50%;" />            </a></div><!-- 分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='http://www.ico51.cn/'>                <img src="http://www.ico51.cn/favicon.ico" alt="生成ico" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://unsplash.com/'>                <img src="https://unsplash.com/favicon.ico" alt="摄影壁纸" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://www.neea.edu.cn/'>                <img src="https://fshby.github.io/fshby01/image/LOGO/quanguo.png" alt="教育考试网" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='http://wanyouw.com/sites/133.html'>                <img src="http://wanyouw.com/favicon.ico" alt="万千集合站" style="zoom:50%;" />            </a></div><!-- 行分割线 --><div style=" width: 128;height: 128;margin: 20px ;margin-left: 30px;">            <a href='https://magicstudio.com/magiceraser/editor'>                <img src="https://magicstudio.com/favicon.ico" alt="专业去水印" style="zoom:50%;" />            </a></div></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 评论功能</title>
      <link href="/posts/9c4dddac.html"/>
      <url>/posts/9c4dddac.html</url>
      
        <content type="html"><![CDATA[<h2 id="来必力"><a href="#来必力" class="headerlink" title="来必力"></a>来必力</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>                            </div>            </details><h2 id="valine"><a href="#valine" class="headerlink" title="valine"></a>valine</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <p>valine评论是基于<a href="">LeanCloud</a>  ，还有一个文章阅读次数功能也是用LeanCloud，两者会有一点冲突<br><a href="https://blog.csdn.net/m0_70274918/article/details/124588151">参考链接</a><br>解决方案：<br><a href="https://cloud.tencent.com/developer/article/1934191">参考方案</a><br>文章禁止评论：<br>在文章头部添加 <code>comment： false</code></p>              </div>            </details><h2 id="Twikoo"><a href="#Twikoo" class="headerlink" title="Twikoo"></a>Twikoo</h2><details class="folding-tag" orange><summary> 查看教程 </summary>              <div class='content'>              <p>参考文字教程：<br><a href="https://twikoo.js.org/quick-start.html">官方：Twikoo文档-针对Vercel的部署</a><br>视频教程：<br><a href="https://www.bilibili.com/video/BV1Re4y1H7g8/">安知鱼：23.butterfly配置twikoo评论系统</a>  </p>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 来必力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随想</title>
      <link href="/posts/41acf799.html"/>
      <url>/posts/41acf799.html</url>
      
        <content type="html"><![CDATA[<h2 id="你好-005"><a href="#你好-005" class="headerlink" title="你好 005"></a>你好 005</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 好主意 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活</title>
      <link href="/posts/a535711.html"/>
      <url>/posts/a535711.html</url>
      
        <content type="html"><![CDATA[<h2 id="你好-004"><a href="#你好-004" class="headerlink" title="你好 004"></a>你好 004</h2><div name="我是墙" id="recent-posts">text_color: black # 文字默认颜色text_hover_color: white # 文字鼠标悬浮颜色background_color: "#f2f2f2" # 文字背景默认颜色background_hover_color: "#b30070" # 文字背景悬浮颜色  <!-- id=>type  recent-posts=>name    -->  <div name="我是画框">    <div name="我是纸">      <!--这里通过js挂载magnet，也就是画画-->    </div>  </div></div>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/posts/79666db.html"/>
      <url>/posts/79666db.html</url>
      
        <content type="html"><![CDATA[<h2 id="你好-004"><a href="#你好-004" class="headerlink" title="你好 004"></a>你好 004</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法自带格式</title>
      <link href="/posts/d2d7725.html"/>
      <url>/posts/d2d7725.html</url>
      
        <content type="html"><![CDATA[<p>前言：<br><span class='p green'>参考文献</span>：<a href="https://www.fomal.cc/posts/2013454d.html">猕猴桃的博客</a>  <a href="https://www.jianshu.com/p/86e7fa33de8e">简书</a>  </p><h1 id="特效标签"><a href="#特效标签" class="headerlink" title="特效标签"></a>特效标签</h1><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate__zoomIn,5s,5s,100,10 %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span><br><span class="line">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endwow %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% wow animate__zoomIn,5s,5s,100,10 %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span><br><span class="line">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endwow %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% wow animate__slideInRight,5s,5s %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span><br><span class="line">`slideInRight`动画效果，持续`5s`，延时`5s`。</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endwow %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% wow animate__heartBeat,,5s,,10 %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span><br><span class="line">`heartBeat`动画效果，延时`5s`，重复`10`次。</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="标题-01"><a href="#标题-01" class="headerlink" title="标题 01"></a>标题 01</h1><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3><h4 id="H4"><a href="#H4" class="headerlink" title="H4"></a>H4</h4><h5 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h5><h6 id="H6"><a href="#H6" class="headerlink" title="H6"></a>H6</h6><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><h1 id="段落首航缩进"><a href="#段落首航缩进" class="headerlink" title="段落首航缩进"></a>段落首航缩进</h1><div class="tabs" id="段落首航缩进"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#段落首航缩进-1">示例</button></li><li class="tab"><button type="button" data-href="#段落首航缩进-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="段落首航缩进-1"><p>&ensp;&ensp;使用全角空格实现段落缩进<br>&ensp;&ensp;&ensp;&ensp;使用半角空格是段落缩进</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="段落首航缩进-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[参考链接](https://blog.csdn.net/manchan4869/article/details/128699543)</span><br><span class="line">&amp;ensp;&amp;ensp;使用全角空格实现段落缩进</span><br><span class="line">&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;使用半角空格是段落缩进</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<del>删除</del>线演示</p><font size = 5>5 号字</font><font face="黑体">黑体</font><font color=blue>蓝色</font><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线演示&lt;/u&gt;</span><br><span class="line"></span><br><span class="line">文字**加粗**演示</span><br><span class="line"></span><br><span class="line">文字*斜体*演示</span><br><span class="line"></span><br><span class="line">文本`高亮`演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line">&lt;font size = 5&gt;5 号字&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;黑体&quot;&gt;黑体&lt;/font&gt;</span><br><span class="line">&lt;font color=blue&gt;蓝色&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=MistyRose&gt;这里的背景色是：MistyRosen，此处输入任意想输入的内容&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="文本链接"><a href="#文本链接" class="headerlink" title="文本链接"></a>文本链接</h1><div class="tabs" id="文本链接"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#文本链接-1">示例</button></li><li class="tab"><button type="button" data-href="#文本链接-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="文本链接-1"><ol><li><a href="http://localhost:4000/posts/d2d7725.html">Markdown语法</a>  </li><li><a href="/posts/ad4f1e09.html" title="⇦当前位置🪂">🥬c++教程上</a></li></ol><ol><li><a href="/posts/761adea4.html" title="Windows技巧">Windows技巧</a></li><li><a href="/posts/761adea4.html" title="md文章跳转">md文章跳转</a>  </li><li><a href="#jump-id">文章内部跳转</a><span id='jump-id'>⇦当前位置🪂</span></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="文本链接-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. [Markdown语法](http://localhost:4000/posts/d2d7725.html)  </span><br><span class="line">2.    </span><br><span class="line">[🥬c++教程上][1]</span><br><span class="line">[1]:/posts/ad4f1e09.html  &quot;⇦当前位置🪂&quot;</span><br><span class="line">3. &#123;% post_link Windows技巧%&#125;</span><br><span class="line">4. &#123;% post_link Windows技巧 ⇦当前位置🪂 %&#125;  </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="网站卡片"><a href="#网站卡片" class="headerlink" title="网站卡片"></a>网站卡片</h2><div class="tabs" id="行内图片"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#行内图片-1">标签语法</button></li><li class="tab"><button type="button" data-href="#行内图片-2">参数配置</button></li><li class="tab"><button type="button" data-href="#行内图片-3">示例源码</button></li><li class="tab"><button type="button" data-href="#行内图片-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="行内图片-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内图片-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内图片-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内图片-4"><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">xaoxuu</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="链接卡片"><a href="#链接卡片" class="headerlink" title="链接卡片"></a>链接卡片</h2><div class="tabs" id="行内图片"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#行内图片-1">标签语法</button></li><li class="tab"><button type="button" data-href="#行内图片-2">参数配置</button></li><li class="tab"><button type="button" data-href="#行内图片-3">示例源码</button></li><li class="tab"><button type="button" data-href="#行内图片-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="行内图片-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内图片-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内图片-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内图片-4"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="行内图片"><a href="#行内图片" class="headerlink" title="行内图片"></a>行内图片</h2><div class="tabs" id="行内图片"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#行内图片-1">标签语法</button></li><li class="tab"><button type="button" data-href="#行内图片-2">参数配置</button></li><li class="tab"><button type="button" data-href="#行内图片-3">示例源码</button></li><li class="tab"><button type="button" data-href="#行内图片-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="行内图片-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内图片-2"><p><code>高度：height=20px</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内图片-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内图片-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="单张图片"><a href="#单张图片" class="headerlink" title="单张图片"></a>单张图片</h2><div class="tabs" id="单张图片"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#单张图片-1">标签语法</button></li><li class="tab"><button type="button" data-href="#单张图片-2">参数配置</button></li><li class="tab"><button type="button" data-href="#单张图片-3">示例源码</button></li><li class="tab"><button type="button" data-href="#单张图片-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="单张图片-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单张图片-2"><p>图片宽度高度：width=300px, height=32px<br>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）<br>占位背景色：bg=#f2f2f2</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单张图片-3"><p>1.添加描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><br>3.指定宽度并添加描述：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure></p><p>4.设置占位背景色：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单张图片-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2.指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><div class="tabs" id="音频"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#音频-1">标签语法</button></li><li class="tab"><button type="button" data-href="#音频-2">参数配置</button></li><li class="tab"><button type="button" data-href="#音频-3">示例源码</button></li><li class="tab"><button type="button" data-href="#音频-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="音频-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="音频-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="音频-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="音频-4"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><div class="tabs" id="视频"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#视频-1">标签语法</button></li><li class="tab"><button type="button" data-href="#视频-2">参数配置</button></li><li class="tab"><button type="button" data-href="#视频-3">示例源码</button></li><li class="tab"><button type="button" data-href="#视频-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="视频-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="视频-2"><p>对齐方向：left, center, right<br>列数：逗号后面直接写列数，支持 1 ～ 4 列。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="视频-3"><p>1.100%宽度<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br></pre></td></tr></table></figure><br>2.50%宽度<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></p><p>3.25%宽度<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="视频-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h2><div class="tabs" id="相册"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#相册-1">标签语法</button></li><li class="tab"><button type="button" data-href="#相册-2">参数配置</button></li><li class="tab"><button type="button" data-href="#相册-3">示例源码</button></li><li class="tab"><button type="button" data-href="#相册-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="相册-1"><p>gallerygroup 相册图库<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>gallery 相册<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="相册-2"><p>gallerygroup 相册图库<br>参数名    释义<br>name    图库名字<br>description    图库描述<br>link    链接到对应相册的地址<br>img-url    图库封面<br>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。建议在粘贴时故意使用长短、大小、横竖不一的图片，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="相册-3"><p>1.gallerygroup 相册图库<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>2.gallery 相册<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="相册-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="强制换行"><a href="#强制换行" class="headerlink" title="强制换行"></a>强制换行</h2><p>行尾连续两个空格</p><h2 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><p><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /></p><h1 id="在线图片"><a href="#在线图片" class="headerlink" title="在线图片"></a>在线图片</h1><p><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;/assets/pusheencode.webp&quot; alt=&quot;示例图片&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"># 在线图片</span><br><span class="line">![code](https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><div class="table-container"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">| 项目标号  | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---  |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><div class="tabs" id="公式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#公式-1">示例</button></li><li class="tab"><button type="button" data-href="#公式-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="公式-1"><script type="math/tex; mode=display"> L_n\left ( M^k \right )</script><script type="math/tex; mode=display">L_n\left\{M^k\right\}</script><script type="math/tex; mode=display">\Gamma(z)= \int_0^\infty t^{z-1}e^{-t}dt.</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="公式-2"><script type="math/tex; mode=display"> L_n\left ( M^k \right )</script><script type="math/tex; mode=display">L_n\left\{M^k\right\}</script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)= \int_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="上标签"><a href="#上标签" class="headerlink" title="上标签"></a>上标签</h1><div class="tabs" id="教程"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#教程-1">示例</button></li><li class="tab"><button type="button" data-href="#教程-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="教程-1"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="教程-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h1><div class="tabs" id="行内文本样式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#行内文本样式-1">示例</button></li><li class="tab"><button type="button" data-href="#行内文本样式-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="行内文本样式-1"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本样式-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line">2. 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line">3. 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line">4. 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line">5. 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line">6. 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h1><div class="tabs" id="行内文本-span"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#行内文本-span-1">示例</button></li><li class="tab"><button type="button" data-href="#行内文本-span-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="行内文本-span-1"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本-span-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 彩色文字</span><br><span class="line">  在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line">- 超大号文字</span><br><span class="line">  文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">  &#123;% span center logo large, Volantis %&#125;</span><br><span class="line">  &#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h1><div class="tabs" id="时间轴-span"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#时间轴-span-1">示例</button></li><li class="tab"><button type="button" data-href="#时间轴-span-2">源码</button></li><li class="tab"><button type="button" data-href="#时间轴-span-3">标签语法</button></li><li class="tab"><button type="button" data-href="#时间轴-span-4">配置参数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="时间轴-span-1"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="时间轴-span-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [2.6.6 -&gt; 3.0](https://github.com/volantis-x/hexo-theme-volantis/releases) --&gt;</span><br><span class="line"></span><br><span class="line">1. 如果有 `hexo-lazyload-image` 插件，需要删除并重新安装最新版本，设置 `lazyload.isSPA: true`。</span><br><span class="line">2. 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 `use_cdn: true` 则需要删除。</span><br><span class="line">3. 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line">4. 2.x 版本的置顶 `top: true` 改为了 `pin: true`，并且同样适用于 `layout: page` 的页面。</span><br><span class="line">5. 如果使用了 `hexo-offline` 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [2.6.3 -&gt; 2.6.6](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [2.6.2 -&gt; 2.6.3](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --&gt;</span><br><span class="line"></span><br><span class="line">1. 全局搜索 `seotitle` 并替换为 `seo_title`。</span><br><span class="line">2. group 组件的索引规则有变，使用 group 组件的文章内，`group: group_name` 对应的组件名必须是 `group_name`。</span><br><span class="line">2. group 组件的列表名优先显示文章的 `short_title` 其次是 `title`。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="时间轴-span-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="时间轴-span-4"><p>1.<code>title</code>:标题/时间线<br>2.<code>color</code>:timeline颜色:default(留空) / blue / pink / red / purple / orange / green</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="折叠框"><a href="#折叠框" class="headerlink" title="折叠框"></a>折叠框</h1><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><h1 id="分栏"><a href="#分栏" class="headerlink" title="分栏"></a>分栏</h1><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例</button></li><li class="tab"><button type="button" data-href="#分栏-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1"><i class="icon]"></i>[Tab caption] [</button></li><li class="tab"><button type="button" data-href="#test1-2"><i class="icon]"></i>[Tab caption] [</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p>Any content (support inline tags too).</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p>Any content (support inline tags too).</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="诗词标签"><a href="#诗词标签" class="headerlink" title="诗词标签"></a>诗词标签</h1><div class="tabs" id="诗词标签"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#诗词标签-1">示例</button></li><li class="tab"><button type="button" data-href="#诗词标签-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="诗词标签-1"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="诗词标签-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="隐藏块"><a href="#隐藏块" class="headerlink" title="隐藏块"></a>隐藏块</h1><div class="tabs" id="隐藏块"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#隐藏块-1">示例</button></li><li class="tab"><button type="button" data-href="#隐藏块-2">源码</button></li><li class="tab"><button type="button" data-href="#隐藏块-3">标签语法</button></li><li class="tab"><button type="button" data-href="#隐藏块-4">参数配置</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="隐藏块-1"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="fshby.top/../../img/城市日落.jpg" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="隐藏块-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line">&lt;img src=&quot;fshby.top/../../img/城市日落.jpg&quot; alt=&quot;image (1)&quot; alt=&quot;image (1)&quot; style=&quot;zoom:67%;&quot; /&gt;</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="隐藏块-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="隐藏块-4"><p>content：要隐藏的内容<br>display：展示前按钮显示的文字（可选）<br>bg：按钮的背景颜色（可选）<br>color：按钮显示的文字的颜色（可选）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏  %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="气泡注释"><a href="#气泡注释" class="headerlink" title="气泡注释"></a>气泡注释</h1><div class="tabs" id="气泡注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#气泡注释-1">示例</button></li><li class="tab"><button type="button" data-href="#气泡注释-2">标签语法</button></li><li class="tab"><button type="button" data-href="#气泡注释-3">参数配置</button></li><li class="tab"><button type="button" data-href="#气泡注释-4">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="气泡注释-1"><p><span class="bubble-content">气泡注释 </span><span class="bubble-notation"><span class="bubble-item" style="background-color: blue;"> 一种文章详细注释 </span>&lt;/span&gt;<br>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如 CSS 的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span>&lt;/span&gt;，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局”，用来为盒状模型提供最大的灵活性”</span>&lt;/span&gt;，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span>&lt;/span&gt;，animation 的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span>&lt;/span&gt;写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span>&lt;/span&gt;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="气泡注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="气泡注释-3"><p><code>content:</code> 注释词汇<br><code>otation:</code> 悬停显示的注解内容<br><code>background-color:</code> 可选，气泡背景色。默认为“#71a4e3”</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="气泡注释-4"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如 CSS 的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation 的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="引用文献"><a href="#引用文献" class="headerlink" title="引用文献"></a>引用文献</h1><p>Akilar の糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用 Hexo 框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly 主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了 Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个 volantis 的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly 主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><h1 id="mermaid图表"><a href="#mermaid图表" class="headerlink" title="mermaid图表"></a>mermaid图表</h1><h2 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">stateDiagram-v2[*] --> StillStill --> [*]Still --> MovingMoving --> StillMoving --> CrashCrash --> [*]</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stateDiagram-v2</span><br><span class="line">[*] --&gt; Still</span><br><span class="line">Still --&gt; [*]</span><br><span class="line">Still --&gt; Moving</span><br><span class="line">Moving --&gt; Still</span><br><span class="line">Moving --&gt; Crash</span><br><span class="line">Crash --&gt; [*]</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">sequenceDiagramAlice->>John: Hello John, how are you?John-->>Alice: Great!Alice-)John: See you later!</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">John--&gt;&gt;Alice: Great!</span><br><span class="line">Alice-)John: See you later!</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">graph TDStart --> StopStart --> next</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">Start --&gt; Stop</span><br><span class="line">Start --&gt; next</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">erDiagramCUSTOMER ||--o{ ORDER : placesORDER ||--|{ LINE-ITEM : containsCUSTOMER }|..|{ DELIVERY-ADDRESS : uses</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">erDiagram</span><br><span class="line">CUSTOMER ||--o&#123; ORDER : places</span><br><span class="line">ORDER ||--|&#123; LINE-ITEM : contains</span><br><span class="line">CUSTOMER &#125;|..|&#123; DELIVERY-ADDRESS : uses</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">classDiagramAnimal <|-- DuckAnimal <|-- FishAnimal <|-- ZebraAnimal : +int ageAnimal : +String genderAnimal: +isMammal()Animal: +mate()class Duck{+String beakColor+swim()+quack()}class Fish{-int sizeInFeet-canEat()}class Zebra{+bool is_wild+run()}</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">Animal &lt;|-- Duck</span><br><span class="line">Animal &lt;|-- Fish</span><br><span class="line">Animal &lt;|-- Zebra</span><br><span class="line">Animal : +int age</span><br><span class="line">Animal : +String gender</span><br><span class="line">Animal: +isMammal()</span><br><span class="line">Animal: +mate()</span><br><span class="line">class Duck&#123;</span><br><span class="line">+String beakColor</span><br><span class="line">+swim()</span><br><span class="line">+quack()</span><br><span class="line">&#125;</span><br><span class="line">class Fish&#123;</span><br><span class="line">-int sizeInFeet</span><br><span class="line">-canEat()</span><br><span class="line">&#125;</span><br><span class="line">class Zebra&#123;</span><br><span class="line">+bool is_wild</span><br><span class="line">+run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="旅程图"><a href="#旅程图" class="headerlink" title="旅程图"></a>旅程图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">journeytitle My working daysection Go to workMake tea: 5: MeGo upstairs: 3: MeDo work: 1: Me, Catsection Go homeGo downstairs: 5: MeSit down: 7: Me</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">journey</span><br><span class="line">title My working day</span><br><span class="line">section Go to work</span><br><span class="line">Make tea: 5: Me</span><br><span class="line">Go upstairs: 3: Me</span><br><span class="line">Do work: 1: Me, Cat</span><br><span class="line">section Go home</span><br><span class="line">Go downstairs: 5: Me</span><br><span class="line">Sit down: 7: Me</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h2> <div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">gantttitle A Gantt DiagramdateFormat  YYYY-MM-DDsection SectionA task           :a1, 2014-01-01, 3dAnother task     :after a1  , 20djava     :5dsection AnotherTask in sec      :2014-01-12  , 12danother task      : 24d</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">title A Gantt Diagram</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line">section Section</span><br><span class="line">A task           :a1, 2014-01-01, 3d</span><br><span class="line">Another task     :after a1  , 20d</span><br><span class="line">java     :5d</span><br><span class="line">section Another</span><br><span class="line">Task in sec      :2014-01-12  , 12d</span><br><span class="line">another task      : 24d</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">pie title 饮食统计"蔬菜" : 38"肉蛋" : 85"水果" : 15"有机蛋白" : 45</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pie title 饮食统计</span><br><span class="line">&quot;蔬菜&quot; : 38</span><br><span class="line">&quot;肉蛋&quot; : 85</span><br><span class="line">&quot;水果&quot; : 15</span><br><span class="line">&quot;有机蛋白&quot; : 45</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="公式格式"><a href="#公式格式" class="headerlink" title="公式格式"></a>公式格式</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><script type="math/tex; mode=display">\begin{Bmatrix}   a & b \\\\   c & d\end{Bmatrix}</script><script type="math/tex; mode=display">\begin{CD}   A @>a>> B \\@VbVV @AAcA \\   C @= D\end{CD}</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"></span><br><span class="line">\begin&#123;Bmatrix&#125;</span><br><span class="line">   a &amp; b \\\\</span><br><span class="line">   c &amp; d</span><br><span class="line">\end&#123;Bmatrix&#125;</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">\begin&#123;CD&#125;</span><br><span class="line">   A @&gt;a&gt;&gt; B \\</span><br><span class="line">@VbVV @AAcA \\</span><br><span class="line">   C @= D</span><br><span class="line">\end&#123;CD&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="横向流程图"><a href="#横向流程图" class="headerlink" title="横向流程图"></a>横向流程图</h2><div class="tabs" id="注释"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释-1">示例</button></li><li class="tab"><button type="button" data-href="#注释-2">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释-1"><pre class="mermaid">graph LRA[方形] -->B(圆角)    B --> C{条件a}    C -->|a=1| D[结果1]    C -->|a=2| E[结果2]    F[横向流程图]</pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><pre class="mermaid">graph TDA(开始) --> B[存储变量及用户界面]B --> C[用户根据界面提示输入]</pre><pre class="mermaid">graph LRA(开始) -->B[存储变量及用户界面]     B --> C{条件a}    C -->|a=1| D[结果1]    C -->|a=2| E[结果2]    F[横向流程图]</pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
